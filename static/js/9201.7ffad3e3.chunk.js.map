{"version":3,"file":"static/js/9201.7ffad3e3.chunk.js","mappings":"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","sources":["../node_modules/viem/utils/hash/toEventSelector.ts","../node_modules/viem/utils/abi/decodeFunctionResult.ts","../node_modules/viem/utils/abi/encodeAbiParameters.ts","../node_modules/viem/errors/stateOverride.ts","../node_modules/viem/utils/chain/getChainContractAddress.ts","../node_modules/viem/utils/formatters/extract.ts","../node_modules/viem/utils/abi/getAbiItem.ts","../node_modules/viem/errors/request.ts","../node_modules/viem/constants/abis.ts","../node_modules/viem/utils/transaction/assertRequest.ts","../node_modules/viem/utils/encoding/fromBytes.ts","../node_modules/viem/utils/abi/decodeAbiParameters.ts","../node_modules/viem/utils/stringify.ts","../node_modules/viem/utils/stateOverride.ts","../node_modules/viem/utils/hash/toFunctionSelector.ts","../node_modules/viem/accounts/utils/parseAccount.ts","../node_modules/viem/utils/abi/decodeErrorResult.ts","../node_modules/viem/utils/hash/hashSignature.ts","../node_modules/viem/node_modules/abitype/src/regex.ts","../node_modules/viem/node_modules/abitype/src/human-readable/formatAbiParameter.ts","../node_modules/viem/node_modules/abitype/src/human-readable/formatAbiParameters.ts","../node_modules/viem/utils/hash/toSignature.ts","../node_modules/viem/utils/hash/normalizeSignature.ts","../node_modules/viem/node_modules/abitype/src/human-readable/formatAbiItem.ts","../node_modules/viem/utils/hash/toSignatureHash.ts","../node_modules/viem/utils/promise/createBatchScheduler.ts","../node_modules/viem/utils/errors/getNodeError.ts","../node_modules/viem/utils/address/isAddressEqual.ts","../node_modules/viem/utils/abi/prepareEncodeFunctionData.ts","../node_modules/viem/utils/abi/encodeFunctionData.ts","../node_modules/viem/utils/abi/formatAbiItemWithArgs.ts","../node_modules/viem/errors/contract.ts","../node_modules/viem/errors/abi.ts","../node_modules/viem/constants/solidity.ts","../node_modules/viem/utils/abi/formatAbiItem.ts","../node_modules/viem/errors/transport.ts","../node_modules/viem/utils/rpc/id.ts","../node_modules/viem/utils/rpc/http.ts","../node_modules/viem/utils/promise/withTimeout.ts","../node_modules/viem/errors/rpc.ts","../node_modules/viem/utils/wait.ts","../node_modules/viem/utils/promise/withRetry.ts","../node_modules/viem/utils/buildRequest.ts","../node_modules/viem/clients/transports/http.ts","../node_modules/viem/clients/transports/createTransport.ts","../node_modules/viem/utils/uid.ts","../node_modules/viem/utils/ens/errors.ts","../node_modules/viem/utils/ens/encodedLabelToLabelhash.ts","../node_modules/viem/utils/ens/namehash.ts","../node_modules/viem/utils/ens/labelhash.ts","../node_modules/viem/utils/ens/packetToBytes.ts","../node_modules/viem/utils/ens/encodeLabelhash.ts","../node_modules/viem/utils/getAction.ts","../node_modules/viem/utils/errors/getContractError.ts","../node_modules/viem/actions/public/readContract.ts","../node_modules/viem/errors/ens.ts","../node_modules/viem/utils/ens/avatar/utils.ts","../node_modules/viem/utils/ens/avatar/parseAvatarRecord.ts","../node_modules/viem/actions/ens/getEnsText.ts","../node_modules/viem/utils/filters/createFilterRequestScope.ts","../node_modules/viem/errors/log.ts","../node_modules/viem/utils/abi/encodeEventTopics.ts","../node_modules/viem/actions/public/createContractEventFilter.ts","../node_modules/viem/actions/public/createEventFilter.ts","../node_modules/viem/actions/public/createPendingTransactionFilter.ts","../node_modules/viem/errors/estimateGas.ts","../node_modules/viem/errors/fee.ts","../node_modules/viem/errors/block.ts","../node_modules/viem/actions/public/getBlock.ts","../node_modules/viem/actions/public/getGasPrice.ts","../node_modules/viem/actions/public/estimateMaxPriorityFeePerGas.ts","../node_modules/viem/actions/public/estimateFeesPerGas.ts","../node_modules/viem/actions/public/getTransactionCount.ts","../node_modules/viem/actions/public/getChainId.ts","../node_modules/viem/actions/wallet/prepareTransactionRequest.ts","../node_modules/viem/actions/public/estimateGas.ts","../node_modules/viem/utils/errors/getEstimateGasError.ts","../node_modules/viem/utils/promise/withCache.ts","../node_modules/viem/actions/public/getBlockNumber.ts","../node_modules/viem/utils/abi/decodeEventLog.ts","../node_modules/viem/utils/abi/parseEventLogs.ts","../node_modules/viem/actions/public/getLogs.ts","../node_modules/viem/actions/public/getContractEvents.ts","../node_modules/viem/actions/public/getFeeHistory.ts","../node_modules/viem/utils/formatters/feeHistory.ts","../node_modules/viem/actions/public/getFilterChanges.ts","../node_modules/viem/actions/public/getProof.ts","../node_modules/viem/utils/formatters/proof.ts","../node_modules/viem/actions/public/getTransaction.ts","../node_modules/viem/actions/public/getTransactionReceipt.ts","../node_modules/viem/actions/public/uninstallFilter.ts","../node_modules/viem/constants/strings.ts","../node_modules/viem/utils/signature/hashMessage.ts","../node_modules/viem/constants/contracts.ts","../node_modules/viem/utils/abi/encodeDeployData.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/viem/actions/public/verifyHash.ts","../node_modules/viem/utils/signature/serializeSignature.ts","../node_modules/viem/utils/data/isBytesEqual.ts","../node_modules/viem/utils/regex.ts","../node_modules/viem/utils/typedData.ts","../node_modules/viem/utils/signature/hashTypedData.ts","../node_modules/viem/utils/observe.ts","../node_modules/viem/utils/poll.ts","../node_modules/viem/actions/public/watchBlockNumber.ts","../node_modules/viem/utils/siwe/parseSiweMessage.ts","../node_modules/viem/actions/siwe/verifySiweMessage.ts","../node_modules/viem/utils/siwe/validateSiweMessage.ts","../node_modules/viem/clients/decorators/public.ts","../node_modules/viem/actions/public/createBlockFilter.ts","../node_modules/viem/actions/public/estimateContractGas.ts","../node_modules/viem/actions/public/getBalance.ts","../node_modules/viem/actions/public/getBlobBaseFee.ts","../node_modules/viem/actions/public/getBlockTransactionCount.ts","../node_modules/viem/actions/public/getBytecode.ts","../node_modules/viem/actions/ens/getEnsAddress.ts","../node_modules/viem/actions/ens/getEnsAvatar.ts","../node_modules/viem/actions/ens/getEnsName.ts","../node_modules/viem/actions/ens/getEnsResolver.ts","../node_modules/viem/actions/public/getFilterLogs.ts","../node_modules/viem/actions/public/getStorageAt.ts","../node_modules/viem/actions/public/getTransactionConfirmations.ts","../node_modules/viem/actions/public/multicall.ts","../node_modules/viem/actions/wallet/sendRawTransaction.ts","../node_modules/viem/actions/public/simulateContract.ts","../node_modules/viem/actions/public/verifyMessage.ts","../node_modules/viem/actions/public/verifyTypedData.ts","../node_modules/viem/actions/public/waitForTransactionReceipt.ts","../node_modules/viem/actions/public/watchBlocks.ts","../node_modules/viem/actions/public/watchContractEvent.ts","../node_modules/viem/actions/public/watchEvent.ts","../node_modules/viem/actions/public/watchPendingTransactions.ts","../node_modules/viem/clients/createPublicClient.ts","../node_modules/viem/clients/createClient.ts","../node_modules/viem/utils/chain/extractChain.ts","../node_modules/viem/constants/contract.ts","../node_modules/viem/actions/public/call.ts","../node_modules/viem/utils/errors/getCallError.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type ToSignatureHashErrorType,\n  toSignatureHash,\n} from './toSignatureHash.js'\n\nexport type ToEventSelectorErrorType = ToSignatureHashErrorType | ErrorType\n\n/**\n * Returns the event selector for a given event definition.\n *\n * @example\n * const selector = toEventSelector('Transfer(address indexed from, address indexed to, uint256 amount)')\n * // 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n */\nexport const toEventSelector = toSignatureHash\n","import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n  AbiFunctionOutputsNotFoundError,\n  type AbiFunctionOutputsNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionReturnType,\n  Widen,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/decodeFunctionResult'\n\nexport type DecodeFunctionResultParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n  args extends ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  > = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n  data: Hex\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | undefined }\n      : { functionName: functionName | allFunctionNames }\n    : { functionName?: functionName | allFunctionNames | undefined }\n> &\n  UnionEvaluate<\n    readonly [] extends allArgs\n      ? {\n          args?:\n            | allArgs // show all options\n            // infer value, widen inferred value of `args` conditionally to match `allArgs`\n            | (abi extends Abi\n                ? args extends allArgs\n                  ? Widen<args>\n                  : never\n                : never)\n            | undefined\n        }\n      : {\n          args?:\n            | allArgs // show all options\n            | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\n            | undefined\n        }\n  > &\n  (hasFunctions extends true ? unknown : never)\n\nexport type DecodeFunctionResultReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n  args extends ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  > = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n> = ContractFunctionReturnType<\n  abi,\n  AbiStateMutability,\n  functionName extends ContractFunctionName<abi>\n    ? functionName\n    : ContractFunctionName<abi>,\n  args\n>\n\nexport type DecodeFunctionResultErrorType =\n  | AbiFunctionNotFoundErrorType\n  | AbiFunctionOutputsNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | GetAbiItemErrorType\n  | ErrorType\n\nexport function decodeFunctionResult<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n  const args extends ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  > = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n>(\n  parameters: DecodeFunctionResultParameters<abi, functionName, args>,\n): DecodeFunctionResultReturnType<abi, functionName, args> {\n  const { abi, args, functionName, data } =\n    parameters as DecodeFunctionResultParameters\n\n  let abiItem = abi[0]\n  if (functionName) {\n    const item = getAbiItem({ abi, args, name: functionName })\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\n    abiItem = item\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\n  if (!abiItem.outputs)\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\n\n  const values = decodeAbiParameters(abiItem.outputs, data)\n  if (values && values.length > 1)\n    return values as DecodeFunctionResultReturnType<abi, functionName, args>\n  if (values && values.length === 1)\n    return values[0] as DecodeFunctionResultReturnType<abi, functionName, args>\n  return undefined as DecodeFunctionResultReturnType<abi, functionName, args>\n}\n","import type {\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  AbiParametersToPrimitiveTypes,\n} from 'abitype'\n\nimport {\n  AbiEncodingArrayLengthMismatchError,\n  type AbiEncodingArrayLengthMismatchErrorType,\n  AbiEncodingBytesSizeMismatchError,\n  type AbiEncodingBytesSizeMismatchErrorType,\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  InvalidAbiEncodingTypeError,\n  type InvalidAbiEncodingTypeErrorType,\n  InvalidArrayError,\n  type InvalidArrayErrorType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type BoolToHexErrorType,\n  type NumberToHexErrorType,\n  type StringToHexErrorType,\n  boolToHex,\n  numberToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\n\nexport type EncodeAbiParametersReturnType = Hex\n\nexport type EncodeAbiParametersErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | PrepareParamsErrorType\n  | EncodeParamsErrorType\n  | ErrorType\n\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n *\n * - Docs: https://viem.sh/docs/abi/encodeAbiParameters#encodeabiparameters\n *\n *   Generates ABI encoded data using the [ABI specification](https://docs.soliditylang.org/en/latest/abi-spec), given a set of ABI parameters (inputs/outputs) and their corresponding values.\n *\n * @param params - a set of ABI Parameters (params), that can be in the shape of the inputs or outputs attribute of an ABI Item.\n * @param values - a set of values (values) that correspond to the given params.\n * @example\n * ```typescript\n * import { encodeAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   [\n *     { name: 'x', type: 'string' },\n *     { name: 'y', type: 'uint' },\n *     { name: 'z', type: 'bool' }\n *   ],\n *   ['wagmi', 420n, true]\n * )\n * ```\n *\n * You can also pass in Human Readable parameters with the parseAbiParameters utility.\n *\n * @example\n * ```typescript\n * import { encodeAbiParameters, parseAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   parseAbiParameters('string x, uint y, bool z'),\n *   ['wagmi', 420n, true]\n * )\n * ```\n */\nexport function encodeAbiParameters<\n  const TParams extends readonly AbiParameter[] | readonly unknown[],\n>(\n  params: TParams,\n  values: TParams extends readonly AbiParameter[]\n    ? AbiParametersToPrimitiveTypes<TParams>\n    : never,\n): EncodeAbiParametersReturnType {\n  if (params.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: params.length as number,\n      givenLength: values.length as any,\n    })\n  // Prepare the parameters to determine dynamic types to encode.\n  const preparedParams = prepareParams({\n    params: params as readonly AbiParameter[],\n    values: values as any,\n  })\n  const data = encodeParams(preparedParams)\n  if (data.length === 0) return '0x'\n  return data\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype PreparedParam = { dynamic: boolean; encoded: Hex }\n\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\ntype Tuple = AbiParameterToPrimitiveType<TupleAbiParameter>\n\nexport type PrepareParamsErrorType = ErrorType\n\nfunction prepareParams<const TParams extends readonly AbiParameter[]>({\n  params,\n  values,\n}: {\n  params: TParams\n  values: AbiParametersToPrimitiveTypes<TParams>\n}) {\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({ param: params[i], value: values[i] }))\n  }\n  return preparedParams\n}\n\nexport type PrepareParamErrorType =\n  | GetArrayComponentsErrorType\n  | InvalidAbiEncodingTypeErrorType\n  | ErrorType\n\nfunction prepareParam<const TParam extends AbiParameter>({\n  param,\n  value,\n}: {\n  param: TParam\n  value: AbiParameterToPrimitiveType<TParam>\n}): PreparedParam {\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return encodeArray(value, { length, param: { ...param, type } })\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(value as unknown as Tuple, {\n      param: param as TupleAbiParameter,\n    })\n  }\n  if (param.type === 'address') {\n    return encodeAddress(value as unknown as Hex)\n  }\n  if (param.type === 'bool') {\n    return encodeBool(value as unknown as boolean)\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    const signed = param.type.startsWith('int')\n    return encodeNumber(value as unknown as number, { signed })\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(value as unknown as Hex, { param })\n  }\n  if (param.type === 'string') {\n    return encodeString(value as unknown as string)\n  }\n  throw new InvalidAbiEncodingTypeError(param.type, {\n    docsPath: '/docs/contract/encodeAbiParameters',\n  })\n}\n\n/////////////////////////////////////////////////////////////////\n\nexport type EncodeParamsErrorType =\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeParams(preparedParams: PreparedParam[]): Hex {\n  // 1. Compute the size of the static part of the parameters.\n  let staticSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) staticSize += 32\n    else staticSize += size(encoded)\n  }\n\n  // 2. Split the parameters into static and dynamic parts.\n  const staticParams: Hex[] = []\n  const dynamicParams: Hex[] = []\n  let dynamicSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) {\n      staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }))\n      dynamicParams.push(encoded)\n      dynamicSize += size(encoded)\n    } else {\n      staticParams.push(encoded)\n    }\n  }\n\n  // 3. Concatenate static and dynamic parts.\n  return concat([...staticParams, ...dynamicParams])\n}\n\n/////////////////////////////////////////////////////////////////\n\nexport type EncodeAddressErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nfunction encodeAddress(value: Hex): PreparedParam {\n  if (!isAddress(value)) throw new InvalidAddressError({ address: value })\n  return { dynamic: false, encoded: padHex(value.toLowerCase() as Hex) }\n}\n\nexport type EncodeArrayErrorType =\n  | AbiEncodingArrayLengthMismatchErrorType\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | InvalidArrayErrorType\n  | NumberToHexErrorType\n  | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeArray<const TParam extends AbiParameter>(\n  value: AbiParameterToPrimitiveType<TParam>,\n  {\n    length,\n    param,\n  }: {\n    length: number | null\n    param: TParam\n  },\n): PreparedParam {\n  const dynamic = length === null\n\n  if (!Array.isArray(value)) throw new InvalidArrayError(value)\n  if (!dynamic && value.length !== length)\n    throw new AbiEncodingArrayLengthMismatchError({\n      expectedLength: length!,\n      givenLength: value.length,\n      type: `${param.type}[${length}]`,\n    })\n\n  let dynamicChild = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({ param, value: value[i] })\n    if (preparedParam.dynamic) dynamicChild = true\n    preparedParams.push(preparedParam)\n  }\n\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams)\n    if (dynamic) {\n      const length = numberToHex(preparedParams.length, { size: 32 })\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? concat([length, data]) : length,\n      }\n    }\n    if (dynamicChild) return { dynamic: true, encoded: data }\n  }\n  return {\n    dynamic: false,\n    encoded: concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\nexport type EncodeBytesErrorType =\n  | AbiEncodingBytesSizeMismatchErrorType\n  | ConcatErrorType\n  | PadHexErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeBytes<const TParam extends AbiParameter>(\n  value: Hex,\n  { param }: { param: TParam },\n): PreparedParam {\n  const [, paramSize] = param.type.split('bytes')\n  const bytesSize = size(value)\n  if (!paramSize) {\n    let value_ = value\n    // If the size is not divisible by 32 bytes, pad the end\n    // with empty bytes to the ceiling 32 bytes.\n    if (bytesSize % 32 !== 0)\n      value_ = padHex(value_, {\n        dir: 'right',\n        size: Math.ceil((value.length - 2) / 2 / 32) * 32,\n      })\n    return {\n      dynamic: true,\n      encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\n    }\n  }\n  if (bytesSize !== Number.parseInt(paramSize))\n    throw new AbiEncodingBytesSizeMismatchError({\n      expectedSize: Number.parseInt(paramSize),\n      value,\n    })\n  return { dynamic: false, encoded: padHex(value, { dir: 'right' }) }\n}\n\nexport type EncodeBoolErrorType =\n  | PadHexErrorType\n  | BoolToHexErrorType\n  | ErrorType\n\nfunction encodeBool(value: boolean): PreparedParam {\n  if (typeof value !== 'boolean')\n    throw new BaseError(\n      `Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`,\n    )\n  return { dynamic: false, encoded: padHex(boolToHex(value)) }\n}\n\nexport type EncodeNumberErrorType = NumberToHexErrorType | ErrorType\n\nfunction encodeNumber(\n  value: number,\n  { signed }: { signed: boolean },\n): PreparedParam {\n  return {\n    dynamic: false,\n    encoded: numberToHex(value, {\n      size: 32,\n      signed,\n    }),\n  }\n}\n\nexport type EncodeStringErrorType =\n  | ConcatErrorType\n  | NumberToHexErrorType\n  | PadHexErrorType\n  | SizeErrorType\n  | SliceErrorType\n  | StringToHexErrorType\n  | ErrorType\n\nfunction encodeString(value: string): PreparedParam {\n  const hexValue = stringToHex(value)\n  const partsLength = Math.ceil(size(hexValue) / 32)\n  const parts: Hex[] = []\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(\n      padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n        dir: 'right',\n      }),\n    )\n  }\n  return {\n    dynamic: true,\n    encoded: concat([\n      padHex(numberToHex(size(hexValue), { size: 32 })),\n      ...parts,\n    ]),\n  }\n}\n\nexport type EncodeTupleErrorType =\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeTuple<\n  const TParam extends AbiParameter & { components: readonly AbiParameter[] },\n>(\n  value: AbiParameterToPrimitiveType<TParam>,\n  { param }: { param: TParam },\n): PreparedParam {\n  let dynamic = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i]\n    const index = Array.isArray(value) ? i : param_.name\n    const preparedParam = prepareParam({\n      param: param_,\n      value: (value as any)[index!] as readonly unknown[],\n    })\n    preparedParams.push(preparedParam)\n    if (preparedParam.dynamic) dynamic = true\n  }\n  return {\n    dynamic,\n    encoded: dynamic\n      ? encodeParams(preparedParams)\n      : concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\nexport type GetArrayComponentsErrorType = ErrorType\n\nexport function getArrayComponents(\n  type: string,\n): [length: number | null, innerType: string] | undefined {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/)\n  return matches\n    ? // Return `null` if the array is dynamic.\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\n    : undefined\n}\n","import type { StateMapping, StateOverride } from '../types/stateOverride.js'\nimport { BaseError } from './base.js'\n\nexport type AccountStateConflictErrorType = AccountStateConflictError & {\n  name: 'AccountStateConflictError'\n}\n\nexport class AccountStateConflictError extends BaseError {\n  override name = 'AccountStateConflictError'\n  constructor({ address }: { address: string }) {\n    super(`State for account \"${address}\" is set multiple times.`)\n  }\n}\n\nexport type StateAssignmentConflictErrorType = StateAssignmentConflictError & {\n  name: 'StateAssignmentConflictError'\n}\n\nexport class StateAssignmentConflictError extends BaseError {\n  override name = 'StateAssignmentConflictError'\n  constructor() {\n    super('state and stateDiff are set on the same account.')\n  }\n}\n\nexport function prettyStateMapping(stateMapping: StateMapping) {\n  return stateMapping.reduce((pretty, { slot, value }) => {\n    return `${pretty}        ${slot}: ${value}\\n`\n  }, '')\n}\n\nexport function prettyStateOverride(stateOverride: StateOverride) {\n  return stateOverride\n    .reduce((pretty, { address, ...state }) => {\n      let val = `${pretty}    ${address}:\\n`\n      if (state.nonce) val += `      nonce: ${state.nonce}\\n`\n      if (state.balance) val += `      balance: ${state.balance}\\n`\n      if (state.code) val += `      code: ${state.code}\\n`\n      if (state.state) {\n        val += '      state:\\n'\n        val += prettyStateMapping(state.state)\n      }\n      if (state.stateDiff) {\n        val += '      stateDiff:\\n'\n        val += prettyStateMapping(state.stateDiff)\n      }\n      return val\n    }, '  State Override:\\n')\n    .slice(0, -1)\n}\n","import {\n  ChainDoesNotSupportContract,\n  type ChainDoesNotSupportContractErrorType,\n} from '../../errors/chain.js'\nimport type { Chain, ChainContract } from '../../types/chain.js'\n\nexport type GetChainContractAddressErrorType =\n  ChainDoesNotSupportContractErrorType\n\nexport function getChainContractAddress({\n  blockNumber,\n  chain,\n  contract: name,\n}: {\n  blockNumber?: bigint | undefined\n  chain: Chain\n  contract: string\n}) {\n  const contract = (chain?.contracts as Record<string, ChainContract>)?.[name]\n  if (!contract)\n    throw new ChainDoesNotSupportContract({\n      chain,\n      contract: { name },\n    })\n\n  if (\n    blockNumber &&\n    contract.blockCreated &&\n    contract.blockCreated > blockNumber\n  )\n    throw new ChainDoesNotSupportContract({\n      blockNumber,\n      chain,\n      contract: {\n        name,\n        blockCreated: contract.blockCreated,\n      },\n    })\n\n  return contract.address\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ChainFormatter } from '../../types/chain.js'\n\nexport type ExtractErrorType = ErrorType\n\n/**\n * @description Picks out the keys from `value` that exist in the formatter..\n */\nexport function extract(\n  value_: Record<string, unknown>,\n  { format }: { format?: ChainFormatter['format'] | undefined },\n) {\n  if (!format) return {}\n\n  const value: Record<string, unknown> = {}\n  function extract_(formatted: Record<string, any>) {\n    const keys = Object.keys(formatted)\n    for (const key of keys) {\n      if (key in value_) value[key] = value_[key]\n      if (\n        formatted[key] &&\n        typeof formatted[key] === 'object' &&\n        !Array.isArray(formatted[key])\n      )\n        extract_(formatted[key])\n    }\n  }\n\n  const formatted = format(value_ || {})\n  extract_(formatted)\n\n  return value\n}\n","import type { Abi, AbiParameter, Address } from 'abitype'\n\nimport { AbiItemAmbiguityError } from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AbiItem,\n  AbiItemArgs,\n  AbiItemName,\n  ExtractAbiItemForArgs,\n  Widen,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionEvaluate } from '../../types/utils.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { toEventSelector } from '../hash/toEventSelector.js'\nimport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n} from '../hash/toFunctionSelector.js'\n\nexport type GetAbiItemParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  name extends AbiItemName<abi> = AbiItemName<abi>,\n  args extends AbiItemArgs<abi, name> | undefined = AbiItemArgs<abi, name>,\n  ///\n  allArgs = AbiItemArgs<abi, name>,\n  allNames = AbiItemName<abi>,\n> = {\n  abi: abi\n  name:\n    | allNames // show all options\n    | (name extends allNames ? name : never) // infer value\n    | Hex // function selector\n} & UnionEvaluate<\n  readonly [] extends allArgs\n    ? {\n        args?:\n          | allArgs // show all options\n          // infer value, widen inferred value of `args` conditionally to match `allArgs`\n          | (abi extends Abi\n              ? args extends allArgs\n                ? Widen<args>\n                : never\n              : never)\n          | undefined\n      }\n    : {\n        args?:\n          | allArgs // show all options\n          | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\n          | undefined\n      }\n>\n\nexport type GetAbiItemErrorType =\n  | IsArgOfTypeErrorType\n  | IsHexErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport type GetAbiItemReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  name extends AbiItemName<abi> = AbiItemName<abi>,\n  args extends AbiItemArgs<abi, name> | undefined = AbiItemArgs<abi, name>,\n> = abi extends Abi\n  ? Abi extends abi\n    ? AbiItem | undefined\n    : ExtractAbiItemForArgs<\n        abi,\n        name,\n        args extends AbiItemArgs<abi, name> ? args : AbiItemArgs<abi, name>\n      >\n  : AbiItem | undefined\n\nexport function getAbiItem<\n  const abi extends Abi | readonly unknown[],\n  name extends AbiItemName<abi>,\n  const args extends AbiItemArgs<abi, name> | undefined = undefined,\n>(\n  parameters: GetAbiItemParameters<abi, name, args>,\n): GetAbiItemReturnType<abi, name, args> {\n  const { abi, args = [], name } = parameters as unknown as GetAbiItemParameters\n\n  const isSelector = isHex(name, { strict: false })\n  const abiItems = (abi as Abi).filter((abiItem) => {\n    if (isSelector) {\n      if (abiItem.type === 'function')\n        return toFunctionSelector(abiItem) === name\n      if (abiItem.type === 'event') return toEventSelector(abiItem) === name\n      return false\n    }\n    return 'name' in abiItem && abiItem.name === name\n  })\n\n  if (abiItems.length === 0)\n    return undefined as GetAbiItemReturnType<abi, name, args>\n  if (abiItems.length === 1)\n    return abiItems[0] as GetAbiItemReturnType<abi, name, args>\n\n  let matchedAbiItem: AbiItem | undefined = undefined\n  for (const abiItem of abiItems) {\n    if (!('inputs' in abiItem)) continue\n    if (!args || args.length === 0) {\n      if (!abiItem.inputs || abiItem.inputs.length === 0)\n        return abiItem as GetAbiItemReturnType<abi, name, args>\n      continue\n    }\n    if (!abiItem.inputs) continue\n    if (abiItem.inputs.length === 0) continue\n    if (abiItem.inputs.length !== args.length) continue\n    const matched = args.every((arg, index) => {\n      const abiParameter = 'inputs' in abiItem && abiItem.inputs![index]\n      if (!abiParameter) return false\n      return isArgOfType(arg, abiParameter)\n    })\n    if (matched) {\n      // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\n      if (\n        matchedAbiItem &&\n        'inputs' in matchedAbiItem &&\n        matchedAbiItem.inputs\n      ) {\n        const ambiguousTypes = getAmbiguousTypes(\n          abiItem.inputs,\n          matchedAbiItem.inputs,\n          args as readonly unknown[],\n        )\n        if (ambiguousTypes)\n          throw new AbiItemAmbiguityError(\n            {\n              abiItem,\n              type: ambiguousTypes[0],\n            },\n            {\n              abiItem: matchedAbiItem,\n              type: ambiguousTypes[1],\n            },\n          )\n      }\n\n      matchedAbiItem = abiItem\n    }\n  }\n\n  if (matchedAbiItem)\n    return matchedAbiItem as GetAbiItemReturnType<abi, name, args>\n  return abiItems[0] as GetAbiItemReturnType<abi, name, args>\n}\n\nexport type IsArgOfTypeErrorType = IsAddressErrorType | ErrorType\n\nexport function isArgOfType(arg: unknown, abiParameter: AbiParameter): boolean {\n  const argType = typeof arg\n  const abiParameterType = abiParameter.type\n  switch (abiParameterType) {\n    case 'address':\n      return isAddress(arg as Address, { strict: false })\n    case 'bool':\n      return argType === 'boolean'\n    case 'function':\n      return argType === 'string'\n    case 'string':\n      return argType === 'string'\n    default: {\n      if (abiParameterType === 'tuple' && 'components' in abiParameter)\n        return Object.values(abiParameter.components).every(\n          (component, index) => {\n            return isArgOfType(\n              Object.values(arg as unknown[] | Record<string, unknown>)[index],\n              component as AbiParameter,\n            )\n          },\n        )\n\n      // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n      // https://regexr.com/6v8hp\n      if (\n        /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(\n          abiParameterType,\n        )\n      )\n        return argType === 'number' || argType === 'bigint'\n\n      // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n      // https://regexr.com/6va55\n      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n        return argType === 'string' || arg instanceof Uint8Array\n\n      // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\n      // https://regexr.com/6va6i\n      if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n        return (\n          Array.isArray(arg) &&\n          arg.every((x: unknown) =>\n            isArgOfType(x, {\n              ...abiParameter,\n              // Pop off `[]` or `[M]` from end of type\n              type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\n            } as AbiParameter),\n          )\n        )\n      }\n\n      return false\n    }\n  }\n}\n\nexport function getAmbiguousTypes(\n  sourceParameters: readonly AbiParameter[],\n  targetParameters: readonly AbiParameter[],\n  args: AbiItemArgs,\n): AbiParameter['type'][] | undefined {\n  for (const parameterIndex in sourceParameters) {\n    const sourceParameter = sourceParameters[parameterIndex]\n    const targetParameter = targetParameters[parameterIndex]\n\n    if (\n      sourceParameter.type === 'tuple' &&\n      targetParameter.type === 'tuple' &&\n      'components' in sourceParameter &&\n      'components' in targetParameter\n    )\n      return getAmbiguousTypes(\n        sourceParameter.components,\n        targetParameter.components,\n        (args as any)[parameterIndex],\n      )\n\n    const types = [sourceParameter.type, targetParameter.type]\n\n    const ambiguous = (() => {\n      if (types.includes('address') && types.includes('bytes20')) return true\n      if (types.includes('address') && types.includes('string'))\n        return isAddress(args[parameterIndex] as Address, { strict: false })\n      if (types.includes('address') && types.includes('bytes'))\n        return isAddress(args[parameterIndex] as Address, { strict: false })\n      return false\n    })()\n\n    if (ambiguous) return types\n  }\n\n  return\n}\n","import { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type HttpRequestErrorType = HttpRequestError & {\n  name: 'HttpRequestError'\n}\nexport class HttpRequestError extends BaseError {\n  override name = 'HttpRequestError'\n\n  body?: { [x: string]: unknown } | { [y: string]: unknown }[] | undefined\n  headers?: Headers | undefined\n  status?: number | undefined\n  url: string\n\n  constructor({\n    body,\n    details,\n    headers,\n    status,\n    url,\n  }: {\n    body?: { [x: string]: unknown } | { [y: string]: unknown }[] | undefined\n    details?: string | undefined\n    headers?: Headers | undefined\n    status?: number | undefined\n    url: string\n  }) {\n    super('HTTP request failed.', {\n      details,\n      metaMessages: [\n        status && `Status: ${status}`,\n        `URL: ${getUrl(url)}`,\n        body && `Request body: ${stringify(body)}`,\n      ].filter(Boolean) as string[],\n    })\n    this.body = body\n    this.headers = headers\n    this.status = status\n    this.url = url\n  }\n}\n\nexport type WebSocketRequestErrorType = WebSocketRequestError & {\n  name: 'WebSocketRequestError'\n}\nexport class WebSocketRequestError extends BaseError {\n  override name = 'WebSocketRequestError'\n\n  constructor({\n    body,\n    details,\n    url,\n  }: {\n    body: { [key: string]: unknown }\n    details: string\n    url: string\n  }) {\n    super('WebSocket request failed.', {\n      details,\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n  }\n}\n\nexport type RpcRequestErrorType = RpcRequestError & {\n  name: 'RpcRequestError'\n}\nexport class RpcRequestError extends BaseError {\n  override name = 'RpcRequestError'\n\n  code: number\n\n  constructor({\n    body,\n    error,\n    url,\n  }: {\n    body: { [x: string]: unknown } | { [y: string]: unknown }[]\n    error: { code: number; message: string }\n    url: string\n  }) {\n    super('RPC Request failed.', {\n      cause: error as any,\n      details: error.message,\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n    this.code = error.code\n  }\n}\n\nexport type TimeoutErrorType = TimeoutError & {\n  name: 'TimeoutError'\n}\nexport class TimeoutError extends BaseError {\n  override name = 'TimeoutError'\n\n  constructor({\n    body,\n    url,\n  }: {\n    body: { [x: string]: unknown } | { [y: string]: unknown }[]\n    url: string\n  }) {\n    super('The request took too long to respond.', {\n      details: 'The request timed out.',\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\n    })\n  }\n}\n","/* [Multicall3](https://github.com/mds1/multicall) */\nexport const multicall3Abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            name: 'target',\n            type: 'address',\n          },\n          {\n            name: 'allowFailure',\n            type: 'bool',\n          },\n          {\n            name: 'callData',\n            type: 'bytes',\n          },\n        ],\n        name: 'calls',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'aggregate3',\n    outputs: [\n      {\n        components: [\n          {\n            name: 'success',\n            type: 'bool',\n          },\n          {\n            name: 'returnData',\n            type: 'bytes',\n          },\n        ],\n        name: 'returnData',\n        type: 'tuple[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n] as const\n\nconst universalResolverErrors = [\n  {\n    inputs: [],\n    name: 'ResolverNotFound',\n    type: 'error',\n  },\n  {\n    inputs: [],\n    name: 'ResolverWildcardNotSupported',\n    type: 'error',\n  },\n  {\n    inputs: [],\n    name: 'ResolverNotContract',\n    type: 'error',\n  },\n  {\n    inputs: [\n      {\n        name: 'returnData',\n        type: 'bytes',\n      },\n    ],\n    name: 'ResolverError',\n    type: 'error',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            name: 'status',\n            type: 'uint16',\n          },\n          {\n            name: 'message',\n            type: 'string',\n          },\n        ],\n        name: 'errors',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'HttpError',\n    type: 'error',\n  },\n] as const\n\nexport const universalResolverResolveAbi = [\n  ...universalResolverErrors,\n  {\n    name: 'resolve',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'name', type: 'bytes' },\n      { name: 'data', type: 'bytes' },\n    ],\n    outputs: [\n      { name: '', type: 'bytes' },\n      { name: 'address', type: 'address' },\n    ],\n  },\n  {\n    name: 'resolve',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'name', type: 'bytes' },\n      { name: 'data', type: 'bytes' },\n      { name: 'gateways', type: 'string[]' },\n    ],\n    outputs: [\n      { name: '', type: 'bytes' },\n      { name: 'address', type: 'address' },\n    ],\n  },\n] as const\n\nexport const universalResolverReverseAbi = [\n  ...universalResolverErrors,\n  {\n    name: 'reverse',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'bytes', name: 'reverseName' }],\n    outputs: [\n      { type: 'string', name: 'resolvedName' },\n      { type: 'address', name: 'resolvedAddress' },\n      { type: 'address', name: 'reverseResolver' },\n      { type: 'address', name: 'resolver' },\n    ],\n  },\n  {\n    name: 'reverse',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { type: 'bytes', name: 'reverseName' },\n      { type: 'string[]', name: 'gateways' },\n    ],\n    outputs: [\n      { type: 'string', name: 'resolvedName' },\n      { type: 'address', name: 'resolvedAddress' },\n      { type: 'address', name: 'reverseResolver' },\n      { type: 'address', name: 'resolver' },\n    ],\n  },\n] as const\n\nexport const textResolverAbi = [\n  {\n    name: 'text',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'name', type: 'bytes32' },\n      { name: 'key', type: 'string' },\n    ],\n    outputs: [{ name: '', type: 'string' }],\n  },\n] as const\n\nexport const addressResolverAbi = [\n  {\n    name: 'addr',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ name: 'name', type: 'bytes32' }],\n    outputs: [{ name: '', type: 'address' }],\n  },\n  {\n    name: 'addr',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'name', type: 'bytes32' },\n      { name: 'coinType', type: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bytes' }],\n  },\n] as const\n\n// ERC-1271\n// isValidSignature(bytes32 hash, bytes signature) → bytes4 magicValue\nexport const smartAccountAbi = [\n  {\n    name: 'isValidSignature',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { name: 'hash', type: 'bytes32' },\n      { name: 'signature', type: 'bytes' },\n    ],\n    outputs: [{ name: '', type: 'bytes4' }],\n  },\n] as const\n\n// ERC-6492 - universal deployless signature validator contract\n// constructor(address _signer, bytes32 _hash, bytes _signature) → bytes4 returnValue\n// returnValue is either 0x1 (valid) or 0x0 (invalid)\nexport const universalSignatureValidatorAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '_signer',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: '_hash',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes',\n        name: '_signature',\n        type: 'bytes',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n] as const\n\n/** [ERC-20 Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20) */\nexport const erc20Abi = [\n  {\n    type: 'event',\n    name: 'Approval',\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'event',\n    name: 'Transfer',\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'allowance',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    stateMutability: 'nonpayable',\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'balanceOf',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'decimals',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'uint8',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'name',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'string',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'symbol',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'string',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'totalSupply',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'transfer',\n    stateMutability: 'nonpayable',\n    inputs: [\n      {\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'transferFrom',\n    stateMutability: 'nonpayable',\n    inputs: [\n      {\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n  },\n] as const\n\n/**\n * [bytes32-flavored ERC-20](https://docs.makerdao.com/smart-contract-modules/mkr-module#4.-gotchas-potential-source-of-user-error)\n * for tokens (ie. Maker) that use bytes32 instead of string.\n */\nexport const erc20Abi_bytes32 = [\n  {\n    type: 'event',\n    name: 'Approval',\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'event',\n    name: 'Transfer',\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'allowance',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    stateMutability: 'nonpayable',\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'balanceOf',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'decimals',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'uint8',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'name',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'bytes32',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'symbol',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'bytes32',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'totalSupply',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'transfer',\n    stateMutability: 'nonpayable',\n    inputs: [\n      {\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'transferFrom',\n    stateMutability: 'nonpayable',\n    inputs: [\n      {\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n  },\n] as const\n\n/** [ERC-721 Non-Fungible Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-721) */\nexport const erc721Abi = [\n  {\n    type: 'event',\n    name: 'Approval',\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'event',\n    name: 'ApprovalForAll',\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n  },\n  {\n    type: 'event',\n    name: 'Transfer',\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    stateMutability: 'payable',\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    outputs: [],\n  },\n  {\n    type: 'function',\n    name: 'balanceOf',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'getApproved',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'address',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'isApprovedForAll',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'operator',\n        type: 'address',\n      },\n    ],\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'name',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'string',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'ownerOf',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'safeTransferFrom',\n    stateMutability: 'payable',\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n      },\n      {\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    outputs: [],\n  },\n  {\n    type: 'function',\n    name: 'safeTransferFrom',\n    stateMutability: 'nonpayable',\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n      },\n      {\n        name: 'id',\n        type: 'uint256',\n      },\n      {\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    outputs: [],\n  },\n  {\n    type: 'function',\n    name: 'setApprovalForAll',\n    stateMutability: 'nonpayable',\n    inputs: [\n      {\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    outputs: [],\n  },\n  {\n    type: 'function',\n    name: 'symbol',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'string',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'tokenByIndex',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'index',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'tokenByIndex',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'index',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'tokenURI',\n    stateMutability: 'view',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        type: 'string',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'totalSupply',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'function',\n    name: 'transferFrom',\n    stateMutability: 'payable',\n    inputs: [\n      {\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        name: 'tokeId',\n        type: 'uint256',\n      },\n    ],\n    outputs: [],\n  },\n] as const\n\n/** [ERC-4626 Tokenized Vaults Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-4626) */\nexport const erc4626Abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'receiver',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'assets',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    name: 'Deposit',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'receiver',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        name: 'assets',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    name: 'Withdraw',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'asset',\n    outputs: [\n      {\n        name: 'assetTokenAddress',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    name: 'convertToAssets',\n    outputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n    ],\n    name: 'convertToShares',\n    outputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n      {\n        name: 'receiver',\n        type: 'address',\n      },\n    ],\n    name: 'deposit',\n    outputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'caller',\n        type: 'address',\n      },\n    ],\n    name: 'maxDeposit',\n    outputs: [\n      {\n        name: 'maxAssets',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'caller',\n        type: 'address',\n      },\n    ],\n    name: 'maxMint',\n    outputs: [\n      {\n        name: 'maxShares',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'maxRedeem',\n    outputs: [\n      {\n        name: 'maxShares',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'maxWithdraw',\n    outputs: [\n      {\n        name: 'maxAssets',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n      {\n        name: 'receiver',\n        type: 'address',\n      },\n    ],\n    name: 'mint',\n    outputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n    ],\n    name: 'previewDeposit',\n    outputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    name: 'previewMint',\n    outputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    name: 'previewRedeem',\n    outputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n    ],\n    name: 'previewWithdraw',\n    outputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n      {\n        name: 'receiver',\n        type: 'address',\n      },\n      {\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'redeem',\n    outputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'totalAssets',\n    outputs: [\n      {\n        name: 'totalManagedAssets',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'to',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n      },\n      {\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        name: 'assets',\n        type: 'uint256',\n      },\n      {\n        name: 'receiver',\n        type: 'address',\n      },\n      {\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'withdraw',\n    outputs: [\n      {\n        name: 'shares',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n] as const\n","import {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport {\n  FeeConflictError,\n  type FeeConflictErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddress } from '../address/isAddress.js'\n\nexport type AssertRequestParameters = ExactPartial<\n  SendTransactionParameters<Chain>\n>\n\nexport type AssertRequestErrorType =\n  | InvalidAddressErrorType\n  | FeeConflictErrorType\n  | FeeCapTooHighErrorType\n  | ParseAccountErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertRequest(args: AssertRequestParameters) {\n  const {\n    account: account_,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    to,\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n  if (account && !isAddress(account.address))\n    throw new InvalidAddressError({ address: account.address })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (\n    typeof gasPrice !== 'undefined' &&\n    (typeof maxFeePerGas !== 'undefined' ||\n      typeof maxPriorityFeePerGas !== 'undefined')\n  )\n    throw new FeeConflictError()\n\n  if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n","import { InvalidBytesBooleanError } from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\n\nimport {\n  type AssertSizeErrorType,\n  type HexToBigIntErrorType,\n  type HexToNumberErrorType,\n  assertSize,\n  hexToBigInt,\n  hexToNumber,\n} from './fromHex.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nexport type FromBytesParameters<\n  TTo extends 'string' | 'hex' | 'bigint' | 'number' | 'boolean',\n> =\n  | TTo\n  | {\n      /** Size of the bytes. */\n      size?: number | undefined\n      /** Type to convert to. */\n      to: TTo\n    }\n\nexport type FromBytesReturnType<TTo> = TTo extends 'string'\n  ? string\n  : TTo extends 'hex'\n    ? Hex\n    : TTo extends 'bigint'\n      ? bigint\n      : TTo extends 'number'\n        ? number\n        : TTo extends 'boolean'\n          ? boolean\n          : never\n\nexport type FromBytesErrorType =\n  | BytesToHexErrorType\n  | BytesToBigIntErrorType\n  | BytesToBoolErrorType\n  | BytesToNumberErrorType\n  | BytesToStringErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a UTF-8 string, hex value, number, bigint or boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes\n * - Example: https://viem.sh/docs/utilities/fromBytes#usage\n *\n * @param bytes Byte array to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromBytes } from 'viem'\n * const data = fromBytes(new Uint8Array([1, 164]), 'number')\n * // 420\n *\n * @example\n * import { fromBytes } from 'viem'\n * const data = fromBytes(\n *   new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]),\n *   'string'\n * )\n * // 'Hello world'\n */\nexport function fromBytes<\n  TTo extends 'string' | 'hex' | 'bigint' | 'number' | 'boolean',\n>(\n  bytes: ByteArray,\n  toOrOpts: FromBytesParameters<TTo>,\n): FromBytesReturnType<TTo> {\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\n  const to = opts.to\n\n  if (to === 'number')\n    return bytesToNumber(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'bigint')\n    return bytesToBigInt(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'boolean')\n    return bytesToBool(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'string')\n    return bytesToString(bytes, opts) as FromBytesReturnType<TTo>\n  return bytesToHex(bytes, opts) as FromBytesReturnType<TTo>\n}\n\nexport type BytesToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean | undefined\n  /** Size of the bytes. */\n  size?: number | undefined\n}\n\nexport type BytesToBigIntErrorType =\n  | BytesToHexErrorType\n  | HexToBigIntErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobigint\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { bytesToBigInt } from 'viem'\n * const data = bytesToBigInt(new Uint8Array([1, 164]))\n * // 420n\n */\nexport function bytesToBigInt(\n  bytes: ByteArray,\n  opts: BytesToBigIntOpts = {},\n): bigint {\n  if (typeof opts.size !== 'undefined') assertSize(bytes, { size: opts.size })\n  const hex = bytesToHex(bytes, opts)\n  return hexToBigInt(hex, opts)\n}\n\nexport type BytesToBoolOpts = {\n  /** Size of the bytes. */\n  size?: number | undefined\n}\n\nexport type BytesToBoolErrorType =\n  | AssertSizeErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobool\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { bytesToBool } from 'viem'\n * const data = bytesToBool(new Uint8Array([1]))\n * // true\n */\nexport function bytesToBool(\n  bytes_: ByteArray,\n  opts: BytesToBoolOpts = {},\n): boolean {\n  let bytes = bytes_\n  if (typeof opts.size !== 'undefined') {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes)\n  }\n  if (bytes.length > 1 || bytes[0] > 1)\n    throw new InvalidBytesBooleanError(bytes)\n  return Boolean(bytes[0])\n}\n\nexport type BytesToNumberOpts = BytesToBigIntOpts\n\nexport type BytesToNumberErrorType =\n  | BytesToHexErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestonumber\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { bytesToNumber } from 'viem'\n * const data = bytesToNumber(new Uint8Array([1, 164]))\n * // 420\n */\nexport function bytesToNumber(\n  bytes: ByteArray,\n  opts: BytesToNumberOpts = {},\n): number {\n  if (typeof opts.size !== 'undefined') assertSize(bytes, { size: opts.size })\n  const hex = bytesToHex(bytes, opts)\n  return hexToNumber(hex, opts)\n}\n\nexport type BytesToStringOpts = {\n  /** Size of the bytes. */\n  size?: number | undefined\n}\n\nexport type BytesToStringErrorType =\n  | AssertSizeErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestostring\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { bytesToString } from 'viem'\n * const data = bytesToString(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // 'Hello world'\n */\nexport function bytesToString(\n  bytes_: ByteArray,\n  opts: BytesToStringOpts = {},\n): string {\n  let bytes = bytes_\n  if (typeof opts.size !== 'undefined') {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes, { dir: 'right' })\n  }\n  return new TextDecoder().decode(bytes)\n}\n","import type { AbiParameter, AbiParametersToPrimitiveTypes } from 'abitype'\n\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport {\n  AbiDecodingDataSizeTooSmallError,\n  AbiDecodingZeroDataError,\n  InvalidAbiDecodingTypeError,\n  type InvalidAbiDecodingTypeErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type ChecksumAddressErrorType,\n  checksumAddress,\n} from '../address/getAddress.js'\nimport { type Cursor, createCursor } from '../cursor.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type SliceBytesErrorType, sliceBytes } from '../data/slice.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\nimport {\n  type BytesToBigIntErrorType,\n  type BytesToBoolErrorType,\n  type BytesToNumberErrorType,\n  type BytesToStringErrorType,\n  bytesToBigInt,\n  bytesToBool,\n  bytesToNumber,\n  bytesToString,\n} from '../encoding/fromBytes.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { getArrayComponents } from './encodeAbiParameters.js'\n\nexport type DecodeAbiParametersReturnType<\n  TParams extends readonly AbiParameter[] = readonly AbiParameter[],\n> = AbiParametersToPrimitiveTypes<\n  TParams extends readonly AbiParameter[] ? TParams : AbiParameter[]\n>\n\nexport type DecodeAbiParametersErrorType =\n  | HexToBytesErrorType\n  | BytesToHexErrorType\n  | DecodeParameterErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function decodeAbiParameters<\n  const TParams extends readonly AbiParameter[],\n>(\n  params: TParams,\n  data: ByteArray | Hex,\n): DecodeAbiParametersReturnType<TParams> {\n  const bytes = typeof data === 'string' ? hexToBytes(data) : data\n  const cursor = createCursor(bytes)\n\n  if (size(bytes) === 0 && params.length > 0)\n    throw new AbiDecodingZeroDataError()\n  if (size(data) && size(data) < 32)\n    throw new AbiDecodingDataSizeTooSmallError({\n      data: typeof data === 'string' ? data : bytesToHex(data),\n      params: params as readonly AbiParameter[],\n      size: size(data),\n    })\n\n  let consumed = 0\n  const values = []\n  for (let i = 0; i < params.length; ++i) {\n    const param = params[i]\n    cursor.setPosition(consumed)\n    const [data, consumed_] = decodeParameter(cursor, param, {\n      staticPosition: 0,\n    })\n    consumed += consumed_\n    values.push(data)\n  }\n  return values as DecodeAbiParametersReturnType<TParams>\n}\n\ntype DecodeParameterErrorType =\n  | DecodeArrayErrorType\n  | DecodeTupleErrorType\n  | DecodeAddressErrorType\n  | DecodeBoolErrorType\n  | DecodeBytesErrorType\n  | DecodeNumberErrorType\n  | DecodeStringErrorType\n  | InvalidAbiDecodingTypeErrorType\n\nfunction decodeParameter(\n  cursor: Cursor,\n  param: AbiParameter,\n  { staticPosition }: { staticPosition: number },\n) {\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return decodeArray(cursor, { ...param, type }, { length, staticPosition })\n  }\n  if (param.type === 'tuple')\n    return decodeTuple(cursor, param as TupleAbiParameter, { staticPosition })\n\n  if (param.type === 'address') return decodeAddress(cursor)\n  if (param.type === 'bool') return decodeBool(cursor)\n  if (param.type.startsWith('bytes'))\n    return decodeBytes(cursor, param, { staticPosition })\n  if (param.type.startsWith('uint') || param.type.startsWith('int'))\n    return decodeNumber(cursor, param)\n  if (param.type === 'string') return decodeString(cursor, { staticPosition })\n  throw new InvalidAbiDecodingTypeError(param.type, {\n    docsPath: '/docs/contract/decodeAbiParameters',\n  })\n}\n\n////////////////////////////////////////////////////////////////////\n// Type Decoders\n\nconst sizeOfLength = 32\nconst sizeOfOffset = 32\n\ntype DecodeAddressErrorType =\n  | ChecksumAddressErrorType\n  | BytesToHexErrorType\n  | SliceBytesErrorType\n  | ErrorType\n\nfunction decodeAddress(cursor: Cursor) {\n  const value = cursor.readBytes(32)\n  return [checksumAddress(bytesToHex(sliceBytes(value, -20))), 32]\n}\n\ntype DecodeArrayErrorType = BytesToNumberErrorType | ErrorType\n\nfunction decodeArray(\n  cursor: Cursor,\n  param: AbiParameter,\n  { length, staticPosition }: { length: number | null; staticPosition: number },\n) {\n  // If the length of the array is not known in advance (dynamic array),\n  // this means we will need to wonder off to the pointer and decode.\n  if (!length) {\n    // Dealing with a dynamic type, so get the offset of the array data.\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset))\n\n    // Start is the static position of current slot + offset.\n    const start = staticPosition + offset\n    const startOfData = start + sizeOfLength\n\n    // Get the length of the array from the offset.\n    cursor.setPosition(start)\n    const length = bytesToNumber(cursor.readBytes(sizeOfLength))\n\n    // Check if the array has any dynamic children.\n    const dynamicChild = hasDynamicChild(param)\n\n    let consumed = 0\n    const value: unknown[] = []\n    for (let i = 0; i < length; ++i) {\n      // If any of the children is dynamic, then all elements will be offset pointer, thus size of one slot (32 bytes).\n      // Otherwise, elements will be the size of their encoding (consumed bytes).\n      cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed))\n      const [data, consumed_] = decodeParameter(cursor, param, {\n        staticPosition: startOfData,\n      })\n      consumed += consumed_\n      value.push(data)\n    }\n\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32)\n    return [value, 32]\n  }\n\n  // If the length of the array is known in advance,\n  // and the length of an element deeply nested in the array is not known,\n  // we need to decode the offset of the array data.\n  if (hasDynamicChild(param)) {\n    // Dealing with dynamic types, so get the offset of the array data.\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset))\n\n    // Start is the static position of current slot + offset.\n    const start = staticPosition + offset\n\n    const value: unknown[] = []\n    for (let i = 0; i < length; ++i) {\n      // Move cursor along to the next slot (next offset pointer).\n      cursor.setPosition(start + i * 32)\n      const [data] = decodeParameter(cursor, param, {\n        staticPosition: start,\n      })\n      value.push(data)\n    }\n\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32)\n    return [value, 32]\n  }\n\n  // If the length of the array is known in advance and the array is deeply static,\n  // then we can just decode each element in sequence.\n  let consumed = 0\n  const value: unknown[] = []\n  for (let i = 0; i < length; ++i) {\n    const [data, consumed_] = decodeParameter(cursor, param, {\n      staticPosition: staticPosition + consumed,\n    })\n    consumed += consumed_\n    value.push(data)\n  }\n  return [value, consumed]\n}\n\ntype DecodeBoolErrorType = BytesToBoolErrorType | ErrorType\n\nfunction decodeBool(cursor: Cursor) {\n  return [bytesToBool(cursor.readBytes(32), { size: 32 }), 32]\n}\n\ntype DecodeBytesErrorType =\n  | BytesToNumberErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\nfunction decodeBytes(\n  cursor: Cursor,\n  param: AbiParameter,\n  { staticPosition }: { staticPosition: number },\n) {\n  const [_, size] = param.type.split('bytes')\n  if (!size) {\n    // Dealing with dynamic types, so get the offset of the bytes data.\n    const offset = bytesToNumber(cursor.readBytes(32))\n\n    // Set position of the cursor to start of bytes data.\n    cursor.setPosition(staticPosition + offset)\n\n    const length = bytesToNumber(cursor.readBytes(32))\n\n    // If there is no length, we have zero data.\n    if (length === 0) {\n      // As we have gone wondering, restore to the original position + next slot.\n      cursor.setPosition(staticPosition + 32)\n      return ['0x', 32]\n    }\n\n    const data = cursor.readBytes(length)\n\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32)\n    return [bytesToHex(data), 32]\n  }\n\n  const value = bytesToHex(cursor.readBytes(Number.parseInt(size), 32))\n  return [value, 32]\n}\n\ntype DecodeNumberErrorType =\n  | BytesToNumberErrorType\n  | BytesToBigIntErrorType\n  | ErrorType\n\nfunction decodeNumber(cursor: Cursor, param: AbiParameter) {\n  const signed = param.type.startsWith('int')\n  const size = Number.parseInt(param.type.split('int')[1] || '256')\n  const value = cursor.readBytes(32)\n  return [\n    size > 48\n      ? bytesToBigInt(value, { signed })\n      : bytesToNumber(value, { signed }),\n    32,\n  ]\n}\n\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\n\ntype DecodeTupleErrorType = BytesToNumberErrorType | ErrorType\n\nfunction decodeTuple(\n  cursor: Cursor,\n  param: TupleAbiParameter,\n  { staticPosition }: { staticPosition: number },\n) {\n  // Tuples can have unnamed components (i.e. they are arrays), so we must\n  // determine whether the tuple is named or unnamed. In the case of a named\n  // tuple, the value will be an object where each property is the name of the\n  // component. In the case of an unnamed tuple, the value will be an array.\n  const hasUnnamedChild =\n    param.components.length === 0 || param.components.some(({ name }) => !name)\n\n  // Initialize the value to an object or an array, depending on whether the\n  // tuple is named or unnamed.\n  const value: any = hasUnnamedChild ? [] : {}\n  let consumed = 0\n\n  // If the tuple has a dynamic child, we must first decode the offset to the\n  // tuple data.\n  if (hasDynamicChild(param)) {\n    // Dealing with dynamic types, so get the offset of the tuple data.\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset))\n\n    // Start is the static position of referencing slot + offset.\n    const start = staticPosition + offset\n\n    for (let i = 0; i < param.components.length; ++i) {\n      const component = param.components[i]\n      cursor.setPosition(start + consumed)\n      const [data, consumed_] = decodeParameter(cursor, component, {\n        staticPosition: start,\n      })\n      consumed += consumed_\n      value[hasUnnamedChild ? i : component?.name!] = data\n    }\n\n    // As we have gone wondering, restore to the original position + next slot.\n    cursor.setPosition(staticPosition + 32)\n    return [value, 32]\n  }\n\n  // If the tuple has static children, we can just decode each component\n  // in sequence.\n  for (let i = 0; i < param.components.length; ++i) {\n    const component = param.components[i]\n    const [data, consumed_] = decodeParameter(cursor, component, {\n      staticPosition,\n    })\n    value[hasUnnamedChild ? i : component?.name!] = data\n    consumed += consumed_\n  }\n  return [value, consumed]\n}\n\ntype DecodeStringErrorType =\n  | BytesToNumberErrorType\n  | BytesToStringErrorType\n  | TrimErrorType\n  | ErrorType\n\nfunction decodeString(\n  cursor: Cursor,\n  { staticPosition }: { staticPosition: number },\n) {\n  // Get offset to start of string data.\n  const offset = bytesToNumber(cursor.readBytes(32))\n\n  // Start is the static position of current slot + offset.\n  const start = staticPosition + offset\n  cursor.setPosition(start)\n\n  const length = bytesToNumber(cursor.readBytes(32))\n\n  // If there is no length, we have zero data (empty string).\n  if (length === 0) {\n    cursor.setPosition(staticPosition + 32)\n    return ['', 32]\n  }\n\n  const data = cursor.readBytes(length, 32)\n  const value = bytesToString(trim(data))\n\n  // As we have gone wondering, restore to the original position + next slot.\n  cursor.setPosition(staticPosition + 32)\n\n  return [value, 32]\n}\n\nfunction hasDynamicChild(param: AbiParameter) {\n  const { type } = param\n  if (type === 'string') return true\n  if (type === 'bytes') return true\n  if (type.endsWith('[]')) return true\n\n  if (type === 'tuple') return (param as any).components?.some(hasDynamicChild)\n\n  const arrayComponents = getArrayComponents(param.type)\n  if (\n    arrayComponents &&\n    hasDynamicChild({ ...param, type: arrayComponents[1] } as AbiParameter)\n  )\n    return true\n\n  return false\n}\n","import type { ErrorType } from '../errors/utils.js'\n\nexport type StringifyErrorType = ErrorType\n\nexport const stringify: typeof JSON.stringify = (value, replacer, space) =>\n  JSON.stringify(\n    value,\n    (key, value_) => {\n      const value = typeof value_ === 'bigint' ? value_.toString() : value_\n      return typeof replacer === 'function' ? replacer(key, value) : value\n    },\n    space,\n  )\n","import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../errors/address.js'\nimport {\n  InvalidBytesLengthError,\n  type InvalidBytesLengthErrorType,\n} from '../errors/data.js'\nimport {\n  AccountStateConflictError,\n  type AccountStateConflictErrorType,\n  StateAssignmentConflictError,\n  type StateAssignmentConflictErrorType,\n} from '../errors/stateOverride.js'\nimport type {\n  RpcAccountStateOverride,\n  RpcStateMapping,\n  RpcStateOverride,\n} from '../types/rpc.js'\nimport type { StateMapping, StateOverride } from '../types/stateOverride.js'\nimport { isAddress } from './address/isAddress.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\n\nexport type SerializeStateMappingParameters = StateMapping | undefined\n\nexport type SerializeStateMappingErrorType = InvalidBytesLengthErrorType\n\nexport function serializeStateMapping(\n  stateMapping: SerializeStateMappingParameters,\n): RpcStateMapping | undefined {\n  if (!stateMapping || stateMapping.length === 0) return undefined\n  return stateMapping.reduce((acc, { slot, value }) => {\n    if (slot.length !== 66)\n      throw new InvalidBytesLengthError({\n        size: slot.length,\n        targetSize: 66,\n        type: 'hex',\n      })\n    if (value.length !== 66)\n      throw new InvalidBytesLengthError({\n        size: value.length,\n        targetSize: 66,\n        type: 'hex',\n      })\n    acc[slot] = value\n    return acc\n  }, {} as RpcStateMapping)\n}\n\nexport type SerializeAccountStateOverrideParameters = Omit<\n  StateOverride[number],\n  'address'\n>\n\nexport type SerializeAccountStateOverrideErrorType =\n  | NumberToHexErrorType\n  | StateAssignmentConflictErrorType\n  | SerializeStateMappingErrorType\n\nexport function serializeAccountStateOverride(\n  parameters: SerializeAccountStateOverrideParameters,\n): RpcAccountStateOverride {\n  const { balance, nonce, state, stateDiff, code } = parameters\n  const rpcAccountStateOverride: RpcAccountStateOverride = {}\n  if (code !== undefined) rpcAccountStateOverride.code = code\n  if (balance !== undefined)\n    rpcAccountStateOverride.balance = numberToHex(balance)\n  if (nonce !== undefined) rpcAccountStateOverride.nonce = numberToHex(nonce)\n  if (state !== undefined)\n    rpcAccountStateOverride.state = serializeStateMapping(state)\n  if (stateDiff !== undefined) {\n    if (rpcAccountStateOverride.state) throw new StateAssignmentConflictError()\n    rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff)\n  }\n  return rpcAccountStateOverride\n}\n\nexport type SerializeStateOverrideParameters = StateOverride | undefined\n\nexport type SerializeStateOverrideErrorType =\n  | InvalidAddressErrorType\n  | AccountStateConflictErrorType\n  | SerializeAccountStateOverrideErrorType\n\nexport function serializeStateOverride(\n  parameters?: SerializeStateOverrideParameters,\n): RpcStateOverride | undefined {\n  if (!parameters) return undefined\n  const rpcStateOverride: RpcStateOverride = {}\n  for (const { address, ...accountState } of parameters) {\n    if (!isAddress(address, { strict: false }))\n      throw new InvalidAddressError({ address })\n    if (rpcStateOverride[address])\n      throw new AccountStateConflictError({ address: address })\n    rpcStateOverride[address] = serializeAccountStateOverride(accountState)\n  }\n  return rpcStateOverride\n}\n","import type { AbiFunction } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type ToSignatureHashErrorType,\n  toSignatureHash,\n} from './toSignatureHash.js'\n\nexport type ToFunctionSelectorErrorType =\n  | ToSignatureHashErrorType\n  | SliceErrorType\n  | ErrorType\n\n/**\n * Returns the function selector for a given function definition.\n *\n * @example\n * const selector = toFunctionSelector('function ownerOf(uint256 tokenId)')\n * // 0x6352211e\n */\nexport const toFunctionSelector = (fn: string | AbiFunction) =>\n  slice(toSignatureHash(fn), 0, 4)\n","import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../types.js'\n\nexport type ParseAccountErrorType = ErrorType\n\nexport function parseAccount(account: Address | Account): Account {\n  if (typeof account === 'string') return { address: account, type: 'json-rpc' }\n  return account\n}\n","import type { Abi, ExtractAbiError } from 'abitype'\n\nimport { solidityError, solidityPanic } from '../../constants/solidity.js'\nimport {\n  AbiDecodingZeroDataError,\n  type AbiDecodingZeroDataErrorType,\n  AbiErrorSignatureNotFoundError,\n  type AbiErrorSignatureNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AbiItem,\n  ContractErrorArgs,\n  ContractErrorName,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport { slice } from '../data/slice.js'\nimport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n} from '../hash/toFunctionSelector.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\n\nexport type DecodeErrorResultParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n> = { abi?: abi | undefined; data: Hex }\n\nexport type DecodeErrorResultReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  ///\n  allErrorNames extends ContractErrorName<abi> = ContractErrorName<abi>,\n> = IsNarrowable<abi, Abi> extends true\n  ? UnionEvaluate<\n      {\n        [errorName in allErrorNames]: {\n          abiItem: abi extends Abi\n            ? Abi extends abi\n              ? AbiItem\n              : ExtractAbiError<abi, errorName>\n            : AbiItem\n          args: ContractErrorArgs<abi, errorName>\n          errorName: errorName\n        }\n      }[allErrorNames]\n    >\n  : {\n      abiItem: AbiItem\n      args: readonly unknown[] | undefined\n      errorName: string\n    }\n\nexport type DecodeErrorResultErrorType =\n  | AbiDecodingZeroDataErrorType\n  | AbiErrorSignatureNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport function decodeErrorResult<const TAbi extends Abi | readonly unknown[]>(\n  parameters: DecodeErrorResultParameters<TAbi>,\n): DecodeErrorResultReturnType<TAbi> {\n  const { abi, data } = parameters as DecodeErrorResultParameters\n\n  const signature = slice(data, 0, 4)\n  if (signature === '0x') throw new AbiDecodingZeroDataError()\n\n  const abi_ = [...(abi || []), solidityError, solidityPanic]\n  const abiItem = abi_.find(\n    (x) =>\n      x.type === 'error' && signature === toFunctionSelector(formatAbiItem(x)),\n  )\n  if (!abiItem)\n    throw new AbiErrorSignatureNotFoundError(signature, {\n      docsPath: '/docs/contract/decodeErrorResult',\n    })\n  return {\n    abiItem,\n    args:\n      'inputs' in abiItem && abiItem.inputs && abiItem.inputs.length > 0\n        ? decodeAbiParameters(abiItem.inputs, slice(data, 4))\n        : undefined,\n    errorName: (abiItem as { name: string }).name,\n  } as DecodeErrorResultReturnType<TAbi>\n}\n","import { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type Keccak256ErrorType, keccak256 } from './keccak256.js'\n\nconst hash = (value: string) => keccak256(toBytes(value))\n\nexport type HashSignatureErrorType =\n  | Keccak256ErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashSignature(sig: string) {\n  return hash(sig)\n}\n","// TODO: This looks cool. Need to check the performance of `new RegExp` versus defined inline though.\n// https://twitter.com/GabrielVergnaud/status/1622906834343366657\nexport function execTyped<T>(regex: RegExp, string: string) {\n  const match = regex.exec(string)\n  return match?.groups as T | undefined\n}\n\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\n\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex =\n  /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\n\nexport const isTupleRegex = /^\\(.+?\\).*?$/\n","import type { AbiEventParameter, AbiParameter } from '../abi.js'\nimport { execTyped } from '../regex.js'\nimport type { IsNarrowable, Join } from '../types.js'\nimport type { AssertName } from './types/signatures.js'\n\n/**\n * Formats {@link AbiParameter} to human-readable ABI parameter.\n *\n * @param TAbiParameter - ABI parameter\n * @returns Human-readable ABI parameter\n *\n * @example\n * type Result = FormatAbiParameter<{ type: 'address'; name: 'from'; }>\n * //   ^? type Result = 'address from'\n */\nexport type FormatAbiParameter<\n  TAbiParameter extends AbiParameter | AbiEventParameter,\n> = TAbiParameter extends {\n  name?: infer Name extends string\n  type: `tuple${infer Array}`\n  components: infer Components extends readonly AbiParameter[]\n  indexed?: infer Indexed extends boolean\n}\n  ? FormatAbiParameter<\n      {\n        type: `(${Join<\n          {\n            [K in keyof Components]: FormatAbiParameter<\n              {\n                type: Components[K]['type']\n              } & (IsNarrowable<Components[K]['name'], string> extends true\n                ? { name: Components[K]['name'] }\n                : unknown) &\n                (Components[K] extends { components: readonly AbiParameter[] }\n                  ? { components: Components[K]['components'] }\n                  : unknown)\n            >\n          },\n          ', '\n        >})${Array}`\n      } & (IsNarrowable<Name, string> extends true ? { name: Name } : unknown) &\n        (IsNarrowable<Indexed, boolean> extends true\n          ? { indexed: Indexed }\n          : unknown)\n    >\n  : `${TAbiParameter['type']}${TAbiParameter extends { indexed: true }\n      ? ' indexed'\n      : ''}${TAbiParameter['name'] extends infer Name extends string\n      ? Name extends ''\n        ? ''\n        : ` ${AssertName<Name>}`\n      : ''}`\n\n// https://regexr.com/7f7rv\nconst tupleRegex = /^tuple(?<array>(\\[(\\d*)\\])*)$/\n\n/**\n * Formats {@link AbiParameter} to human-readable ABI parameter.\n *\n * @param abiParameter - ABI parameter\n * @returns Human-readable ABI parameter\n *\n * @example\n * const result = formatAbiParameter({ type: 'address', name: 'from' })\n * //    ^? const result: 'address from'\n */\nexport function formatAbiParameter<\n  const TAbiParameter extends AbiParameter | AbiEventParameter,\n>(abiParameter: TAbiParameter): FormatAbiParameter<TAbiParameter> {\n  type Result = FormatAbiParameter<TAbiParameter>\n\n  let type = abiParameter.type\n  if (tupleRegex.test(abiParameter.type) && 'components' in abiParameter) {\n    type = '('\n    const length = abiParameter.components.length as number\n    for (let i = 0; i < length; i++) {\n      const component = abiParameter.components[i]!\n      type += formatAbiParameter(component)\n      if (i < length - 1) type += ', '\n    }\n    const result = execTyped<{ array?: string }>(tupleRegex, abiParameter.type)\n    type += `)${result?.array ?? ''}`\n    return formatAbiParameter({\n      ...abiParameter,\n      type,\n    }) as Result\n  }\n  // Add `indexed` to type if in `abiParameter`\n  if ('indexed' in abiParameter && abiParameter.indexed)\n    type = `${type} indexed`\n  // Return human-readable ABI parameter\n  if (abiParameter.name) return `${type} ${abiParameter.name}` as Result\n  return type as Result\n}\n","import type { AbiEventParameter, AbiParameter } from '../abi.js'\nimport type { Join } from '../types.js'\nimport {\n  type FormatAbiParameter,\n  formatAbiParameter,\n} from './formatAbiParameter.js'\n\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameter.\n *\n * @param TAbiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * type Result = FormatAbiParameters<[\n *   // ^? type Result = 'address from, uint256 tokenId'\n *   { type: 'address'; name: 'from'; },\n *   { type: 'uint256'; name: 'tokenId'; },\n * ]>\n */\nexport type FormatAbiParameters<\n  TAbiParameters extends readonly [\n    AbiParameter | AbiEventParameter,\n    ...(readonly (AbiParameter | AbiEventParameter)[]),\n  ],\n> = Join<\n  {\n    [K in keyof TAbiParameters]: FormatAbiParameter<TAbiParameters[K]>\n  },\n  ', '\n>\n\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameters.\n *\n * @param abiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * const result = formatAbiParameters([\n *   //  ^? const result: 'address from, uint256 tokenId'\n *   { type: 'address', name: 'from' },\n *   { type: 'uint256', name: 'tokenId' },\n * ])\n */\nexport function formatAbiParameters<\n  const TAbiParameters extends readonly [\n    AbiParameter | AbiEventParameter,\n    ...(readonly (AbiParameter | AbiEventParameter)[]),\n  ],\n>(abiParameters: TAbiParameters): FormatAbiParameters<TAbiParameters> {\n  let params = ''\n  const length = abiParameters.length\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i]!\n    params += formatAbiParameter(abiParameter)\n    if (i !== length - 1) params += ', '\n  }\n  return params as FormatAbiParameters<TAbiParameters>\n}\n","import { type AbiEvent, type AbiFunction, formatAbiItem } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type NormalizeSignatureErrorType,\n  normalizeSignature,\n} from './normalizeSignature.js'\n\nexport type ToSignatureErrorType = NormalizeSignatureErrorType | ErrorType\n\n/**\n * Returns the signature for a given function or event definition.\n *\n * @example\n * const signature = toSignature('function ownerOf(uint256 tokenId)')\n * // 'ownerOf(uint256)'\n *\n * @example\n * const signature_3 = toSignature({\n *   name: 'ownerOf',\n *   type: 'function',\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\n *   outputs: [],\n *   stateMutability: 'view',\n * })\n * // 'ownerOf(uint256)'\n */\nexport const toSignature = (def: string | AbiFunction | AbiEvent) => {\n  const def_ = (() => {\n    if (typeof def === 'string') return def\n    return formatAbiItem(def)\n  })()\n  return normalizeSignature(def_)\n}\n","import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nexport type NormalizeSignatureParameters = string\nexport type NormalizeSignatureReturnType = string\nexport type NormalizeSignatureErrorType = ErrorType\n\nexport function normalizeSignature(\n  signature: NormalizeSignatureParameters,\n): NormalizeSignatureReturnType {\n  let active = true\n  let current = ''\n  let level = 0\n  let result = ''\n  let valid = false\n\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i]\n\n    // If the character is a separator, we want to reactivate.\n    if (['(', ')', ','].includes(char)) active = true\n\n    // If the character is a \"level\" token, we want to increment/decrement.\n    if (char === '(') level++\n    if (char === ')') level--\n\n    // If we aren't active, we don't want to mutate the result.\n    if (!active) continue\n\n    // If level === 0, we are at the definition level.\n    if (level === 0) {\n      if (char === ' ' && ['event', 'function', ''].includes(result))\n        result = ''\n      else {\n        result += char\n\n        // If we are at the end of the definition, we must be finished.\n        if (char === ')') {\n          valid = true\n          break\n        }\n      }\n\n      continue\n    }\n\n    // Ignore spaces\n    if (char === ' ') {\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n        current = ''\n        active = false\n      }\n      continue\n    }\n\n    result += char\n    current += char\n  }\n\n  if (!valid) throw new BaseError('Unable to normalize signature.')\n\n  return result\n}\n","import type {\n  Abi,\n  AbiConstructor,\n  AbiError,\n  AbiEvent,\n  AbiEventParameter,\n  AbiFallback,\n  AbiFunction,\n  AbiParameter,\n  AbiReceive,\n  AbiStateMutability,\n} from '../abi.js'\nimport {\n  type FormatAbiParameters as FormatAbiParameters_,\n  formatAbiParameters,\n} from './formatAbiParameters.js'\nimport type { AssertName } from './types/signatures.js'\n\n/**\n * Formats ABI item (e.g. error, event, function) into human-readable ABI item\n *\n * @param TAbiItem - ABI item\n * @returns Human-readable ABI item\n */\nexport type FormatAbiItem<TAbiItem extends Abi[number]> =\n  Abi[number] extends TAbiItem\n    ? string\n    :\n        | (TAbiItem extends AbiFunction\n            ? AbiFunction extends TAbiItem\n              ? string\n              : `function ${AssertName<TAbiItem['name']>}(${FormatAbiParameters<\n                  TAbiItem['inputs']\n                >})${TAbiItem['stateMutability'] extends Exclude<\n                  AbiStateMutability,\n                  'nonpayable'\n                >\n                  ? ` ${TAbiItem['stateMutability']}`\n                  : ''}${TAbiItem['outputs']['length'] extends 0\n                  ? ''\n                  : ` returns (${FormatAbiParameters<TAbiItem['outputs']>})`}`\n            : never)\n        | (TAbiItem extends AbiEvent\n            ? AbiEvent extends TAbiItem\n              ? string\n              : `event ${AssertName<TAbiItem['name']>}(${FormatAbiParameters<\n                  TAbiItem['inputs']\n                >})`\n            : never)\n        | (TAbiItem extends AbiError\n            ? AbiError extends TAbiItem\n              ? string\n              : `error ${AssertName<TAbiItem['name']>}(${FormatAbiParameters<\n                  TAbiItem['inputs']\n                >})`\n            : never)\n        | (TAbiItem extends AbiConstructor\n            ? AbiConstructor extends TAbiItem\n              ? string\n              : `constructor(${FormatAbiParameters<\n                  TAbiItem['inputs']\n                >})${TAbiItem['stateMutability'] extends 'payable'\n                  ? ' payable'\n                  : ''}`\n            : never)\n        | (TAbiItem extends AbiFallback\n            ? AbiFallback extends TAbiItem\n              ? string\n              : 'fallback()'\n            : never)\n        | (TAbiItem extends AbiReceive\n            ? AbiReceive extends TAbiItem\n              ? string\n              : 'receive() external payable'\n            : never)\n\ntype FormatAbiParameters<\n  TAbiParameters extends readonly (AbiParameter | AbiEventParameter)[],\n> = TAbiParameters['length'] extends 0\n  ? ''\n  : FormatAbiParameters_<\n      TAbiParameters extends readonly [\n        AbiParameter | AbiEventParameter,\n        ...(readonly (AbiParameter | AbiEventParameter)[]),\n      ]\n        ? TAbiParameters\n        : never\n    >\n\n/**\n * Formats ABI item (e.g. error, event, function) into human-readable ABI item\n *\n * @param abiItem - ABI item\n * @returns Human-readable ABI item\n */\nexport function formatAbiItem<const TAbiItem extends Abi[number]>(\n  abiItem: TAbiItem,\n): FormatAbiItem<TAbiItem> {\n  type Result = FormatAbiItem<TAbiItem>\n  type Params = readonly [\n    AbiParameter | AbiEventParameter,\n    ...(readonly (AbiParameter | AbiEventParameter)[]),\n  ]\n\n  if (abiItem.type === 'function')\n    return `function ${abiItem.name}(${formatAbiParameters(\n      abiItem.inputs as Params,\n    )})${\n      abiItem.stateMutability && abiItem.stateMutability !== 'nonpayable'\n        ? ` ${abiItem.stateMutability}`\n        : ''\n    }${\n      abiItem.outputs.length\n        ? ` returns (${formatAbiParameters(abiItem.outputs as Params)})`\n        : ''\n    }`\n  else if (abiItem.type === 'event')\n    return `event ${abiItem.name}(${formatAbiParameters(\n      abiItem.inputs as Params,\n    )})`\n  else if (abiItem.type === 'error')\n    return `error ${abiItem.name}(${formatAbiParameters(\n      abiItem.inputs as Params,\n    )})`\n  else if (abiItem.type === 'constructor')\n    return `constructor(${formatAbiParameters(abiItem.inputs as Params)})${\n      abiItem.stateMutability === 'payable' ? ' payable' : ''\n    }`\n  else if (abiItem.type === 'fallback') return 'fallback()' as Result\n  return 'receive() external payable' as Result\n}\n","import type { AbiEvent, AbiFunction } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type HashSignatureErrorType, hashSignature } from './hashSignature.js'\nimport { type ToSignatureErrorType, toSignature } from './toSignature.js'\n\nexport type ToSignatureHashErrorType =\n  | HashSignatureErrorType\n  | ToSignatureErrorType\n  | ErrorType\n\n/**\n * Returns the hash (of the function/event signature) for a given event or function definition.\n */\nexport function toSignatureHash(fn: string | AbiFunction | AbiEvent) {\n  return hashSignature(toSignature(fn))\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\ntype Resolved<TReturnType extends readonly unknown[] = any> = [\n  result: TReturnType[number],\n  results: TReturnType,\n]\n\ntype PendingPromise<TReturnType extends readonly unknown[] = any> = {\n  resolve?: ((data: Resolved<TReturnType>) => void) | undefined\n  reject?: ((reason?: unknown) => void) | undefined\n}\n\ntype SchedulerItem = { args: unknown; pendingPromise: PendingPromise }\n\ntype BatchResultsCompareFn<TResult = unknown> = (\n  a: TResult,\n  b: TResult,\n) => number\n\nexport type CreateBatchSchedulerArguments<\n  TParameters = unknown,\n  TReturnType extends readonly unknown[] = readonly unknown[],\n> = {\n  fn: (args: TParameters[]) => Promise<TReturnType>\n  id: number | string\n  shouldSplitBatch?: ((args: TParameters[]) => boolean) | undefined\n  wait?: number | undefined\n  sort?: BatchResultsCompareFn<TReturnType[number]> | undefined\n}\n\nexport type CreateBatchSchedulerReturnType<\n  TParameters = unknown,\n  TReturnType extends readonly unknown[] = readonly unknown[],\n> = {\n  flush: () => void\n  schedule: TParameters extends undefined\n    ? (args?: TParameters | undefined) => Promise<Resolved<TReturnType>>\n    : (args: TParameters) => Promise<Resolved<TReturnType>>\n}\n\nexport type CreateBatchSchedulerErrorType = ErrorType\n\nconst schedulerCache = /*#__PURE__*/ new Map<number | string, SchedulerItem[]>()\n\nexport function createBatchScheduler<\n  TParameters,\n  TReturnType extends readonly unknown[],\n>({\n  fn,\n  id,\n  shouldSplitBatch,\n  wait = 0,\n  sort,\n}: CreateBatchSchedulerArguments<\n  TParameters,\n  TReturnType\n>): CreateBatchSchedulerReturnType<TParameters, TReturnType> {\n  const exec = async () => {\n    const scheduler = getScheduler()\n    flush()\n\n    const args = scheduler.map(({ args }) => args)\n\n    if (args.length === 0) return\n\n    fn(args as TParameters[])\n      .then((data) => {\n        if (sort && Array.isArray(data)) data.sort(sort)\n        for (let i = 0; i < scheduler.length; i++) {\n          const { pendingPromise } = scheduler[i]\n          pendingPromise.resolve?.([data[i], data])\n        }\n      })\n      .catch((err) => {\n        for (let i = 0; i < scheduler.length; i++) {\n          const { pendingPromise } = scheduler[i]\n          pendingPromise.reject?.(err)\n        }\n      })\n  }\n\n  const flush = () => schedulerCache.delete(id)\n\n  const getBatchedArgs = () =>\n    getScheduler().map(({ args }) => args) as TParameters[]\n\n  const getScheduler = () => schedulerCache.get(id) || []\n\n  const setScheduler = (item: SchedulerItem) =>\n    schedulerCache.set(id, [...getScheduler(), item])\n\n  return {\n    flush,\n    async schedule(args: TParameters) {\n      const pendingPromise: PendingPromise<TReturnType> = {}\n      const promise = new Promise<Resolved<TReturnType>>((resolve, reject) => {\n        pendingPromise.resolve = resolve\n        pendingPromise.reject = reject\n      })\n\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args])\n\n      if (split) exec()\n\n      const hasActiveScheduler = getScheduler().length > 0\n      if (hasActiveScheduler) {\n        setScheduler({ args, pendingPromise })\n        return promise\n      }\n\n      setScheduler({ args, pendingPromise })\n      setTimeout(exec, wait)\n      return promise\n    },\n  } as unknown as CreateBatchSchedulerReturnType<TParameters, TReturnType>\n}\n","import type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ExecutionRevertedError,\n  type ExecutionRevertedErrorType,\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  FeeCapTooLowError,\n  type FeeCapTooLowErrorType,\n  InsufficientFundsError,\n  type InsufficientFundsErrorType,\n  IntrinsicGasTooHighError,\n  type IntrinsicGasTooHighErrorType,\n  IntrinsicGasTooLowError,\n  type IntrinsicGasTooLowErrorType,\n  NonceMaxValueError,\n  type NonceMaxValueErrorType,\n  NonceTooHighError,\n  type NonceTooHighErrorType,\n  NonceTooLowError,\n  type NonceTooLowErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n  TransactionTypeNotSupportedError,\n  type TransactionTypeNotSupportedErrorType,\n  UnknownNodeError,\n  type UnknownNodeErrorType,\n} from '../../errors/node.js'\nimport { RpcRequestError } from '../../errors/request.js'\nimport {\n  InvalidInputRpcError,\n  TransactionRejectedRpcError,\n} from '../../errors/rpc.js'\nimport type { ExactPartial } from '../../types/utils.js'\n\nexport function containsNodeError(err: BaseError) {\n  return (\n    err instanceof TransactionRejectedRpcError ||\n    err instanceof InvalidInputRpcError ||\n    (err instanceof RpcRequestError && err.code === ExecutionRevertedError.code)\n  )\n}\n\nexport type GetNodeErrorParameters = ExactPartial<\n  SendTransactionParameters<any>\n>\n\nexport type GetNodeErrorReturnType =\n  | ExecutionRevertedErrorType\n  | FeeCapTooHighErrorType\n  | FeeCapTooLowErrorType\n  | NonceTooHighErrorType\n  | NonceTooLowErrorType\n  | NonceMaxValueErrorType\n  | InsufficientFundsErrorType\n  | IntrinsicGasTooHighErrorType\n  | IntrinsicGasTooLowErrorType\n  | TransactionTypeNotSupportedErrorType\n  | TipAboveFeeCapErrorType\n  | UnknownNodeErrorType\n\nexport function getNodeError(\n  err: BaseError,\n  args: GetNodeErrorParameters,\n): GetNodeErrorReturnType {\n  const message = (err.details || '').toLowerCase()\n\n  const executionRevertedError =\n    err instanceof BaseError\n      ? err.walk(\n          (e) => (e as { code: number }).code === ExecutionRevertedError.code,\n        )\n      : err\n  if (executionRevertedError instanceof BaseError) {\n    return new ExecutionRevertedError({\n      cause: err,\n      message: executionRevertedError.details,\n    }) as any\n  }\n  if (ExecutionRevertedError.nodeMessage.test(message))\n    return new ExecutionRevertedError({\n      cause: err,\n      message: err.details,\n    }) as any\n  if (FeeCapTooHighError.nodeMessage.test(message))\n    return new FeeCapTooHighError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n    }) as any\n  if (FeeCapTooLowError.nodeMessage.test(message))\n    return new FeeCapTooLowError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n    }) as any\n  if (NonceTooHighError.nodeMessage.test(message))\n    return new NonceTooHighError({ cause: err, nonce: args?.nonce }) as any\n  if (NonceTooLowError.nodeMessage.test(message))\n    return new NonceTooLowError({ cause: err, nonce: args?.nonce }) as any\n  if (NonceMaxValueError.nodeMessage.test(message))\n    return new NonceMaxValueError({ cause: err, nonce: args?.nonce }) as any\n  if (InsufficientFundsError.nodeMessage.test(message))\n    return new InsufficientFundsError({ cause: err }) as any\n  if (IntrinsicGasTooHighError.nodeMessage.test(message))\n    return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas }) as any\n  if (IntrinsicGasTooLowError.nodeMessage.test(message))\n    return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas }) as any\n  if (TransactionTypeNotSupportedError.nodeMessage.test(message))\n    return new TransactionTypeNotSupportedError({ cause: err }) as any\n  if (TipAboveFeeCapError.nodeMessage.test(message))\n    return new TipAboveFeeCapError({\n      cause: err,\n      maxFeePerGas: args?.maxFeePerGas,\n      maxPriorityFeePerGas: args?.maxPriorityFeePerGas,\n    }) as any\n  return new UnknownNodeError({\n    cause: err,\n  }) as any\n}\n","import type { Address } from 'abitype'\n\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { isAddress } from './isAddress.js'\n\nexport type IsAddressEqualReturnType = boolean\nexport type IsAddressEqualErrorType = InvalidAddressErrorType | ErrorType\n\nexport function isAddressEqual(a: Address, b: Address) {\n  if (!isAddress(a, { strict: false }))\n    throw new InvalidAddressError({ address: a })\n  if (!isAddress(b, { strict: false }))\n    throw new InvalidAddressError({ address: b })\n  return a.toLowerCase() === b.toLowerCase()\n}\n","import type {\n  Abi,\n  AbiStateMutability,\n  ExtractAbiFunction,\n  ExtractAbiFunctions,\n} from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport type { ConcatHexErrorType } from '../data/concat.js'\nimport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n} from '../hash/toFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/encodeFunctionData'\n\nexport type PrepareEncodeFunctionDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\n      : { functionName: functionName | allFunctionNames | Hex }\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\n> &\n  UnionEvaluate<{ args?: allArgs | undefined }> &\n  (hasFunctions extends true ? unknown : never)\n\nexport type PrepareEncodeFunctionDataReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n> = {\n  abi: abi extends Abi\n    ? functionName extends ContractFunctionName<abi>\n      ? [ExtractAbiFunction<abi, functionName>]\n      : Abi\n    : Abi\n  functionName: Hex\n}\n\nexport type PrepareEncodeFunctionDataErrorType =\n  | AbiFunctionNotFoundErrorType\n  | ConcatHexErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport function prepareEncodeFunctionData<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n>(\n  parameters: PrepareEncodeFunctionDataParameters<abi, functionName>,\n): PrepareEncodeFunctionDataReturnType<abi, functionName> {\n  const { abi, args, functionName } =\n    parameters as PrepareEncodeFunctionDataParameters\n\n  let abiItem = abi[0]\n  if (functionName) {\n    const item = getAbiItem({\n      abi,\n      args,\n      name: functionName,\n    })\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\n    abiItem = item\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\n\n  return {\n    abi: [abiItem],\n    functionName: toFunctionSelector(formatAbiItem(abiItem)),\n  } as unknown as PrepareEncodeFunctionDataReturnType<abi, functionName>\n}\n","import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\n\nimport type { AbiFunctionNotFoundErrorType } from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport type { ToFunctionSelectorErrorType } from '../hash/toFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport type { FormatAbiItemErrorType } from './formatAbiItem.js'\nimport type { GetAbiItemErrorType } from './getAbiItem.js'\nimport { prepareEncodeFunctionData } from './prepareEncodeFunctionData.js'\n\nexport type EncodeFunctionDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | Hex\n    | undefined = ContractFunctionName<abi>,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\n      : { functionName: functionName | allFunctionNames | Hex }\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\n> &\n  UnionEvaluate<\n    readonly [] extends allArgs\n      ? { args?: allArgs | undefined }\n      : { args: allArgs }\n  > &\n  (hasFunctions extends true ? unknown : never)\n\nexport type EncodeFunctionDataReturnType = Hex\n\nexport type EncodeFunctionDataErrorType =\n  | AbiFunctionNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport function encodeFunctionData<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n>(\n  parameters: EncodeFunctionDataParameters<abi, functionName>,\n): EncodeFunctionDataReturnType {\n  const { args } = parameters as EncodeFunctionDataParameters\n\n  const { abi, functionName } = (() => {\n    if (\n      parameters.abi.length === 1 &&\n      parameters.functionName?.startsWith('0x')\n    )\n      return parameters as { abi: Abi; functionName: Hex }\n    return prepareEncodeFunctionData(parameters)\n  })()\n\n  const abiItem = abi[0]\n  const signature = functionName\n\n  const data =\n    'inputs' in abiItem && abiItem.inputs\n      ? encodeAbiParameters(abiItem.inputs, args ?? [])\n      : undefined\n  return concatHex([signature, data ?? '0x'])\n}\n","import type { AbiParameter } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { AbiItem } from '../../types/contract.js'\nimport { stringify } from '../stringify.js'\n\nexport type FormatAbiItemWithArgsErrorType = ErrorType\n\nexport function formatAbiItemWithArgs({\n  abiItem,\n  args,\n  includeFunctionName = true,\n  includeName = false,\n}: {\n  abiItem: AbiItem\n  args: readonly unknown[]\n  includeFunctionName?: boolean | undefined\n  includeName?: boolean | undefined\n}) {\n  if (!('name' in abiItem)) return\n  if (!('inputs' in abiItem)) return\n  if (!abiItem.inputs) return\n  return `${includeFunctionName ? abiItem.name : ''}(${abiItem.inputs\n    .map(\n      (input: AbiParameter, i: number) =>\n        `${includeName && input.name ? `${input.name}: ` : ''}${\n          typeof args[i] === 'object' ? stringify(args[i]) : args[i]\n        }`,\n    )\n    .join(', ')})`\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { parseAccount } from '../accounts/utils/parseAccount.js'\nimport type { CallParameters } from '../actions/public/call.js'\nimport { panicReasons } from '../constants/solidity.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hex } from '../types/misc.js'\nimport {\n  type DecodeErrorResultReturnType,\n  decodeErrorResult,\n} from '../utils/abi/decodeErrorResult.js'\nimport { formatAbiItem } from '../utils/abi/formatAbiItem.js'\nimport { formatAbiItemWithArgs } from '../utils/abi/formatAbiItemWithArgs.js'\nimport { getAbiItem } from '../utils/abi/getAbiItem.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { AbiErrorSignatureNotFoundError } from './abi.js'\nimport { BaseError } from './base.js'\nimport { prettyStateOverride } from './stateOverride.js'\nimport { prettyPrint } from './transaction.js'\nimport { getContractAddress } from './utils.js'\n\nexport type CallExecutionErrorType = CallExecutionError & {\n  name: 'CallExecutionError'\n}\nexport class CallExecutionError extends BaseError {\n  override cause: BaseError\n\n  override name = 'CallExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      account: account_,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      stateOverride,\n    }: CallParameters & {\n      chain?: Chain | undefined\n      docsPath?: string | undefined\n    },\n  ) {\n    const account = account_ ? parseAccount(account_) : undefined\n    let prettyArgs = prettyPrint({\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    if (stateOverride) {\n      prettyArgs += `\\n${prettyStateOverride(stateOverride)}`\n    }\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Raw Call Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n    })\n    this.cause = cause\n  }\n}\n\nexport type ContractFunctionExecutionErrorType =\n  ContractFunctionExecutionError & {\n    name: 'ContractFunctionExecutionError'\n  }\nexport class ContractFunctionExecutionError extends BaseError {\n  abi: Abi\n  args?: unknown[] | undefined\n  override cause: BaseError\n  contractAddress?: Address | undefined\n  formattedArgs?: string | undefined\n  functionName: string\n  sender?: Address | undefined\n\n  override name = 'ContractFunctionExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      abi,\n      args,\n      contractAddress,\n      docsPath,\n      functionName,\n      sender,\n    }: {\n      abi: Abi\n      args?: any | undefined\n      contractAddress?: Address | undefined\n      docsPath?: string | undefined\n      functionName: string\n      sender?: Address | undefined\n    },\n  ) {\n    const abiItem = getAbiItem({ abi, args, name: functionName })\n    const formattedArgs = abiItem\n      ? formatAbiItemWithArgs({\n          abiItem,\n          args,\n          includeFunctionName: false,\n          includeName: false,\n        })\n      : undefined\n    const functionWithParams = abiItem\n      ? formatAbiItem(abiItem, { includeName: true })\n      : undefined\n\n    const prettyArgs = prettyPrint({\n      address: contractAddress && getContractAddress(contractAddress),\n      function: functionWithParams,\n      args:\n        formattedArgs &&\n        formattedArgs !== '()' &&\n        `${[...Array(functionName?.length ?? 0).keys()]\n          .map(() => ' ')\n          .join('')}${formattedArgs}`,\n      sender,\n    })\n\n    super(\n      cause.shortMessage ||\n        `An unknown error occurred while executing the contract function \"${functionName}\".`,\n      {\n        cause,\n        docsPath,\n        metaMessages: [\n          ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n          'Contract Call:',\n          prettyArgs,\n        ].filter(Boolean) as string[],\n      },\n    )\n    this.abi = abi\n    this.args = args\n    this.cause = cause\n    this.contractAddress = contractAddress\n    this.functionName = functionName\n    this.sender = sender\n  }\n}\n\nexport type ContractFunctionRevertedErrorType =\n  ContractFunctionRevertedError & {\n    name: 'ContractFunctionRevertedError'\n  }\nexport class ContractFunctionRevertedError extends BaseError {\n  override name = 'ContractFunctionRevertedError'\n\n  data?: DecodeErrorResultReturnType | undefined\n  reason?: string | undefined\n  signature?: Hex | undefined\n\n  constructor({\n    abi,\n    data,\n    functionName,\n    message,\n  }: {\n    abi: Abi\n    data?: Hex | undefined\n    functionName: string\n    message?: string | undefined\n  }) {\n    let cause: Error | undefined\n    let decodedData: DecodeErrorResultReturnType | undefined = undefined\n    let metaMessages: string[] | undefined\n    let reason: string | undefined\n    if (data && data !== '0x') {\n      try {\n        decodedData = decodeErrorResult({ abi, data })\n        const { abiItem, errorName, args: errorArgs } = decodedData\n        if (errorName === 'Error') {\n          reason = (errorArgs as [string])[0]\n        } else if (errorName === 'Panic') {\n          const [firstArg] = errorArgs as [number]\n          reason = panicReasons[firstArg as keyof typeof panicReasons]\n        } else {\n          const errorWithParams = abiItem\n            ? formatAbiItem(abiItem, { includeName: true })\n            : undefined\n          const formattedArgs =\n            abiItem && errorArgs\n              ? formatAbiItemWithArgs({\n                  abiItem,\n                  args: errorArgs,\n                  includeFunctionName: false,\n                  includeName: false,\n                })\n              : undefined\n\n          metaMessages = [\n            errorWithParams ? `Error: ${errorWithParams}` : '',\n            formattedArgs && formattedArgs !== '()'\n              ? `       ${[...Array(errorName?.length ?? 0).keys()]\n                  .map(() => ' ')\n                  .join('')}${formattedArgs}`\n              : '',\n          ]\n        }\n      } catch (err) {\n        cause = err as Error\n      }\n    } else if (message) reason = message\n\n    let signature: Hex | undefined\n    if (cause instanceof AbiErrorSignatureNotFoundError) {\n      signature = cause.signature\n      metaMessages = [\n        `Unable to decode signature \"${signature}\" as it was not found on the provided ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ]\n    }\n\n    super(\n      (reason && reason !== 'execution reverted') || signature\n        ? [\n            `The contract function \"${functionName}\" reverted with the following ${\n              signature ? 'signature' : 'reason'\n            }:`,\n            reason || signature,\n          ].join('\\n')\n        : `The contract function \"${functionName}\" reverted.`,\n      {\n        cause,\n        metaMessages,\n      },\n    )\n\n    this.data = decodedData\n    this.reason = reason\n    this.signature = signature\n  }\n}\n\nexport type ContractFunctionZeroDataErrorType =\n  ContractFunctionZeroDataError & {\n    name: 'ContractFunctionZeroDataError'\n  }\nexport class ContractFunctionZeroDataError extends BaseError {\n  override name = 'ContractFunctionZeroDataError'\n  constructor({ functionName }: { functionName: string }) {\n    super(`The contract function \"${functionName}\" returned no data (\"0x\").`, {\n      metaMessages: [\n        'This could be due to any of the following:',\n        `  - The contract does not have the function \"${functionName}\",`,\n        '  - The parameters passed to the contract function may be invalid, or',\n        '  - The address is not a contract.',\n      ],\n    })\n  }\n}\n\nexport type RawContractErrorType = RawContractError & {\n  name: 'RawContractError'\n}\nexport class RawContractError extends BaseError {\n  code = 3\n  override name = 'RawContractError'\n\n  data?: Hex | { data?: Hex | undefined } | undefined\n\n  constructor({\n    data,\n    message,\n  }: {\n    data?: Hex | { data?: Hex | undefined } | undefined\n    message?: string | undefined\n  }) {\n    super(message || '')\n    this.data = data\n  }\n}\n","import type { Abi, AbiEvent, AbiParameter } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js'\nimport { size } from '../utils/data/size.js'\n\nimport { BaseError } from './base.js'\n\nexport type AbiConstructorNotFoundErrorType = AbiConstructorNotFoundError & {\n  name: 'AbiConstructorNotFoundError'\n}\nexport class AbiConstructorNotFoundError extends BaseError {\n  override name = 'AbiConstructorNotFoundError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'A constructor was not found on the ABI.',\n        'Make sure you are using the correct ABI and that the constructor exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiConstructorParamsNotFoundErrorType =\n  AbiConstructorParamsNotFoundError & {\n    name: 'AbiConstructorParamsNotFoundError'\n  }\n\nexport class AbiConstructorParamsNotFoundError extends BaseError {\n  override name = 'AbiConstructorParamsNotFoundError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.',\n        'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeInvalidErrorType =\n  AbiDecodingDataSizeInvalidError & {\n    name: 'AbiDecodingDataSizeInvalidError'\n  }\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\n  override name = 'AbiDecodingDataSizeInvalidError'\n  constructor({ data, size }: { data: Hex; size: number }) {\n    super(\n      [\n        `Data size of ${size} bytes is invalid.`,\n        'Size must be in increments of 32 bytes (size % 32 === 0).',\n      ].join('\\n'),\n      { metaMessages: [`Data: ${data} (${size} bytes)`] },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeTooSmallErrorType =\n  AbiDecodingDataSizeTooSmallError & {\n    name: 'AbiDecodingDataSizeTooSmallError'\n  }\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\n  override name = 'AbiDecodingDataSizeTooSmallError'\n\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    data,\n    params,\n    size,\n  }: { data: Hex; params: readonly AbiParameter[]; size: number }) {\n    super(\n      [`Data size of ${size} bytes is too small for given parameters.`].join(\n        '\\n',\n      ),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n      },\n    )\n\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type AbiDecodingOffsetOutOfBoundsErrorType =\n  AbiDecodingOffsetOutOfBoundsError & {\n    name: 'AbiDecodingOffsetOutOfBoundsError'\n  }\nexport class AbiDecodingOffsetOutOfBoundsError extends BaseError {\n  override name = 'AbiDecodingOffsetOutOfBoundsError'\n  constructor({ offset, position }: { offset: number; position: number }) {\n    super(\n      `Offset at \"${offset}\" is out-of-bounds (current position: \"${position}\").`,\n    )\n  }\n}\n\nexport type AbiDecodingZeroDataErrorType = AbiDecodingZeroDataError & {\n  name: 'AbiDecodingZeroDataError'\n}\nexport class AbiDecodingZeroDataError extends BaseError {\n  override name = 'AbiDecodingZeroDataError'\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.')\n  }\n}\n\nexport type AbiEncodingArrayLengthMismatchErrorType =\n  AbiEncodingArrayLengthMismatchError & {\n    name: 'AbiEncodingArrayLengthMismatchError'\n  }\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\n  override name = 'AbiEncodingArrayLengthMismatchError'\n  constructor({\n    expectedLength,\n    givenLength,\n    type,\n  }: { expectedLength: number; givenLength: number; type: string }) {\n    super(\n      [\n        `ABI encoding array length mismatch for type ${type}.`,\n        `Expected length: ${expectedLength}`,\n        `Given length: ${givenLength}`,\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type AbiEncodingBytesSizeMismatchErrorType =\n  AbiEncodingBytesSizeMismatchError & {\n    name: 'AbiEncodingBytesSizeMismatchError'\n  }\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\n  override name = 'AbiEncodingBytesSizeMismatchError'\n  constructor({ expectedSize, value }: { expectedSize: number; value: Hex }) {\n    super(\n      `Size of bytes \"${value}\" (bytes${size(\n        value,\n      )}) does not match expected size (bytes${expectedSize}).`,\n    )\n  }\n}\n\nexport type AbiEncodingLengthMismatchErrorType =\n  AbiEncodingLengthMismatchError & {\n    name: 'AbiEncodingLengthMismatchError'\n  }\nexport class AbiEncodingLengthMismatchError extends BaseError {\n  override name = 'AbiEncodingLengthMismatchError'\n  constructor({\n    expectedLength,\n    givenLength,\n  }: { expectedLength: number; givenLength: number }) {\n    super(\n      [\n        'ABI encoding params/values length mismatch.',\n        `Expected length (params): ${expectedLength}`,\n        `Given length (values): ${givenLength}`,\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type AbiErrorInputsNotFoundErrorType = AbiErrorInputsNotFoundError & {\n  name: 'AbiErrorInputsNotFoundError'\n}\nexport class AbiErrorInputsNotFoundError extends BaseError {\n  override name = 'AbiErrorInputsNotFoundError'\n  constructor(errorName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`,\n        'Cannot encode error result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the inputs exist on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiErrorNotFoundErrorType = AbiErrorNotFoundError & {\n  name: 'AbiErrorNotFoundError'\n}\nexport class AbiErrorNotFoundError extends BaseError {\n  override name = 'AbiErrorNotFoundError'\n  constructor(\n    errorName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiErrorSignatureNotFoundErrorType =\n  AbiErrorSignatureNotFoundError & {\n    name: 'AbiErrorSignatureNotFoundError'\n  }\nexport class AbiErrorSignatureNotFoundError extends BaseError {\n  override name = 'AbiErrorSignatureNotFoundError'\n\n  signature: Hex\n\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded error signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n    this.signature = signature\n  }\n}\n\nexport type AbiEventSignatureEmptyTopicsErrorType =\n  AbiEventSignatureEmptyTopicsError & {\n    name: 'AbiEventSignatureEmptyTopicsError'\n  }\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\n  override name = 'AbiEventSignatureEmptyTopicsError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super('Cannot extract event signature from empty topics.', {\n      docsPath,\n    })\n  }\n}\n\nexport type AbiEventSignatureNotFoundErrorType =\n  AbiEventSignatureNotFoundError & {\n    name: 'AbiEventSignatureNotFoundError'\n  }\nexport class AbiEventSignatureNotFoundError extends BaseError {\n  override name = 'AbiEventSignatureNotFoundError'\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded event signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiEventNotFoundErrorType = AbiEventNotFoundError & {\n  name: 'AbiEventNotFoundError'\n}\nexport class AbiEventNotFoundError extends BaseError {\n  override name = 'AbiEventNotFoundError'\n  constructor(\n    eventName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionNotFoundErrorType = AbiFunctionNotFoundError & {\n  name: 'AbiFunctionNotFoundError'\n}\nexport class AbiFunctionNotFoundError extends BaseError {\n  override name = 'AbiFunctionNotFoundError'\n  constructor(\n    functionName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionOutputsNotFoundErrorType =\n  AbiFunctionOutputsNotFoundError & {\n    name: 'AbiFunctionOutputsNotFoundError'\n  }\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\n  override name = 'AbiFunctionOutputsNotFoundError'\n  constructor(functionName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n        'Cannot decode function result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionSignatureNotFoundErrorType =\n  AbiFunctionSignatureNotFoundError & {\n    name: 'AbiFunctionSignatureNotFoundError'\n  }\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\n  override name = 'AbiFunctionSignatureNotFoundError'\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded function signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiItemAmbiguityErrorType = AbiItemAmbiguityError & {\n  name: 'AbiItemAmbiguityError'\n}\nexport class AbiItemAmbiguityError extends BaseError {\n  override name = 'AbiItemAmbiguityError'\n  constructor(\n    x: { abiItem: Abi[number]; type: string },\n    y: { abiItem: Abi[number]; type: string },\n  ) {\n    super('Found ambiguous types in overloaded ABI items.', {\n      metaMessages: [\n        `\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`,\n        `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``,\n        '',\n        'These types encode differently and cannot be distinguished at runtime.',\n        'Remove one of the ambiguous items in the ABI.',\n      ],\n    })\n  }\n}\n\nexport type BytesSizeMismatchErrorType = BytesSizeMismatchError & {\n  name: 'BytesSizeMismatchError'\n}\nexport class BytesSizeMismatchError extends BaseError {\n  override name = 'BytesSizeMismatchError'\n  constructor({\n    expectedSize,\n    givenSize,\n  }: { expectedSize: number; givenSize: number }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`)\n  }\n}\n\nexport type DecodeLogDataMismatchErrorType = DecodeLogDataMismatch & {\n  name: 'DecodeLogDataMismatch'\n}\nexport class DecodeLogDataMismatch extends BaseError {\n  override name = 'DecodeLogDataMismatch'\n\n  abiItem: AbiEvent\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    abiItem,\n    data,\n    params,\n    size,\n  }: {\n    abiItem: AbiEvent\n    data: Hex\n    params: readonly AbiParameter[]\n    size: number\n  }) {\n    super(\n      [\n        `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n      ].join('\\n'),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n      },\n    )\n\n    this.abiItem = abiItem\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type DecodeLogTopicsMismatchErrorType = DecodeLogTopicsMismatch & {\n  name: 'DecodeLogTopicsMismatch'\n}\nexport class DecodeLogTopicsMismatch extends BaseError {\n  override name = 'DecodeLogTopicsMismatch'\n\n  abiItem: AbiEvent\n\n  constructor({\n    abiItem,\n    param,\n  }: {\n    abiItem: AbiEvent\n    param: AbiParameter & { indexed: boolean }\n  }) {\n    super(\n      [\n        `Expected a topic for indexed event parameter${\n          param.name ? ` \"${param.name}\"` : ''\n        } on event \"${formatAbiItem(abiItem, { includeName: true })}\".`,\n      ].join('\\n'),\n    )\n\n    this.abiItem = abiItem\n  }\n}\n\nexport type InvalidAbiEncodingTypeErrorType = InvalidAbiEncodingTypeError & {\n  name: 'InvalidAbiEncodingTypeError'\n}\nexport class InvalidAbiEncodingTypeError extends BaseError {\n  override name = 'InvalidAbiEncodingType'\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid encoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath },\n    )\n  }\n}\n\nexport type InvalidAbiDecodingTypeErrorType = InvalidAbiDecodingTypeError & {\n  name: 'InvalidAbiDecodingTypeError'\n}\nexport class InvalidAbiDecodingTypeError extends BaseError {\n  override name = 'InvalidAbiDecodingType'\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid decoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath },\n    )\n  }\n}\n\nexport type InvalidArrayErrorType = InvalidArrayError & {\n  name: 'InvalidArrayError'\n}\nexport class InvalidArrayError extends BaseError {\n  override name = 'InvalidArrayError'\n  constructor(value: unknown) {\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'))\n  }\n}\n\nexport type InvalidDefinitionTypeErrorType = InvalidDefinitionTypeError & {\n  name: 'InvalidDefinitionTypeError'\n}\nexport class InvalidDefinitionTypeError extends BaseError {\n  override name = 'InvalidDefinitionTypeError'\n  constructor(type: string) {\n    super(\n      [\n        `\"${type}\" is not a valid definition type.`,\n        'Valid types: \"function\", \"event\", \"error\"',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type UnsupportedPackedAbiTypeErrorType = UnsupportedPackedAbiType & {\n  name: 'UnsupportedPackedAbiType'\n}\nexport class UnsupportedPackedAbiType extends BaseError {\n  override name = 'UnsupportedPackedAbiType'\n  constructor(type: unknown) {\n    super(`Type \"${type}\" is not supported for packed encoding.`)\n  }\n}\n","import type { AbiError } from 'abitype'\n\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\nexport const panicReasons = {\n  1: 'An `assert` condition failed.',\n  17: 'Arithmetic operation resulted in underflow or overflow.',\n  18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\n  33: 'Attempted to convert to an invalid type.',\n  34: 'Attempted to access a storage byte array that is incorrectly encoded.',\n  49: 'Performed `.pop()` on an empty array',\n  50: 'Array index is out of bounds.',\n  65: 'Allocated too much memory or created an array which is too large.',\n  81: 'Attempted to call a zero-initialized variable of internal function type.',\n} as const\n\nexport const solidityError: AbiError = {\n  inputs: [\n    {\n      name: 'message',\n      type: 'string',\n    },\n  ],\n  name: 'Error',\n  type: 'error',\n}\nexport const solidityPanic: AbiError = {\n  inputs: [\n    {\n      name: 'reason',\n      type: 'uint256',\n    },\n  ],\n  name: 'Panic',\n  type: 'error',\n}\n","import type { AbiParameter } from 'abitype'\n\nimport {\n  InvalidDefinitionTypeError,\n  type InvalidDefinitionTypeErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { AbiItem } from '../../types/contract.js'\n\nexport type FormatAbiItemErrorType =\n  | FormatAbiParamsErrorType\n  | InvalidDefinitionTypeErrorType\n  | ErrorType\n\nexport function formatAbiItem(\n  abiItem: AbiItem,\n  { includeName = false }: { includeName?: boolean | undefined } = {},\n) {\n  if (\n    abiItem.type !== 'function' &&\n    abiItem.type !== 'event' &&\n    abiItem.type !== 'error'\n  )\n    throw new InvalidDefinitionTypeError(abiItem.type)\n\n  return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`\n}\n\nexport type FormatAbiParamsErrorType = ErrorType\n\nexport function formatAbiParams(\n  params: readonly AbiParameter[] | undefined,\n  { includeName = false }: { includeName?: boolean | undefined } = {},\n): string {\n  if (!params) return ''\n  return params\n    .map((param) => formatAbiParam(param, { includeName }))\n    .join(includeName ? ', ' : ',')\n}\n\nexport type FormatAbiParamErrorType = ErrorType\n\nfunction formatAbiParam(\n  param: AbiParameter,\n  { includeName }: { includeName: boolean },\n): string {\n  if (param.type.startsWith('tuple')) {\n    return `(${formatAbiParams(\n      (param as unknown as { components: AbiParameter[] }).components,\n      { includeName },\n    )})${param.type.slice('tuple'.length)}`\n  }\n  return param.type + (includeName && param.name ? ` ${param.name}` : '')\n}\n","import { BaseError } from './base.js'\n\nexport type UrlRequiredErrorType = UrlRequiredError & {\n  name: 'UrlRequiredError'\n}\nexport class UrlRequiredError extends BaseError {\n  constructor() {\n    super(\n      'No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.',\n      {\n        docsPath: '/docs/clients/intro',\n      },\n    )\n  }\n}\n","export function createIdStore() {\n  return {\n    current: 0,\n    take() {\n      return this.current++\n    },\n    reset() {\n      this.current = 0\n    },\n  }\n}\n\nexport const idCache = /*#__PURE__*/ createIdStore()\n","import {\n  HttpRequestError,\n  type HttpRequestErrorType as HttpRequestErrorType_,\n  TimeoutError,\n  type TimeoutErrorType,\n} from '../../errors/request.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcRequest, RpcResponse } from '../../types/rpc.js'\nimport {\n  type WithTimeoutErrorType,\n  withTimeout,\n} from '../promise/withTimeout.js'\nimport { stringify } from '../stringify.js'\nimport { idCache } from './id.js'\n\nexport type HttpRpcClientOptions = {\n  /** Request configuration to pass to `fetch`. */\n  fetchOptions?: Omit<RequestInit, 'body'> | undefined\n  /** A callback to handle the request. */\n  onRequest?: ((request: Request) => Promise<void> | void) | undefined\n  /** A callback to handle the response. */\n  onResponse?: ((response: Response) => Promise<void> | void) | undefined\n  /** The timeout (in ms) for the request. */\n  timeout?: number | undefined\n}\n\nexport type HttpRequestParameters<\n  TBody extends RpcRequest | RpcRequest[] = RpcRequest,\n> = {\n  /** The RPC request body. */\n  body: TBody\n  /** Request configuration to pass to `fetch`. */\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\n  /** A callback to handle the response. */\n  onRequest?: ((request: Request) => Promise<void> | void) | undefined\n  /** A callback to handle the response. */\n  onResponse?: ((response: Response) => Promise<void> | void) | undefined\n  /** The timeout (in ms) for the request. */\n  timeout?: HttpRpcClientOptions['timeout'] | undefined\n}\n\nexport type HttpRequestReturnType<\n  TBody extends RpcRequest | RpcRequest[] = RpcRequest,\n> = TBody extends RpcRequest[] ? RpcResponse[] : RpcResponse\n\nexport type HttpRequestErrorType =\n  | HttpRequestErrorType_\n  | TimeoutErrorType\n  | WithTimeoutErrorType\n  | ErrorType\n\nexport type HttpRpcClient = {\n  request<TBody extends RpcRequest | RpcRequest[]>(\n    params: HttpRequestParameters<TBody>,\n  ): Promise<HttpRequestReturnType<TBody>>\n}\n\nexport function getHttpRpcClient(\n  url: string,\n  options: HttpRpcClientOptions = {},\n): HttpRpcClient {\n  return {\n    async request(params) {\n      const {\n        body,\n        onRequest = options.onRequest,\n        onResponse = options.onResponse,\n        timeout = options.timeout ?? 10_000,\n      } = params\n\n      const fetchOptions = {\n        ...(options.fetchOptions ?? {}),\n        ...(params.fetchOptions ?? {}),\n      }\n\n      const { headers, method, signal: signal_ } = fetchOptions\n\n      try {\n        const response = await withTimeout(\n          async ({ signal }) => {\n            const init: RequestInit = {\n              ...fetchOptions,\n              body: Array.isArray(body)\n                ? stringify(\n                    body.map((body) => ({\n                      jsonrpc: '2.0',\n                      id: body.id ?? idCache.take(),\n                      ...body,\n                    })),\n                  )\n                : stringify({\n                    jsonrpc: '2.0',\n                    id: body.id ?? idCache.take(),\n                    ...body,\n                  }),\n              headers: {\n                ...headers,\n                'Content-Type': 'application/json',\n              },\n              method: method || 'POST',\n              signal: signal_ || (timeout > 0 ? signal : null),\n            }\n            const request = new Request(url, init)\n            if (onRequest) await onRequest(request)\n            const response = await fetch(url, init)\n            return response\n          },\n          {\n            errorInstance: new TimeoutError({ body, url }),\n            timeout,\n            signal: true,\n          },\n        )\n\n        if (onResponse) await onResponse(response)\n\n        let data: any\n        if (\n          response.headers.get('Content-Type')?.startsWith('application/json')\n        )\n          data = await response.json()\n        else {\n          data = await response.text()\n          data = JSON.parse(data || '{}')\n        }\n\n        if (!response.ok) {\n          throw new HttpRequestError({\n            body,\n            details: stringify(data.error) || response.statusText,\n            headers: response.headers,\n            status: response.status,\n            url,\n          })\n        }\n\n        return data\n      } catch (err) {\n        if (err instanceof HttpRequestError) throw err\n        if (err instanceof TimeoutError) throw err\n        throw new HttpRequestError({\n          body,\n          details: (err as Error).message,\n          url,\n        })\n      }\n    },\n  }\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\nexport type WithTimeoutErrorType = ErrorType\n\nexport function withTimeout<TData>(\n  fn: ({\n    signal,\n  }: { signal: AbortController['signal'] | null }) => Promise<TData>,\n  {\n    errorInstance = new Error('timed out'),\n    timeout,\n    signal,\n  }: {\n    // The error instance to throw when the timeout is reached.\n    errorInstance?: Error | undefined\n    // The timeout (in ms).\n    timeout: number\n    // Whether or not the timeout should use an abort signal.\n    signal?: boolean | undefined\n  },\n): Promise<TData> {\n  return new Promise((resolve, reject) => {\n    ;(async () => {\n      let timeoutId!: NodeJS.Timeout\n      try {\n        const controller = new AbortController()\n        if (timeout > 0) {\n          timeoutId = setTimeout(() => {\n            if (signal) {\n              controller.abort()\n            } else {\n              reject(errorInstance)\n            }\n          }, timeout)\n        }\n        resolve(await fn({ signal: controller?.signal || null }))\n      } catch (err) {\n        if ((err as Error).name === 'AbortError') reject(errorInstance)\n        reject(err)\n      } finally {\n        clearTimeout(timeoutId)\n      }\n    })()\n  })\n}\n","import type { Prettify } from '../types/utils.js'\nimport { BaseError } from './base.js'\nimport { RpcRequestError } from './request.js'\n\nconst unknownErrorCode = -1\n\nexport type RpcErrorCode =\n  | -1\n  | -32700 // Parse error\n  | -32600 // Invalid request\n  | -32601 // Method not found\n  | -32602 // Invalid params\n  | -32603 // Internal error\n  | -32000 // Invalid input\n  | -32001 // Resource not found\n  | -32002 // Resource unavailable\n  | -32003 // Transaction rejected\n  | -32004 // Method not supported\n  | -32005 // Limit exceeded\n  | -32006 // JSON-RPC version not supported\n  | -32042 // Method not found\n\ntype RpcErrorOptions<TCode extends number = RpcErrorCode> = {\n  code?: TCode | (number & {}) | undefined\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n}\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n *\n * - EIP https://eips.ethereum.org/EIPS/eip-1474\n */\nexport type RpcErrorType = RpcError & { name: 'RpcError' }\nexport class RpcError<TCode extends number = RpcErrorCode> extends BaseError {\n  override name = 'RpcError'\n\n  code: TCode | (number & {})\n\n  constructor(\n    cause: Error,\n    { code, docsPath, metaMessages, shortMessage }: RpcErrorOptions<TCode>,\n  ) {\n    super(shortMessage, {\n      cause,\n      docsPath,\n      metaMessages:\n        metaMessages || (cause as { metaMessages?: string[] })?.metaMessages,\n    })\n    this.name = cause.name\n    this.code = (\n      cause instanceof RpcRequestError ? cause.code : code ?? unknownErrorCode\n    ) as TCode\n  }\n}\n\nexport type ProviderRpcErrorCode =\n  | 4001 // User Rejected Request\n  | 4100 // Unauthorized\n  | 4200 // Unsupported Method\n  | 4900 // Disconnected\n  | 4901 // Chain Disconnected\n  | 4902 // Chain Not Recognized\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n *\n * - EIP https://eips.ethereum.org/EIPS/eip-1193\n */\nexport type ProviderRpcErrorType = ProviderRpcError & {\n  name: 'ProviderRpcError'\n}\nexport class ProviderRpcError<\n  T = undefined,\n> extends RpcError<ProviderRpcErrorCode> {\n  override name = 'ProviderRpcError'\n\n  data?: T | undefined\n\n  constructor(\n    cause: Error,\n    options: Prettify<\n      RpcErrorOptions<ProviderRpcErrorCode> & {\n        data?: T | undefined\n      }\n    >,\n  ) {\n    super(cause, options)\n\n    this.data = options.data\n  }\n}\n\n/**\n * Subclass for a \"Parse error\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ParseRpcErrorType = ParseRpcError & {\n  code: -32700\n  name: 'ParseRpcError'\n}\nexport class ParseRpcError extends RpcError {\n  override name = 'ParseRpcError'\n  static code = -32700 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ParseRpcError.code,\n      shortMessage:\n        'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Invalid request\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidRequestRpcErrorType = InvalidRequestRpcError & {\n  code: -32600\n  name: 'InvalidRequestRpcError'\n}\nexport class InvalidRequestRpcError extends RpcError {\n  override name = 'InvalidRequestRpcError'\n  static code = -32600 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidRequestRpcError.code,\n      shortMessage: 'JSON is not a valid request object.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Method not found\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type MethodNotFoundRpcErrorType = MethodNotFoundRpcError & {\n  code: -32601\n  name: 'MethodNotFoundRpcError'\n}\nexport class MethodNotFoundRpcError extends RpcError {\n  override name = 'MethodNotFoundRpcError'\n  static code = -32601 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: MethodNotFoundRpcError.code,\n      shortMessage: 'The method does not exist / is not available.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Invalid params\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidParamsRpcErrorType = InvalidParamsRpcError & {\n  code: -32602\n  name: 'InvalidParamsRpcError'\n}\nexport class InvalidParamsRpcError extends RpcError {\n  override name = 'InvalidParamsRpcError'\n  static code = -32602 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidParamsRpcError.code,\n      shortMessage: [\n        'Invalid parameters were provided to the RPC method.',\n        'Double check you have provided the correct parameters.',\n      ].join('\\n'),\n    })\n  }\n}\n\n/**\n * Subclass for an \"Internal error\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InternalRpcErrorType = InternalRpcError & {\n  code: -32603\n  name: 'InternalRpcError'\n}\nexport class InternalRpcError extends RpcError {\n  override name = 'InternalRpcError'\n  static code = -32603 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InternalRpcError.code,\n      shortMessage: 'An internal error was received.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Invalid input\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type InvalidInputRpcErrorType = InvalidInputRpcError & {\n  code: -32000\n  name: 'InvalidInputRpcError'\n}\nexport class InvalidInputRpcError extends RpcError {\n  override name = 'InvalidInputRpcError'\n  static code = -32000 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: InvalidInputRpcError.code,\n      shortMessage: [\n        'Missing or invalid parameters.',\n        'Double check you have provided the correct parameters.',\n      ].join('\\n'),\n    })\n  }\n}\n\n/**\n * Subclass for a \"Resource not found\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ResourceNotFoundRpcErrorType = ResourceNotFoundRpcError & {\n  code: -32001\n  name: 'ResourceNotFoundRpcError'\n}\nexport class ResourceNotFoundRpcError extends RpcError {\n  override name = 'ResourceNotFoundRpcError'\n  static code = -32001 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ResourceNotFoundRpcError.code,\n      shortMessage: 'Requested resource not found.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Resource unavailable\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type ResourceUnavailableRpcErrorType = ResourceUnavailableRpcError & {\n  code: -32002\n  name: 'ResourceUnavailableRpcError'\n}\nexport class ResourceUnavailableRpcError extends RpcError {\n  override name = 'ResourceUnavailableRpcError'\n  static code = -32002 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ResourceUnavailableRpcError.code,\n      shortMessage: 'Requested resource not available.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Transaction rejected\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type TransactionRejectedRpcErrorType = TransactionRejectedRpcError & {\n  code: -32003\n  name: 'TransactionRejectedRpcError'\n}\nexport class TransactionRejectedRpcError extends RpcError {\n  override name = 'TransactionRejectedRpcError'\n  static code = -32003 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: TransactionRejectedRpcError.code,\n      shortMessage: 'Transaction creation failed.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Method not supported\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type MethodNotSupportedRpcErrorType = MethodNotSupportedRpcError & {\n  code: -32004\n  name: 'MethodNotSupportedRpcError'\n}\nexport class MethodNotSupportedRpcError extends RpcError {\n  override name = 'MethodNotSupportedRpcError'\n  static code = -32004 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: MethodNotSupportedRpcError.code,\n      shortMessage: 'Method is not implemented.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"Limit exceeded\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type LimitExceededRpcErrorType = LimitExceededRpcError & {\n  code: -32005\n  name: 'LimitExceededRpcError'\n}\nexport class LimitExceededRpcError extends RpcError {\n  override name = 'LimitExceededRpcError'\n  static code = -32005 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: LimitExceededRpcError.code,\n      shortMessage: 'Request exceeds defined limit.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"JSON-RPC version not supported\" EIP-1474 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\n */\nexport type JsonRpcVersionUnsupportedErrorType =\n  JsonRpcVersionUnsupportedError & {\n    code: -32006\n    name: 'JsonRpcVersionUnsupportedError'\n  }\nexport class JsonRpcVersionUnsupportedError extends RpcError {\n  override name = 'JsonRpcVersionUnsupportedError'\n  static code = -32006 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: JsonRpcVersionUnsupportedError.code,\n      shortMessage: 'Version of JSON-RPC protocol is not supported.',\n    })\n  }\n}\n\n/**\n * Subclass for a \"User Rejected Request\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UserRejectedRequestErrorType = UserRejectedRequestError & {\n  code: 4001\n  name: 'UserRejectedRequestError'\n}\nexport class UserRejectedRequestError extends ProviderRpcError {\n  override name = 'UserRejectedRequestError'\n  static code = 4001 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UserRejectedRequestError.code,\n      shortMessage: 'User rejected the request.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Unauthorized\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UnauthorizedProviderErrorType = UnauthorizedProviderError & {\n  code: 4100\n  name: 'UnauthorizedProviderError'\n}\nexport class UnauthorizedProviderError extends ProviderRpcError {\n  override name = 'UnauthorizedProviderError'\n  static code = 4100 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UnauthorizedProviderError.code,\n      shortMessage:\n        'The requested method and/or account has not been authorized by the user.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Unsupported Method\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type UnsupportedProviderMethodErrorType =\n  UnsupportedProviderMethodError & {\n    code: 4200\n    name: 'UnsupportedProviderMethodError'\n  }\nexport class UnsupportedProviderMethodError extends ProviderRpcError {\n  override name = 'UnsupportedProviderMethodError'\n  static code = 4200 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: UnsupportedProviderMethodError.code,\n      shortMessage: 'The Provider does not support the requested method.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Disconnected\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type ProviderDisconnectedErrorType = ProviderDisconnectedError & {\n  code: 4900\n  name: 'ProviderDisconnectedError'\n}\nexport class ProviderDisconnectedError extends ProviderRpcError {\n  override name = 'ProviderDisconnectedError'\n  static code = 4900 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ProviderDisconnectedError.code,\n      shortMessage: 'The Provider is disconnected from all chains.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Chain Disconnected\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type ChainDisconnectedErrorType = ChainDisconnectedError & {\n  code: 4901\n  name: 'ChainDisconnectedError'\n}\nexport class ChainDisconnectedError extends ProviderRpcError {\n  override name = 'ChainDisconnectedError'\n  static code = 4901 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: ChainDisconnectedError.code,\n      shortMessage: 'The Provider is not connected to the requested chain.',\n    })\n  }\n}\n\n/**\n * Subclass for an \"Switch Chain\" EIP-1193 error.\n *\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\n */\nexport type SwitchChainErrorType = SwitchChainError & {\n  code: 4902\n  name: 'SwitchChainError'\n}\nexport class SwitchChainError extends ProviderRpcError {\n  override name = 'SwitchChainError'\n  static code = 4902 as const\n\n  constructor(cause: Error) {\n    super(cause, {\n      code: SwitchChainError.code,\n      shortMessage: 'An error occurred when attempting to switch chain.',\n    })\n  }\n}\n\n/**\n * Subclass for an unknown RPC error.\n */\nexport type UnknownRpcErrorType = UnknownRpcError & {\n  name: 'UnknownRpcError'\n}\nexport class UnknownRpcError extends RpcError {\n  override name = 'UnknownRpcError'\n\n  constructor(cause: Error) {\n    super(cause, {\n      shortMessage: 'An unknown RPC error occurred.',\n    })\n  }\n}\n","export async function wait(time: number) {\n  return new Promise((res) => setTimeout(res, time))\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport { wait } from '../wait.js'\n\nexport type WithRetryParameters = {\n  // The delay (in ms) between retries.\n  delay?:\n    | ((config: { count: number; error: Error }) => number)\n    | number\n    | undefined\n  // The max number of times to retry.\n  retryCount?: number | undefined\n  // Whether or not to retry when an error is thrown.\n  shouldRetry?:\n    | (({\n        count,\n        error,\n      }: {\n        count: number\n        error: Error\n      }) => Promise<boolean> | boolean)\n    | undefined\n}\n\nexport type WithRetryErrorType = ErrorType\n\nexport function withRetry<TData>(\n  fn: () => Promise<TData>,\n  {\n    delay: delay_ = 100,\n    retryCount = 2,\n    shouldRetry = () => true,\n  }: WithRetryParameters = {},\n) {\n  return new Promise<TData>((resolve, reject) => {\n    const attemptRetry = async ({ count = 0 } = {}) => {\n      const retry = async ({ error }: { error: Error }) => {\n        const delay =\n          typeof delay_ === 'function' ? delay_({ count, error }) : delay_\n        if (delay) await wait(delay)\n        attemptRetry({ count: count + 1 })\n      }\n\n      try {\n        const data = await fn()\n        resolve(data)\n      } catch (err) {\n        if (\n          count < retryCount &&\n          (await shouldRetry({ count, error: err as Error }))\n        )\n          return retry({ error: err as Error })\n        reject(err)\n      }\n    }\n    attemptRetry()\n  })\n}\n","import { BaseError } from '../errors/base.js'\nimport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n  type RpcRequestErrorType,\n  type TimeoutErrorType,\n  type WebSocketRequestErrorType,\n} from '../errors/request.js'\nimport {\n  ChainDisconnectedError,\n  type ChainDisconnectedErrorType,\n  InternalRpcError,\n  type InternalRpcErrorType,\n  InvalidInputRpcError,\n  type InvalidInputRpcErrorType,\n  InvalidParamsRpcError,\n  type InvalidParamsRpcErrorType,\n  InvalidRequestRpcError,\n  type InvalidRequestRpcErrorType,\n  JsonRpcVersionUnsupportedError,\n  type JsonRpcVersionUnsupportedErrorType,\n  LimitExceededRpcError,\n  type LimitExceededRpcErrorType,\n  MethodNotFoundRpcError,\n  type MethodNotFoundRpcErrorType,\n  MethodNotSupportedRpcError,\n  type MethodNotSupportedRpcErrorType,\n  ParseRpcError,\n  type ParseRpcErrorType,\n  ProviderDisconnectedError,\n  type ProviderDisconnectedErrorType,\n  type ProviderRpcErrorCode,\n  ResourceNotFoundRpcError,\n  type ResourceNotFoundRpcErrorType,\n  ResourceUnavailableRpcError,\n  type ResourceUnavailableRpcErrorType,\n  type RpcError,\n  type RpcErrorCode,\n  type RpcErrorType,\n  SwitchChainError,\n  type SwitchChainErrorType,\n  TransactionRejectedRpcError,\n  type TransactionRejectedRpcErrorType,\n  UnauthorizedProviderError,\n  type UnauthorizedProviderErrorType,\n  UnknownRpcError,\n  type UnknownRpcErrorType,\n  UnsupportedProviderMethodError,\n  type UnsupportedProviderMethodErrorType,\n  UserRejectedRequestError,\n  type UserRejectedRequestErrorType,\n} from '../errors/rpc.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type {\n  EIP1193RequestFn,\n  EIP1193RequestOptions,\n} from '../types/eip1193.js'\nimport type { CreateBatchSchedulerErrorType } from './promise/createBatchScheduler.js'\nimport { type WithRetryErrorType, withRetry } from './promise/withRetry.js'\nimport type { GetSocketRpcClientErrorType } from './rpc/socket.js'\n\nexport type RequestErrorType =\n  | ChainDisconnectedErrorType\n  | CreateBatchSchedulerErrorType\n  | HttpRequestErrorType\n  | InternalRpcErrorType\n  | InvalidInputRpcErrorType\n  | InvalidParamsRpcErrorType\n  | InvalidRequestRpcErrorType\n  | GetSocketRpcClientErrorType\n  | JsonRpcVersionUnsupportedErrorType\n  | LimitExceededRpcErrorType\n  | MethodNotFoundRpcErrorType\n  | MethodNotSupportedRpcErrorType\n  | ParseRpcErrorType\n  | ProviderDisconnectedErrorType\n  | ResourceNotFoundRpcErrorType\n  | ResourceUnavailableRpcErrorType\n  | RpcErrorType\n  | RpcRequestErrorType\n  | SwitchChainErrorType\n  | TimeoutErrorType\n  | TransactionRejectedRpcErrorType\n  | UnauthorizedProviderErrorType\n  | UnknownRpcErrorType\n  | UnsupportedProviderMethodErrorType\n  | UserRejectedRequestErrorType\n  | WebSocketRequestErrorType\n  | WithRetryErrorType\n  | ErrorType\n\nexport function buildRequest<request extends (args: any) => Promise<any>>(\n  request: request,\n  options: EIP1193RequestOptions = {},\n): EIP1193RequestFn {\n  return async (args, overrideOptions = {}) => {\n    const { retryDelay = 150, retryCount = 3 } = {\n      ...options,\n      ...overrideOptions,\n    }\n    return withRetry(\n      async () => {\n        try {\n          return await request(args)\n        } catch (err_) {\n          const err = err_ as unknown as RpcError<\n            RpcErrorCode | ProviderRpcErrorCode\n          >\n          switch (err.code) {\n            // -32700\n            case ParseRpcError.code:\n              throw new ParseRpcError(err)\n            // -32600\n            case InvalidRequestRpcError.code:\n              throw new InvalidRequestRpcError(err)\n            // -32601\n            case MethodNotFoundRpcError.code:\n              throw new MethodNotFoundRpcError(err)\n            // -32602\n            case InvalidParamsRpcError.code:\n              throw new InvalidParamsRpcError(err)\n            // -32603\n            case InternalRpcError.code:\n              throw new InternalRpcError(err)\n            // -32000\n            case InvalidInputRpcError.code:\n              throw new InvalidInputRpcError(err)\n            // -32001\n            case ResourceNotFoundRpcError.code:\n              throw new ResourceNotFoundRpcError(err)\n            // -32002\n            case ResourceUnavailableRpcError.code:\n              throw new ResourceUnavailableRpcError(err)\n            // -32003\n            case TransactionRejectedRpcError.code:\n              throw new TransactionRejectedRpcError(err)\n            // -32004\n            case MethodNotSupportedRpcError.code:\n              throw new MethodNotSupportedRpcError(err)\n            // -32005\n            case LimitExceededRpcError.code:\n              throw new LimitExceededRpcError(err)\n            // -32006\n            case JsonRpcVersionUnsupportedError.code:\n              throw new JsonRpcVersionUnsupportedError(err)\n            // 4001\n            case UserRejectedRequestError.code:\n              throw new UserRejectedRequestError(err)\n            // 4100\n            case UnauthorizedProviderError.code:\n              throw new UnauthorizedProviderError(err)\n            // 4200\n            case UnsupportedProviderMethodError.code:\n              throw new UnsupportedProviderMethodError(err)\n            // 4900\n            case ProviderDisconnectedError.code:\n              throw new ProviderDisconnectedError(err)\n            // 4901\n            case ChainDisconnectedError.code:\n              throw new ChainDisconnectedError(err)\n            // 4902\n            case SwitchChainError.code:\n              throw new SwitchChainError(err)\n            // CAIP-25: User Rejected Error\n            // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25\n            case 5000:\n              throw new UserRejectedRequestError(err)\n            default:\n              if (err_ instanceof BaseError) throw err_\n              throw new UnknownRpcError(err as Error)\n          }\n        }\n      },\n      {\n        delay: ({ count, error }) => {\n          // If we find a Retry-After header, let's retry after the given time.\n          if (error && error instanceof HttpRequestError) {\n            const retryAfter = error?.headers?.get('Retry-After')\n            if (retryAfter?.match(/\\d/))\n              return Number.parseInt(retryAfter) * 1000\n          }\n\n          // Otherwise, let's retry with an exponential backoff.\n          return ~~(1 << count) * retryDelay\n        },\n        retryCount,\n        shouldRetry: ({ error }) => shouldRetry(error),\n      },\n    )\n  }\n}\n\nexport function shouldRetry(error: Error) {\n  if ('code' in error && typeof error.code === 'number') {\n    if (error.code === -1) return true // Unknown error\n    if (error.code === LimitExceededRpcError.code) return true\n    if (error.code === InternalRpcError.code) return true\n    return false\n  }\n  if (error instanceof HttpRequestError && error.status) {\n    // Forbidden\n    if (error.status === 403) return true\n    // Request Timeout\n    if (error.status === 408) return true\n    // Request Entity Too Large\n    if (error.status === 413) return true\n    // Too Many Requests\n    if (error.status === 429) return true\n    // Internal Server Error\n    if (error.status === 500) return true\n    // Bad Gateway\n    if (error.status === 502) return true\n    // Service Unavailable\n    if (error.status === 503) return true\n    // Gateway Timeout\n    if (error.status === 504) return true\n    return false\n  }\n  return true\n}\n","import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcRequest } from '../../types/rpc.js'\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js'\nimport {\n  type HttpRpcClientOptions,\n  getHttpRpcClient,\n} from '../../utils/rpc/http.js'\n\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\nexport type BatchOptions = {\n  /** The maximum number of JSON-RPC requests to send in a batch. @default 1_000 */\n  batchSize?: number | undefined\n  /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n  wait?: number | undefined\n}\n\nexport type HttpTransportConfig = {\n  /**\n   * Whether to enable Batch JSON-RPC.\n   * @link https://www.jsonrpc.org/specification#batch\n   */\n  batch?: boolean | BatchOptions | undefined\n  /**\n   * Request configuration to pass to `fetch`.\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch\n   */\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchRequest?: HttpRpcClientOptions['onRequest'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchResponse?: HttpRpcClientOptions['onResponse'] | undefined\n  /** The key of the HTTP transport. */\n  key?: TransportConfig['key'] | undefined\n  /** The name of the HTTP transport. */\n  name?: TransportConfig['name'] | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** The timeout (in ms) for the HTTP request. Default: 10_000 */\n  timeout?: TransportConfig['timeout'] | undefined\n}\n\nexport type HttpTransport = Transport<\n  'http',\n  {\n    fetchOptions?: HttpTransportConfig['fetchOptions'] | undefined\n    url?: string | undefined\n  }\n>\n\nexport type HttpTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string | undefined,\n  config: HttpTransportConfig = {},\n): HttpTransport {\n  const {\n    batch,\n    fetchOptions,\n    key = 'http',\n    name = 'HTTP JSON-RPC',\n    onFetchRequest,\n    onFetchResponse,\n    retryDelay,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const { batchSize = 1000, wait = 0 } =\n      typeof batch === 'object' ? batch : {}\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.http[0]\n    if (!url_) throw new UrlRequiredError()\n\n    const rpcClient = getHttpRpcClient(url_, {\n      fetchOptions,\n      onRequest: onFetchRequest,\n      onResponse: onFetchResponse,\n      timeout,\n    })\n\n    return createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n\n          const { schedule } = createBatchScheduler({\n            id: url_,\n            wait,\n            shouldSplitBatch(requests) {\n              return requests.length > batchSize\n            },\n            fn: (body: RpcRequest[]) =>\n              rpcClient.request({\n                body,\n              }),\n            sort: (a, b) => a.id - b.id,\n          })\n\n          const fn = async (body: RpcRequest) =>\n            batch\n              ? schedule(body)\n              : [\n                  await rpcClient.request({\n                    body,\n                  }),\n                ]\n\n          const [{ error, result }] = await fn(body)\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'http',\n      },\n      {\n        fetchOptions,\n        url: url_,\n      },\n    )\n  }\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport { buildRequest } from '../../utils/buildRequest.js'\nimport type { ClientConfig } from '../createClient.js'\n\nexport type TransportConfig<\n  TType extends string = string,\n  TEIP1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = {\n  /** The name of the transport. */\n  name: string\n  /** The key of the transport. */\n  key: string\n  /** The JSON-RPC request function that matches the EIP-1193 request spec. */\n  request: TEIP1193RequestFn\n  /** The base delay (in ms) between retries. */\n  retryDelay?: number | undefined\n  /** The max number of times to retry. */\n  retryCount?: number | undefined\n  /** The timeout (in ms) for requests. */\n  timeout?: number | undefined\n  /** The type of the transport. */\n  type: TType\n}\n\nexport type Transport<\n  TType extends string = string,\n  TRpcAttributes = Record<string, any>,\n  TEIP1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = <TChain extends Chain | undefined = Chain>({\n  chain,\n}: {\n  chain?: TChain | undefined\n  pollingInterval?: ClientConfig['pollingInterval'] | undefined\n  retryCount?: TransportConfig['retryCount'] | undefined\n  timeout?: TransportConfig['timeout'] | undefined\n}) => {\n  config: TransportConfig<TType>\n  request: TEIP1193RequestFn\n  value?: TRpcAttributes | undefined\n}\n\nexport type CreateTransportErrorType = ErrorType\n\n/**\n * @description Creates an transport intended to be used with a client.\n */\nexport function createTransport<\n  TType extends string,\n  TRpcAttributes extends Record<string, any>,\n>(\n  {\n    key,\n    name,\n    request,\n    retryCount = 3,\n    retryDelay = 150,\n    timeout,\n    type,\n  }: TransportConfig<TType>,\n  value?: TRpcAttributes | undefined,\n): ReturnType<Transport<TType, TRpcAttributes>> {\n  return {\n    config: { key, name, request, retryCount, retryDelay, timeout, type },\n    request: buildRequest(request, { retryCount, retryDelay }),\n    value,\n  }\n}\n","const size = 256\nlet index = size\nlet buffer: string\n\nexport function uid(length = 11) {\n  if (!buffer || index + length > size * 2) {\n    buffer = ''\n    index = 0\n    for (let i = 0; i < size; i++) {\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\n    }\n  }\n  return buffer.substring(index, index++ + length)\n}\n","import { panicReasons } from '../../constants/solidity.js'\nimport { BaseError } from '../../errors/base.js'\nimport { ContractFunctionRevertedError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nexport type IsNullUniversalResolverErrorErrorType = ErrorType\n\n/*\n * @description Checks if error is a valid null result UniversalResolver error\n */\nexport function isNullUniversalResolverError(\n  err: unknown,\n  callType: 'resolve' | 'reverse',\n): boolean {\n  if (!(err instanceof BaseError)) return false\n  const cause = err.walk((e) => e instanceof ContractFunctionRevertedError)\n  if (!(cause instanceof ContractFunctionRevertedError)) return false\n  if (cause.data?.errorName === 'ResolverNotFound') return true\n  if (cause.data?.errorName === 'ResolverWildcardNotSupported') return true\n  if (cause.data?.errorName === 'ResolverNotContract') return true\n  if (cause.data?.errorName === 'ResolverError') return true\n  if (cause.data?.errorName === 'HttpError') return true\n  // Backwards compatibility for older UniversalResolver contracts\n  if (\n    cause.reason?.includes(\n      'Wildcard on non-extended resolvers is not supported',\n    )\n  )\n    return true\n  // No primary name set for address.\n  if (callType === 'reverse' && cause.reason === panicReasons[50]) return true\n  return false\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\n\nexport type EncodedLabelToLabelhashErrorType = IsHexErrorType | ErrorType\n\nexport function encodedLabelToLabelhash(label: string): Hex | null {\n  if (label.length !== 66) return null\n  if (label.indexOf('[') !== 0) return null\n  if (label.indexOf(']') !== 65) return null\n  const hash = `0x${label.slice(1, 65)}`\n  if (!isHex(hash)) return null\n  return hash\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport {\n  type StringToBytesErrorType,\n  type ToBytesErrorType,\n  stringToBytes,\n  toBytes,\n} from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type EncodedLabelToLabelhashErrorType,\n  encodedLabelToLabelhash,\n} from './encodedLabelToLabelhash.js'\n\nexport type NamehashErrorType =\n  | BytesToHexErrorType\n  | EncodedLabelToLabelhashErrorType\n  | ToBytesErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ConcatErrorType\n  | ErrorType\n\n/**\n * @description Hashes ENS name\n *\n * - Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * namehash('wevm.eth')\n * '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n *\n * @link https://eips.ethereum.org/EIPS/eip-137\n */\nexport function namehash(name: string) {\n  let result = new Uint8Array(32).fill(0)\n  if (!name) return bytesToHex(result)\n\n  const labels = name.split('.')\n  // Iterate in reverse order building up hash\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\n    const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i])\n    const hashed = hashFromEncodedLabel\n      ? toBytes(hashFromEncodedLabel)\n      : keccak256(stringToBytes(labels[i]), 'bytes')\n    result = keccak256(concat([result, hashed]), 'bytes')\n  }\n\n  return bytesToHex(result)\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type EncodedLabelToLabelhashErrorType,\n  encodedLabelToLabelhash,\n} from './encodedLabelToLabelhash.js'\n\nexport type LabelhashErrorType =\n  | BytesToHexErrorType\n  | EncodedLabelToLabelhashErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\n/**\n * @description Hashes ENS label\n *\n * - Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @example\n * labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n */\nexport function labelhash(label: string) {\n  const result = new Uint8Array(32).fill(0)\n  if (!label) return bytesToHex(result)\n  return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label))\n}\n","// Adapted from https://github.com/mafintosh/dns-packet\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray } from '../../types/misc.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport {\n  type EncodeLabelhashErrorType,\n  encodeLabelhash,\n} from './encodeLabelhash.js'\nimport { type LabelhashErrorType, labelhash } from './labelhash.js'\n\nexport type PacketToBytesErrorType =\n  | EncodeLabelhashErrorType\n  | LabelhashErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\n/*\n * @description Encodes a DNS packet into a ByteArray containing a UDP payload.\n *\n * @example\n * packetToBytes('awkweb.eth')\n * '0x0661776b7765620365746800'\n *\n * @see https://docs.ens.domains/resolution/names#dns\n *\n */\nexport function packetToBytes(packet: string): ByteArray {\n  // strip leading and trailing `.`\n  const value = packet.replace(/^\\.|\\.$/gm, '')\n  if (value.length === 0) return new Uint8Array(1)\n\n  const bytes = new Uint8Array(stringToBytes(value).byteLength + 2)\n\n  let offset = 0\n  const list = value.split('.')\n  for (let i = 0; i < list.length; i++) {\n    let encoded = stringToBytes(list[i])\n    // if the length is > 255, make the encoded label value a labelhash\n    // this is compatible with the universal resolver\n    if (encoded.byteLength > 255)\n      encoded = stringToBytes(encodeLabelhash(labelhash(list[i])))\n    bytes[offset] = encoded.length\n    bytes.set(encoded, offset + 1)\n    offset += encoded.length + 1\n  }\n\n  if (bytes.byteLength !== offset + 1) return bytes.slice(0, offset + 1)\n\n  return bytes\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type EncodeLabelhashErrorType = ErrorType\n\nexport function encodeLabelhash(hash: Hex): `[${string}]` {\n  return `[${hash.slice(2)}]`\n}\n","import type { Client } from '../clients/createClient.js'\n\n/**\n * Retrieves and returns an action from the client (if exists), and falls\n * back to the tree-shakable action.\n *\n * Useful for extracting overridden actions from a client (ie. if a consumer\n * wants to override the `sendTransaction` implementation).\n */\nexport function getAction<params extends {}, returnType extends {}>(\n  client: Client,\n  action: (_: any, params: params) => returnType,\n  // Some minifiers drop `Function.prototype.name` or can change function\n  // names so that getting the name by reflection through `action.name` will\n  // not work.\n  name: string,\n) {\n  type DecoratedClient = Client & {\n    [key: string]: (params: params) => returnType\n  }\n\n  return (params: params): returnType =>\n    (client as DecoratedClient)[action.name]?.(params) ??\n    (client as DecoratedClient)[name]?.(params) ??\n    action(client, params)\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ContractFunctionExecutionError,\n  type ContractFunctionExecutionErrorType,\n  ContractFunctionRevertedError,\n  type ContractFunctionRevertedErrorType,\n  ContractFunctionZeroDataError,\n  type ContractFunctionZeroDataErrorType,\n  RawContractError,\n} from '../../errors/contract.js'\nimport { InternalRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nconst EXECUTION_REVERTED_ERROR_CODE = 3\n\nexport type GetContractErrorReturnType<cause = ErrorType> = Omit<\n  ContractFunctionExecutionErrorType,\n  'cause'\n> & {\n  cause:\n    | cause\n    | ContractFunctionZeroDataErrorType\n    | ContractFunctionRevertedErrorType\n}\n\nexport function getContractError<err extends ErrorType<string>>(\n  err: err,\n  {\n    abi,\n    address,\n    args,\n    docsPath,\n    functionName,\n    sender,\n  }: {\n    abi: Abi\n    args: any\n    address?: Address | undefined\n    docsPath?: string | undefined\n    functionName: string\n    sender?: Address | undefined\n  },\n): GetContractErrorReturnType {\n  const { code, data, message, shortMessage } = (\n    err instanceof RawContractError\n      ? err\n      : err instanceof BaseError\n        ? err.walk((err) => 'data' in (err as Error)) || err.walk()\n        : {}\n  ) as RawContractError\n\n  const cause = (() => {\n    if (err instanceof AbiDecodingZeroDataError)\n      return new ContractFunctionZeroDataError({ functionName })\n    if (\n      [EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) &&\n      (data || message || shortMessage)\n    ) {\n      return new ContractFunctionRevertedError({\n        abi,\n        data: typeof data === 'object' ? data.data : data,\n        functionName,\n        message: shortMessage ?? message,\n      })\n    }\n    return err\n  })()\n\n  return new ContractFunctionExecutionError(cause as BaseError, {\n    abi,\n    args,\n    contractAddress: address,\n    docsPath,\n    functionName,\n    sender,\n  }) as GetContractErrorReturnType\n}\n","import type { Abi } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n  ContractFunctionReturnType,\n} from '../../types/contract.js'\nimport type { UnionEvaluate } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type ReadContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = UnionEvaluate<\n  Pick<CallParameters, 'account' | 'blockNumber' | 'blockTag' | 'stateOverride'>\n> &\n  ContractFunctionParameters<abi, 'pure' | 'view', functionName, args>\n\nexport type ReadContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ContractFunctionReturnType<abi, 'pure' | 'view', functionName, args>\n\nexport type ReadContractErrorType = GetContractErrorReturnType<\n  CallErrorType | EncodeFunctionDataErrorType | DecodeFunctionResultErrorType\n>\n\n/**\n * Calls a read-only function on a contract, and returns the response.\n *\n * - Docs: https://viem.sh/docs/contract/readContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/reading-contracts\n *\n * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link ReadContractParameters}\n * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { readContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await readContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n *   functionName: 'balanceOf',\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n * })\n * // 424122n\n */\nexport async function readContract<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  const args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(\n  client: Client<Transport, chain>,\n  parameters: ReadContractParameters<abi, functionName, args>,\n): Promise<ReadContractReturnType<abi, functionName, args>> {\n  const { abi, address, args, functionName, ...rest } =\n    parameters as ReadContractParameters\n  const calldata = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as EncodeFunctionDataParameters)\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      ...(rest as CallParameters),\n      data: calldata,\n      to: address,\n    })\n    return decodeFunctionResult({\n      abi,\n      args,\n      functionName,\n      data: data || '0x',\n    }) as ReadContractReturnType<abi, functionName>\n  } catch (error) {\n    throw getContractError(error as BaseError, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/readContract',\n      functionName,\n    })\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type EnsAvatarInvalidMetadataErrorType =\n  EnsAvatarInvalidMetadataError & {\n    name: 'EnsAvatarInvalidMetadataError'\n  }\nexport class EnsAvatarInvalidMetadataError extends BaseError {\n  override name = 'EnsAvatarInvalidMetadataError'\n  constructor({ data }: { data: any }) {\n    super(\n      'Unable to extract image from metadata. The metadata may be malformed or invalid.',\n      {\n        metaMessages: [\n          '- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.',\n          '',\n          `Provided data: ${JSON.stringify(data)}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type EnsAvatarInvalidNftUriErrorType = EnsAvatarInvalidNftUriError & {\n  name: 'EnsAvatarInvalidNftUriError'\n}\nexport class EnsAvatarInvalidNftUriError extends BaseError {\n  override name = 'EnsAvatarInvalidNftUriError'\n  constructor({ reason }: { reason: string }) {\n    super(`ENS NFT avatar URI is invalid. ${reason}`)\n  }\n}\n\nexport type EnsAvatarUriResolutionErrorType = EnsAvatarUriResolutionError & {\n  name: 'EnsAvatarUriResolutionError'\n}\nexport class EnsAvatarUriResolutionError extends BaseError {\n  override name = 'EnsAvatarUriResolutionError'\n  constructor({ uri }: { uri: string }) {\n    super(\n      `Unable to resolve ENS avatar URI \"${uri}\". The URI may be malformed, invalid, or does not respond with a valid image.`,\n    )\n  }\n}\n\nexport type EnsAvatarUnsupportedNamespaceErrorType =\n  EnsAvatarUnsupportedNamespaceError & {\n    name: 'EnsAvatarUnsupportedNamespaceError'\n  }\nexport class EnsAvatarUnsupportedNamespaceError extends BaseError {\n  override name = 'EnsAvatarUnsupportedNamespaceError'\n  constructor({ namespace }: { namespace: string }) {\n    super(\n      `ENS NFT avatar namespace \"${namespace}\" is not supported. Must be \"erc721\" or \"erc1155\".`,\n    )\n  }\n}\n","import type { Address } from 'abitype'\n\nimport {\n  type ReadContractErrorType,\n  readContract,\n} from '../../../actions/public/readContract.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport {\n  EnsAvatarInvalidMetadataError,\n  type EnsAvatarInvalidMetadataErrorType,\n  EnsAvatarInvalidNftUriError,\n  type EnsAvatarInvalidNftUriErrorType,\n  EnsAvatarUnsupportedNamespaceError,\n  type EnsAvatarUnsupportedNamespaceErrorType,\n  EnsAvatarUriResolutionError,\n  type EnsAvatarUriResolutionErrorType,\n} from '../../../errors/ens.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\n\ntype UriItem = {\n  uri: string\n  isOnChain: boolean\n  isEncoded: boolean\n}\n\nconst networkRegex =\n  /(?<protocol>https?:\\/\\/[^\\/]*|ipfs:\\/|ipns:\\/|ar:\\/)?(?<root>\\/)?(?<subpath>ipfs\\/|ipns\\/)?(?<target>[\\w\\-.]+)(?<subtarget>\\/.*)?/\nconst ipfsHashRegex =\n  /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\\/(?<target>[\\w\\-.]+))?(?<subtarget>\\/.*)?$/\nconst base64Regex = /^data:([a-zA-Z\\-/+]*);base64,([^\"].*)/\nconst dataURIRegex = /^data:([a-zA-Z\\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/\n\nexport type IsImageUriErrorType = ErrorType\n\nexport async function isImageUri(uri: string) {\n  try {\n    const res = await fetch(uri, { method: 'HEAD' })\n    // retrieve content type header to check if content is image\n    if (res.status === 200) {\n      const contentType = res.headers.get('content-type')\n      return contentType?.startsWith('image/')\n    }\n    return false\n  } catch (error: any) {\n    // if error is not cors related then fail\n    if (typeof error === 'object' && typeof error.response !== 'undefined') {\n      return false\n    }\n    // fail in NodeJS, since the error is not cors but any other network issue\n    // biome-ignore lint/suspicious/noPrototypeBuiltins:\n    if (!globalThis.hasOwnProperty('Image')) return false\n    // in case of cors, use image api to validate if given url is an actual image\n    return new Promise((resolve) => {\n      const img = new Image()\n      img.onload = () => {\n        resolve(true)\n      }\n      img.onerror = () => {\n        resolve(false)\n      }\n      img.src = uri\n    })\n  }\n}\n\nexport type GetGatewayErrorType = ErrorType\n\nexport function getGateway(custom: string | undefined, defaultGateway: string) {\n  if (!custom) return defaultGateway\n  if (custom.endsWith('/')) return custom.slice(0, -1)\n  return custom\n}\n\nexport type ResolveAvatarUriErrorType =\n  | GetGatewayErrorType\n  | EnsAvatarUriResolutionErrorType\n  | ErrorType\n\nexport function resolveAvatarUri({\n  uri,\n  gatewayUrls,\n}: {\n  uri: string\n  gatewayUrls?: AssetGatewayUrls | undefined\n}): UriItem {\n  const isEncoded = base64Regex.test(uri)\n  if (isEncoded) return { uri, isOnChain: true, isEncoded }\n\n  const ipfsGateway = getGateway(gatewayUrls?.ipfs, 'https://ipfs.io')\n  const arweaveGateway = getGateway(gatewayUrls?.arweave, 'https://arweave.net')\n\n  const networkRegexMatch = uri.match(networkRegex)\n  const {\n    protocol,\n    subpath,\n    target,\n    subtarget = '',\n  } = networkRegexMatch?.groups || {}\n\n  const isIPNS = protocol === 'ipns:/' || subpath === 'ipns/'\n  const isIPFS =\n    protocol === 'ipfs:/' || subpath === 'ipfs/' || ipfsHashRegex.test(uri)\n\n  if (uri.startsWith('http') && !isIPNS && !isIPFS) {\n    let replacedUri = uri\n    if (gatewayUrls?.arweave)\n      replacedUri = uri.replace(/https:\\/\\/arweave.net/g, gatewayUrls?.arweave)\n    return { uri: replacedUri, isOnChain: false, isEncoded: false }\n  }\n\n  if ((isIPNS || isIPFS) && target) {\n    return {\n      uri: `${ipfsGateway}/${isIPNS ? 'ipns' : 'ipfs'}/${target}${subtarget}`,\n      isOnChain: false,\n      isEncoded: false,\n    }\n  }\n\n  if (protocol === 'ar:/' && target) {\n    return {\n      uri: `${arweaveGateway}/${target}${subtarget || ''}`,\n      isOnChain: false,\n      isEncoded: false,\n    }\n  }\n\n  let parsedUri = uri.replace(dataURIRegex, '')\n  if (parsedUri.startsWith('<svg')) {\n    // if svg, base64 encode\n    parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`\n  }\n\n  if (parsedUri.startsWith('data:') || parsedUri.startsWith('{')) {\n    return {\n      uri: parsedUri,\n      isOnChain: true,\n      isEncoded: false,\n    }\n  }\n\n  throw new EnsAvatarUriResolutionError({ uri })\n}\n\nexport type GetJsonImageErrorType =\n  | EnsAvatarInvalidMetadataErrorType\n  | ErrorType\n\nexport function getJsonImage(data: any) {\n  // validation check for json data, must include one of theses properties\n  if (\n    typeof data !== 'object' ||\n    (!('image' in data) && !('image_url' in data) && !('image_data' in data))\n  ) {\n    throw new EnsAvatarInvalidMetadataError({ data })\n  }\n\n  return data.image || data.image_url || data.image_data\n}\n\nexport type GetMetadataAvatarUriErrorType =\n  | EnsAvatarUriResolutionErrorType\n  | ParseAvatarUriErrorType\n  | GetJsonImageErrorType\n  | ErrorType\n\nexport async function getMetadataAvatarUri({\n  gatewayUrls,\n  uri,\n}: {\n  gatewayUrls?: AssetGatewayUrls | undefined\n  uri: string\n}): Promise<string> {\n  try {\n    const res = await fetch(uri).then((res) => res.json())\n    const image = await parseAvatarUri({\n      gatewayUrls,\n      uri: getJsonImage(res),\n    })\n    return image\n  } catch {\n    throw new EnsAvatarUriResolutionError({ uri })\n  }\n}\n\nexport type ParseAvatarUriErrorType =\n  | ResolveAvatarUriErrorType\n  | IsImageUriErrorType\n  | EnsAvatarUriResolutionErrorType\n  | ErrorType\n\nexport async function parseAvatarUri({\n  gatewayUrls,\n  uri,\n}: {\n  gatewayUrls?: AssetGatewayUrls | undefined\n  uri: string\n}): Promise<string> {\n  const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls })\n  if (isOnChain) return resolvedURI\n\n  // check if resolvedURI is an image, if it is return the url\n  const isImage = await isImageUri(resolvedURI)\n  if (isImage) return resolvedURI\n\n  throw new EnsAvatarUriResolutionError({ uri })\n}\n\ntype ParsedNft = {\n  chainID: number\n  namespace: string\n  contractAddress: Address\n  tokenID: string\n}\n\nexport type ParseNftUriErrorType = EnsAvatarInvalidNftUriErrorType | ErrorType\n\nexport function parseNftUri(uri_: string): ParsedNft {\n  let uri = uri_\n  // parse valid nft spec (CAIP-22/CAIP-29)\n  // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs\n  if (uri.startsWith('did:nft:')) {\n    // convert DID to CAIP\n    uri = uri.replace('did:nft:', '').replace(/_/g, '/')\n  }\n\n  const [reference, asset_namespace, tokenID] = uri.split('/')\n  const [eip_namespace, chainID] = reference.split(':')\n  const [erc_namespace, contractAddress] = asset_namespace.split(':')\n\n  if (!eip_namespace || eip_namespace.toLowerCase() !== 'eip155')\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Only EIP-155 supported' })\n  if (!chainID)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Chain ID not found' })\n  if (!contractAddress)\n    throw new EnsAvatarInvalidNftUriError({\n      reason: 'Contract address not found',\n    })\n  if (!tokenID)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Token ID not found' })\n  if (!erc_namespace)\n    throw new EnsAvatarInvalidNftUriError({ reason: 'ERC namespace not found' })\n\n  return {\n    chainID: Number.parseInt(chainID),\n    namespace: erc_namespace.toLowerCase(),\n    contractAddress: contractAddress as Address,\n    tokenID,\n  }\n}\n\nexport type GetNftTokenUriErrorType =\n  | ReadContractErrorType\n  | EnsAvatarUnsupportedNamespaceErrorType\n  | ErrorType\n\nexport async function getNftTokenUri<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { nft }: { nft: ParsedNft },\n) {\n  if (nft.namespace === 'erc721') {\n    return readContract(client, {\n      address: nft.contractAddress,\n      abi: [\n        {\n          name: 'tokenURI',\n          type: 'function',\n          stateMutability: 'view',\n          inputs: [{ name: 'tokenId', type: 'uint256' }],\n          outputs: [{ name: '', type: 'string' }],\n        },\n      ],\n      functionName: 'tokenURI',\n      args: [BigInt(nft.tokenID)],\n    })\n  }\n  if (nft.namespace === 'erc1155') {\n    return readContract(client, {\n      address: nft.contractAddress,\n      abi: [\n        {\n          name: 'uri',\n          type: 'function',\n          stateMutability: 'view',\n          inputs: [{ name: '_id', type: 'uint256' }],\n          outputs: [{ name: '', type: 'string' }],\n        },\n      ],\n      functionName: 'uri',\n      args: [BigInt(nft.tokenID)],\n    })\n  }\n  throw new EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace })\n}\n","import type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\n\nimport {\n  type GetJsonImageErrorType,\n  type GetMetadataAvatarUriErrorType,\n  type GetNftTokenUriErrorType,\n  type ParseAvatarUriErrorType,\n  type ParseNftUriErrorType,\n  type ResolveAvatarUriErrorType,\n  getJsonImage,\n  getMetadataAvatarUri,\n  getNftTokenUri,\n  parseAvatarUri,\n  parseNftUri,\n  resolveAvatarUri,\n} from './utils.js'\n\nexport type ParseAvatarRecordErrorType =\n  | ParseNftAvatarUriErrorType\n  | ParseAvatarUriErrorType\n  | ErrorType\n\n/*\n * @description Parses an ENS avatar record.\n *\n * @example\n * parseAvatarRecord('eip155:1/erc1155:0xb32979486938aa9694bfc898f35dbed459f44424/10063')\n * 'https://ipfs.io/ipfs/QmSP4nq9fnN9dAiCj42ug9Wa79rqmQerZXZch82VqpiH7U/image.gif'\n *\n * @see https://docs.ens.domains/web/avatars\n *\n */\nexport async function parseAvatarRecord<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    gatewayUrls,\n    record,\n  }: {\n    gatewayUrls?: AssetGatewayUrls | undefined\n    record: string\n  },\n): Promise<string> {\n  if (/eip155:/i.test(record))\n    return parseNftAvatarUri(client, { gatewayUrls, record })\n  return parseAvatarUri({ uri: record, gatewayUrls })\n}\n\nexport type ParseNftAvatarUriErrorType =\n  | ParseNftUriErrorType\n  | GetNftTokenUriErrorType\n  | ResolveAvatarUriErrorType\n  | ParseAvatarUriErrorType\n  | GetJsonImageErrorType\n  | GetMetadataAvatarUriErrorType\n  | ErrorType\n\nasync function parseNftAvatarUri<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    gatewayUrls,\n    record,\n  }: {\n    gatewayUrls?: AssetGatewayUrls | undefined\n    record: string\n  },\n): Promise<string> {\n  // parse NFT URI into properties\n  const nft = parseNftUri(record)\n  // fetch tokenURI from the NFT contract\n  const nftUri = await getNftTokenUri(client, { nft })\n  // resolve the URI from the fetched tokenURI\n  const {\n    uri: resolvedNftUri,\n    isOnChain,\n    isEncoded,\n  } = resolveAvatarUri({ uri: nftUri, gatewayUrls })\n\n  // if the resolved URI is on chain, return the data\n  if (\n    isOnChain &&\n    (resolvedNftUri.includes('data:application/json;base64,') ||\n      resolvedNftUri.startsWith('{'))\n  ) {\n    const encodedJson = isEncoded\n      ? // if it is encoded, decode it\n        atob(resolvedNftUri.replace('data:application/json;base64,', ''))\n      : // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)\n        resolvedNftUri\n\n    const decoded = JSON.parse(encodedJson)\n    return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls })\n  }\n\n  let uriTokenId = nft.tokenID\n  if (nft.namespace === 'erc1155')\n    uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0')\n\n  return getMetadataAvatarUri({\n    gatewayUrls,\n    uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId),\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  textResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsTextParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** ENS name to get Text for. */\n    name: string\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\n    gatewayUrls?: string[] | undefined\n    /** Text record to retrieve. */\n    key: string\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\n    strict?: boolean | undefined\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsTextReturnType = string | null\n\nexport type GetEnsTextErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | EncodeFunctionDataErrorType\n  | NamehashErrorType\n  | DecodeFunctionResultErrorType\n\n/**\n * Gets a text record for specified ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsTextParameters}\n * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsText, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const twitterRecord = await getEnsText(client, {\n *   name: normalize('wevm.eth'),\n *   key: 'com.twitter',\n * })\n * // 'wagmi_sh'\n */\nexport async function getEnsText<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    name,\n    key,\n    gatewayUrls,\n    strict,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsTextParameters,\n): Promise<GetEnsTextReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  try {\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [\n        toHex(packetToBytes(name)),\n        encodeFunctionData({\n          abi: textResolverAbi,\n          functionName: 'text',\n          args: [namehash(name), key],\n        }),\n      ],\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const res = gatewayUrls\n      ? await readContractAction({\n          ...readContractParameters,\n          args: [...readContractParameters.args, gatewayUrls],\n        })\n      : await readContractAction(readContractParameters)\n\n    if (res[0] === '0x') return null\n\n    const record = decodeFunctionResult({\n      abi: textResolverAbi,\n      functionName: 'text',\n      data: res[0],\n    })\n\n    return record === '' ? null : record\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err, 'resolve')) return null\n    throw err\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { OnResponseFn } from '../../clients/transports/fallback.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { PublicRpcSchema } from '../../types/eip1193.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Filter } from '../../types/utils.js'\n\ntype CreateFilterRequestScopeParameters = {\n  method:\n    | 'eth_newFilter'\n    | 'eth_newPendingTransactionFilter'\n    | 'eth_newBlockFilter'\n}\n\ntype FilterRpcSchema = Filter<\n  PublicRpcSchema,\n  { Method: 'eth_getFilterLogs' | 'eth_getFilterChanges' }\n>\n\ntype CreateFilterRequestScopeReturnType = (\n  id: Hex,\n) => EIP1193RequestFn<FilterRpcSchema>\n\n/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { method }: CreateFilterRequestScopeParameters,\n): CreateFilterRequestScopeReturnType {\n  const requestMap: Record<Hex, EIP1193RequestFn> = {}\n\n  if (client.transport.type === 'fallback')\n    client.transport.onResponse?.(\n      ({\n        method: method_,\n        response: id,\n        status,\n        transport,\n      }: Parameters<OnResponseFn>[0]) => {\n        if (status === 'success' && method === method_)\n          requestMap[id as Hex] = transport.request\n      },\n    )\n\n  return ((id) =>\n    requestMap[id] || client.request) as CreateFilterRequestScopeReturnType\n}\n","import { BaseError } from './base.js'\n\nexport type FilterTypeNotSupportedErrorType = FilterTypeNotSupportedError & {\n  name: 'FilterTypeNotSupportedError'\n}\nexport class FilterTypeNotSupportedError extends BaseError {\n  override name = 'FilterTypeNotSupportedError'\n  constructor(type: string) {\n    super(`Filter type \"${type}\" is not supported.`)\n  }\n}\n","import type {\n  Abi,\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  ExtractAbiEvents,\n} from 'abitype'\n\nimport {\n  AbiEventNotFoundError,\n  type AbiEventNotFoundErrorType,\n} from '../../errors/abi.js'\nimport {\n  FilterTypeNotSupportedError,\n  type FilterTypeNotSupportedErrorType,\n} from '../../errors/log.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ContractEventArgs,\n  ContractEventName,\n  EventDefinition,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type ToEventSelectorErrorType,\n  toEventSelector,\n} from '../hash/toEventSelector.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/encodeEventTopics'\n\nexport type EncodeEventTopicsParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  ///\n  hasEvents = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiEvents<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractEventArgs<\n    abi,\n    eventName extends ContractEventName<abi>\n      ? eventName\n      : ContractEventName<abi>\n  >,\n  allErrorNames = ContractEventName<abi>,\n> = {\n  abi: abi\n  args?: allArgs | undefined\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { eventName?: eventName | allErrorNames | undefined }\n      : { eventName: eventName | allErrorNames }\n    : { eventName?: eventName | allErrorNames | undefined }\n> &\n  (hasEvents extends true ? unknown : never)\n\nexport type EncodeEventTopicsErrorType =\n  | AbiEventNotFoundErrorType\n  | EncodeArgErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToEventSelectorErrorType\n  | ErrorType\n\nexport function encodeEventTopics<\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n>(parameters: EncodeEventTopicsParameters<abi, eventName>) {\n  const { abi, eventName, args } = parameters as EncodeEventTopicsParameters\n\n  let abiItem = abi[0]\n  if (eventName) {\n    const item = getAbiItem({ abi, name: eventName })\n    if (!item) throw new AbiEventNotFoundError(eventName, { docsPath })\n    abiItem = item\n  }\n\n  if (abiItem.type !== 'event')\n    throw new AbiEventNotFoundError(undefined, { docsPath })\n\n  const definition = formatAbiItem(abiItem)\n  const signature = toEventSelector(definition as EventDefinition)\n\n  let topics: Hex[] = []\n  if (args && 'inputs' in abiItem) {\n    const indexedInputs = abiItem.inputs?.filter(\n      (param) => 'indexed' in param && param.indexed,\n    )\n    const args_ = Array.isArray(args)\n      ? args\n      : Object.values(args).length > 0\n        ? indexedInputs?.map((x: any) => (args as any)[x.name]) ?? []\n        : []\n\n    if (args_.length > 0) {\n      topics =\n        indexedInputs?.map((param, i) =>\n          Array.isArray(args_[i])\n            ? args_[i].map((_: any, j: number) =>\n                encodeArg({ param, value: args_[i][j] }),\n              )\n            : args_[i]\n              ? encodeArg({ param, value: args_[i] })\n              : null,\n        ) ?? []\n    }\n  }\n  return [signature, ...topics]\n}\n\nexport type EncodeArgErrorType =\n  | Keccak256ErrorType\n  | ToBytesErrorType\n  | EncodeAbiParametersErrorType\n  | FilterTypeNotSupportedErrorType\n  | ErrorType\n\nfunction encodeArg({\n  param,\n  value,\n}: { param: AbiParameter; value: AbiParameterToPrimitiveType<AbiParameter> }) {\n  if (param.type === 'string' || param.type === 'bytes')\n    return keccak256(toBytes(value as string))\n  if (param.type === 'tuple' || param.type.match(/^(.*)\\[(\\d+)?\\]$/))\n    throw new FilterTypeNotSupportedError(param.type)\n  return encodeAbiParameters([param], [value])\n}\n","import type { Abi, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateContractEventFilterParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  args extends\n    | MaybeExtractEventArgsFromAbi<abi, eventName>\n    | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  address?: Address | Address[] | undefined\n  abi: abi\n  eventName?: eventName | ContractEventName<abi> | undefined\n  fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments in the event ABI item.\n   * @default false\n   */\n  strict?: strict | boolean | undefined\n  toBlock?: toBlock | BlockNumber | BlockTag | undefined\n} & (undefined extends eventName\n  ? {\n      args?: never | undefined\n    }\n  : MaybeExtractEventArgsFromAbi<abi, eventName> extends infer TEventFilterArgs\n    ? {\n        args?:\n          | TEventFilterArgs\n          | (args extends TEventFilterArgs ? args : never)\n          | undefined\n      }\n    : {\n        args?: never | undefined\n      })\n\nexport type CreateContractEventFilterReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  args extends\n    | MaybeExtractEventArgsFromAbi<abi, eventName>\n    | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = Filter<'event', abi, eventName, args, strict, fromBlock, toBlock>\n\nexport type CreateContractEventFilterErrorType =\n  | EncodeEventTopicsErrorType\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n *\n * - Docs: https://viem.sh/docs/contract/createContractEventFilter\n *\n * @param client - Client to use\n * @param parameters - {@link CreateContractEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n * })\n */\nexport async function createContractEventFilter<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined,\n  args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: CreateContractEventFilterParameters<\n    abi,\n    eventName,\n    args,\n    strict,\n    fromBlock,\n    toBlock\n  >,\n): Promise<\n  CreateContractEventFilterReturnType<\n    abi,\n    eventName,\n    args,\n    strict,\n    fromBlock,\n    toBlock\n  >\n> {\n  const { address, abi, args, eventName, fromBlock, strict, toBlock } =\n    parameters as CreateContractEventFilterParameters\n\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newFilter',\n  })\n\n  const topics = eventName\n    ? encodeEventTopics({\n        abi,\n        args,\n        eventName,\n      } as unknown as EncodeEventTopicsParameters)\n    : undefined\n  const id: Hex = await client.request({\n    method: 'eth_newFilter',\n    params: [\n      {\n        address,\n        fromBlock:\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        topics,\n      },\n    ],\n  })\n\n  return {\n    abi,\n    args,\n    eventName,\n    id,\n    request: getRequest(id),\n    strict: Boolean(strict),\n    type: 'event',\n  } as unknown as CreateContractEventFilterReturnType<\n    abi,\n    eventName,\n    args,\n    strict,\n    fromBlock,\n    toBlock\n  >\n}\n","import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hex, LogTopic } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateEventFilterParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Args extends\n    | MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n    | undefined = undefined,\n> = {\n  address?: Address | Address[] | undefined\n  fromBlock?: TFromBlock | BlockNumber | BlockTag | undefined\n  toBlock?: TToBlock | BlockNumber | BlockTag | undefined\n} & (MaybeExtractEventArgsFromAbi<\n  TAbiEvents,\n  _EventName\n> extends infer TEventFilterArgs\n  ?\n      | {\n          args:\n            | TEventFilterArgs\n            | (_Args extends TEventFilterArgs ? _Args : never)\n          event: TAbiEvent\n          events?: never | undefined\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: TStrict | undefined\n        }\n      | {\n          args?: never | undefined\n          event?: TAbiEvent | undefined\n          events?: never | undefined\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: TStrict | undefined\n        }\n      | {\n          args?: never | undefined\n          event?: never | undefined\n          events: TAbiEvents | undefined\n          /**\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n           * @default false\n           */\n          strict?: TStrict | undefined\n        }\n      | {\n          args?: never | undefined\n          event?: never | undefined\n          events?: never | undefined\n          strict?: never | undefined\n        }\n  : {\n      args?: never | undefined\n      event?: never | undefined\n      events?: never | undefined\n      strict?: never | undefined\n    })\n\nexport type CreateEventFilterReturnType<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Args extends\n    | MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n    | undefined = undefined,\n> = Prettify<\n  Filter<'event', TAbiEvents, _EventName, _Args, TStrict, TFromBlock, TToBlock>\n>\n\nexport type CreateEventFilterErrorType =\n  | EncodeEventTopicsErrorType\n  | RequestErrorType\n  | NumberToHexErrorType\n  | ErrorType\n\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createEventFilter\n * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\n *\n * @param client - Client to use\n * @param parameters - {@link CreateEventFilterParameters}\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * })\n */\nexport async function createEventFilter<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber<bigint> | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber<bigint> | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Args extends\n    | MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n    | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    args,\n    event,\n    events: events_,\n    fromBlock,\n    strict,\n    toBlock,\n  }: CreateEventFilterParameters<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock,\n    _EventName,\n    _Args\n  > = {} as any,\n): Promise<\n  CreateEventFilterReturnType<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock,\n    _EventName,\n    _Args\n  >\n> {\n  const events = events_ ?? (event ? [event] : undefined)\n\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newFilter',\n  })\n\n  let topics: LogTopic[] = []\n  if (events) {\n    topics = [\n      (events as AbiEvent[]).flatMap((event) =>\n        encodeEventTopics({\n          abi: [event],\n          eventName: (event as AbiEvent).name,\n          args,\n        } as EncodeEventTopicsParameters),\n      ),\n    ]\n    if (event) topics = topics[0] as LogTopic[]\n  }\n\n  const id: Hex = await client.request({\n    method: 'eth_newFilter',\n    params: [\n      {\n        address,\n        fromBlock:\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        ...(topics.length ? { topics } : {}),\n      },\n    ],\n  })\n\n  return {\n    abi: events,\n    args,\n    eventName: event ? (event as AbiEvent).name : undefined,\n    fromBlock,\n    id,\n    request: getRequest(id),\n    strict: Boolean(strict),\n    toBlock,\n    type: 'event',\n  } as unknown as CreateEventFilterReturnType<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock,\n    _EventName,\n    _Args\n  >\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreatePendingTransactionFilterReturnType = Filter<'transaction'>\n\nexport type CreatePendingTransactionFilterErrorType =\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\n * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n */\nexport async function createPendingTransactionFilter<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n>(\n  client: Client<TTransport, TChain>,\n): Promise<CreatePendingTransactionFilterReturnType> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newPendingTransactionFilter',\n  })\n  const id = await client.request({\n    method: 'eth_newPendingTransactionFilter',\n  })\n  return { id, request: getRequest(id), type: 'transaction' }\n}\n","import type { Account } from '../accounts/types.js'\nimport type { EstimateGasParameters } from '../actions/public/estimateGas.js'\nimport type { Chain } from '../types/chain.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\nimport { prettyPrint } from './transaction.js'\n\nexport type EstimateGasExecutionErrorType = EstimateGasExecutionError & {\n  name: 'EstimateGasExecutionError'\n}\nexport class EstimateGasExecutionError extends BaseError {\n  override cause: BaseError\n\n  override name = 'EstimateGasExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      account,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    }: Omit<EstimateGasParameters<any>, 'account'> & {\n      account?: Account | undefined\n      chain?: Chain | undefined\n      docsPath?: string | undefined\n    },\n  ) {\n    const prettyArgs = prettyPrint({\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Estimate Gas Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n    })\n    this.cause = cause\n  }\n}\n","import { formatGwei } from '../utils/unit/formatGwei.js'\nimport { BaseError } from './base.js'\n\nexport type BaseFeeScalarErrorType = BaseFeeScalarError & {\n  name: 'BaseFeeScalarError'\n}\nexport class BaseFeeScalarError extends BaseError {\n  override name = 'BaseFeeScalarError'\n  constructor() {\n    super('`baseFeeMultiplier` must be greater than 1.')\n  }\n}\n\nexport type Eip1559FeesNotSupportedErrorType = Eip1559FeesNotSupportedError & {\n  name: 'Eip1559FeesNotSupportedError'\n}\nexport class Eip1559FeesNotSupportedError extends BaseError {\n  override name = 'Eip1559FeesNotSupportedError'\n  constructor() {\n    super('Chain does not support EIP-1559 fees.')\n  }\n}\n\nexport type MaxFeePerGasTooLowErrorType = MaxFeePerGasTooLowError & {\n  name: 'MaxFeePerGasTooLowError'\n}\nexport class MaxFeePerGasTooLowError extends BaseError {\n  override name = 'MaxFeePerGasTooLowError'\n  constructor({ maxPriorityFeePerGas }: { maxPriorityFeePerGas: bigint }) {\n    super(\n      `\\`maxFeePerGas\\` cannot be less than the \\`maxPriorityFeePerGas\\` (${formatGwei(\n        maxPriorityFeePerGas,\n      )} gwei).`,\n    )\n  }\n}\n","import type { Hash } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type BlockNotFoundErrorType = BlockNotFoundError & {\n  name: 'BlockNotFoundError'\n}\nexport class BlockNotFoundError extends BaseError {\n  override name = 'BlockNotFoundError'\n  constructor({\n    blockHash,\n    blockNumber,\n  }: {\n    blockHash?: Hash | undefined\n    blockNumber?: bigint | undefined\n  }) {\n    let identifier = 'Block'\n    if (blockHash) identifier = `Block at hash \"${blockHash}\"`\n    if (blockNumber) identifier = `Block at number \"${blockNumber}\"`\n    super(`${identifier} could not be found.`)\n  }\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  BlockNotFoundError,\n  type BlockNotFoundErrorType,\n} from '../../errors/block.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcBlock } from '../../types/rpc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedBlock,\n  formatBlock,\n} from '../../utils/formatters/block.js'\n\nexport type GetBlockParameters<\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = {\n  /** Whether or not to include transaction data in the response. */\n  includeTransactions?: TIncludeTransactions | undefined\n} & (\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash | undefined\n      blockNumber?: never | undefined\n      blockTag?: never | undefined\n    }\n  | {\n      blockHash?: never | undefined\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: never | undefined\n    }\n  | {\n      blockHash?: never | undefined\n      blockNumber?: never | undefined\n      /**\n       * The block tag.\n       * @default 'latest'\n       */\n      blockTag?: TBlockTag | BlockTag | undefined\n    }\n)\n\nexport type GetBlockReturnType<\n  TChain extends Chain | undefined = undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = Prettify<FormattedBlock<TChain, TIncludeTransactions, TBlockTag>>\n\nexport type GetBlockErrorType =\n  | BlockNotFoundErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns information about a block at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlock\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockParameters}\n * @returns Information about the block. {@link GetBlockReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlock } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getBlock(client)\n */\nexport async function getBlock<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag: blockTag_,\n    includeTransactions: includeTransactions_,\n  }: GetBlockParameters<TIncludeTransactions, TBlockTag> = {},\n): Promise<GetBlockReturnType<TChain, TIncludeTransactions, TBlockTag>> {\n  const blockTag = blockTag_ ?? 'latest'\n  const includeTransactions = includeTransactions_ ?? false\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let block: RpcBlock | null = null\n  if (blockHash) {\n    block = await client.request({\n      method: 'eth_getBlockByHash',\n      params: [blockHash, includeTransactions],\n    })\n  } else {\n    block = await client.request({\n      method: 'eth_getBlockByNumber',\n      params: [blockNumberHex || blockTag, includeTransactions],\n    })\n  }\n\n  if (!block) throw new BlockNotFoundError({ blockHash, blockNumber })\n\n  const format = client.chain?.formatters?.block?.format || formatBlock\n  return format(block)\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetGasPriceReturnType = bigint\n\nexport type GetGasPriceErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the current price of gas (in wei).\n *\n * - Docs: https://viem.sh/docs/actions/public/getGasPrice\n * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\n *\n * @param client - Client to use\n * @returns The gas price (in wei). {@link GetGasPriceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getGasPrice } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasPrice = await getGasPrice(client)\n */\nexport async function getGasPrice<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(client: Client<Transport, TChain, TAccount>): Promise<GetGasPriceReturnType> {\n  const gasPrice = await client.request({\n    method: 'eth_gasPrice',\n  })\n  return BigInt(gasPrice)\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n} from '../../errors/fee.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type { Chain, ChainFeesFnParameters } from '../../types/chain.js'\nimport type { GetChainParameter } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToBigIntErrorType,\n  hexToBigInt,\n} from '../../utils/encoding/fromHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport { type GetBlockErrorType, getBlock } from './getBlock.js'\nimport { type GetGasPriceErrorType, getGasPrice } from './getGasPrice.js'\n\nexport type EstimateMaxPriorityFeePerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n> = GetChainParameter<chain, chainOverride>\n\nexport type EstimateMaxPriorityFeePerGasReturnType = bigint\n\nexport type EstimateMaxPriorityFeePerGasErrorType =\n  | GetBlockErrorType\n  | HexToBigIntErrorType\n  | RequestErrorType\n  | GetBlockErrorType\n  | GetGasPriceErrorType\n  | Eip1559FeesNotSupportedErrorType\n  | ErrorType\n\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args?:\n    | EstimateMaxPriorityFeePerGasParameters<chain, chainOverride>\n    | undefined,\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  return internal_estimateMaxPriorityFeePerGas(client, args as any)\n}\n\nexport async function internal_estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args: EstimateMaxPriorityFeePerGasParameters<chain, chainOverride> & {\n    block?: Block | undefined\n    request?:\n      | PrepareTransactionRequestParameters<\n          chain,\n          Account | undefined,\n          chainOverride\n        >\n      | undefined\n  },\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  const { block: block_, chain = client.chain, request } = args || {}\n  if (typeof chain?.fees?.defaultPriorityFee === 'function') {\n    const block = block_ || (await getAction(client, getBlock, 'getBlock')({}))\n    return chain.fees.defaultPriorityFee({\n      block,\n      client,\n      request,\n    } as ChainFeesFnParameters)\n  }\n\n  if (typeof chain?.fees?.defaultPriorityFee !== 'undefined')\n    return chain?.fees?.defaultPriorityFee\n\n  try {\n    const maxPriorityFeePerGasHex = await client.request({\n      method: 'eth_maxPriorityFeePerGas',\n    })\n    return hexToBigInt(maxPriorityFeePerGasHex)\n  } catch {\n    // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n    // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n    // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n    const [block, gasPrice] = await Promise.all([\n      block_\n        ? Promise.resolve(block_)\n        : getAction(client, getBlock, 'getBlock')({}),\n      getAction(client, getGasPrice, 'getGasPrice')({}),\n    ])\n\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas\n\n    if (maxPriorityFeePerGas < 0n) return 0n\n    return maxPriorityFeePerGas\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  BaseFeeScalarError,\n  type BaseFeeScalarErrorType,\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n} from '../../errors/fee.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Block } from '../../types/block.js'\nimport type {\n  Chain,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainFeesFnParameters,\n  GetChainParameter,\n} from '../../types/chain.js'\nimport type {\n  FeeValuesEIP1559,\n  FeeValuesLegacy,\n  FeeValuesType,\n} from '../../types/fee.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport {\n  type EstimateMaxPriorityFeePerGasErrorType,\n  internal_estimateMaxPriorityFeePerGas,\n} from './estimateMaxPriorityFeePerGas.js'\nimport { getBlock } from './getBlock.js'\nimport { type GetGasPriceErrorType, getGasPrice } from './getGasPrice.js'\n\nexport type EstimateFeesPerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  type extends FeeValuesType = FeeValuesType,\n> = {\n  /**\n   * The type of fee values to return.\n   *\n   * - `legacy`: Returns the legacy gas price.\n   * - `eip1559`: Returns the max fee per gas and max priority fee per gas.\n   *\n   * @default 'eip1559'\n   */\n  type?: type | FeeValuesType | undefined\n} & GetChainParameter<chain, chainOverride>\n\nexport type EstimateFeesPerGasReturnType<\n  type extends FeeValuesType = FeeValuesType,\n> =\n  | (type extends 'legacy' ? FeeValuesLegacy : never)\n  | (type extends 'eip1559' ? FeeValuesEIP1559 : never)\n\nexport type EstimateFeesPerGasErrorType =\n  | BaseFeeScalarErrorType\n  | EstimateMaxPriorityFeePerGasErrorType\n  | GetGasPriceErrorType\n  | Eip1559FeesNotSupportedErrorType\n  | ErrorType\n\n/**\n * Returns an estimate for the fees per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.estimateFeesPerGas`](/docs/clients/chains#fees-estimatefeespergas) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateFeesPerGasParameters}\n * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateFeesPerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateFeesPerGas(client)\n * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n */\nexport async function estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args?: EstimateFeesPerGasParameters<chain, chainOverride, type> | undefined,\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  return internal_estimateFeesPerGas(client, args as any)\n}\n\nexport async function internal_estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args: EstimateFeesPerGasParameters<chain, chainOverride, type> & {\n    block?: Block | undefined\n    request?: PrepareTransactionRequestParameters | undefined\n  },\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  const {\n    block: block_,\n    chain = client.chain,\n    request,\n    type = 'eip1559',\n  } = args || {}\n\n  const baseFeeMultiplier = await (async () => {\n    if (typeof chain?.fees?.baseFeeMultiplier === 'function')\n      return chain.fees.baseFeeMultiplier({\n        block: block_ as Block,\n        client,\n        request,\n      } as ChainFeesFnParameters)\n    return chain?.fees?.baseFeeMultiplier ?? 1.2\n  })()\n  if (baseFeeMultiplier < 1) throw new BaseFeeScalarError()\n\n  const decimals = baseFeeMultiplier.toString().split('.')[1]?.length ?? 0\n  const denominator = 10 ** decimals\n  const multiply = (base: bigint) =>\n    (base * BigInt(Math.ceil(baseFeeMultiplier * denominator))) /\n    BigInt(denominator)\n\n  const block = block_\n    ? block_\n    : await getAction(client, getBlock, 'getBlock')({})\n\n  if (typeof chain?.fees?.estimateFeesPerGas === 'function') {\n    const fees = (await chain.fees.estimateFeesPerGas({\n      block: block_ as Block,\n      client,\n      multiply,\n      request,\n      type,\n    } as ChainEstimateFeesPerGasFnParameters)) as unknown as EstimateFeesPerGasReturnType<type>\n\n    if (fees !== null) return fees\n  }\n\n  if (type === 'eip1559') {\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas =\n      typeof request?.maxPriorityFeePerGas === 'bigint'\n        ? request.maxPriorityFeePerGas\n        : await internal_estimateMaxPriorityFeePerGas(\n            client as Client<Transport, Chain>,\n            {\n              block: block as Block,\n              chain,\n              request,\n            },\n          )\n\n    const baseFeePerGas = multiply(block.baseFeePerGas)\n    const maxFeePerGas =\n      request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    } as EstimateFeesPerGasReturnType<type>\n  }\n\n  const gasPrice =\n    request?.gasPrice ??\n    multiply(await getAction(client, getGasPrice, 'getGasPrice')({}))\n  return {\n    gasPrice,\n  } as EstimateFeesPerGasReturnType<type>\n}\n","import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetTransactionCountParameters = {\n  /** The account address. */\n  address: Address\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: never | undefined\n    }\n  | {\n      blockNumber?: never | undefined\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag | undefined\n    }\n)\nexport type GetTransactionCountReturnType = number\n\nexport type GetTransactionCountErrorType =\n  | RequestErrorType\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\n/**\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has broadcast / sent.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionCountParameters}\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionCount = await getTransactionCount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function getTransactionCount<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  { address, blockTag = 'latest', blockNumber }: GetTransactionCountParameters,\n): Promise<GetTransactionCountReturnType> {\n  const count = await client.request({\n    method: 'eth_getTransactionCount',\n    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag],\n  })\n  return hexToNumber(count)\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\n\nexport type GetChainIdReturnType = number\n\nexport type GetChainIdErrorType =\n  | HexToNumberErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the chain ID associated with the current network.\n *\n * - Docs: https://viem.sh/docs/actions/public/getChainId\n * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n *\n * @param client - Client to use\n * @returns The current chain ID. {@link GetChainIdReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getChainId } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const chainId = await getChainId(client)\n * // 1\n */\nexport async function getChainId<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(client: Client<Transport, TChain, TAccount>): Promise<GetChainIdReturnType> {\n  const chainIdHex = await client.request({\n    method: 'eth_chainId',\n  })\n  return hexToNumber(chainIdHex)\n}\n","import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport {\n  type EstimateFeesPerGasErrorType,\n  internal_estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type GetBlockErrorType,\n  getBlock as getBlock_,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetTransactionCountErrorType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { AccountNotFoundErrorType } from '../../errors/account.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  MaxFeePerGasTooLowError,\n} from '../../errors/fee.js'\nimport type { DeriveAccount, GetAccountParameter } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type { GetChainParameter } from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type {\n  TransactionRequest,\n  TransactionRequestEIP1559,\n  TransactionRequestEIP2930,\n  TransactionRequestEIP4844,\n  TransactionRequestLegacy,\n  TransactionSerializable,\n} from '../../types/transaction.js'\nimport type {\n  ExactPartial,\n  IsNever,\n  Prettify,\n  UnionOmit,\n  UnionRequiredBy,\n} from '../../types/utils.js'\nimport { blobsToCommitments } from '../../utils/blob/blobsToCommitments.js'\nimport { blobsToProofs } from '../../utils/blob/blobsToProofs.js'\nimport { commitmentsToVersionedHashes } from '../../utils/blob/commitmentsToVersionedHashes.js'\nimport { toBlobSidecars } from '../../utils/blob/toBlobSidecars.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type GetTransactionType,\n  getTransactionType,\n} from '../../utils/transaction/getTransactionType.js'\nimport { getChainId } from '../public/getChainId.js'\n\nexport const defaultParameters = [\n  'blobVersionedHashes',\n  'chainId',\n  'fees',\n  'gas',\n  'nonce',\n  'type',\n] as const\n\nexport type PrepareTransactionRequestParameterType =\n  | 'blobVersionedHashes'\n  | 'chainId'\n  | 'fees'\n  | 'gas'\n  | 'nonce'\n  | 'sidecars'\n  | 'type'\ntype ParameterTypeToParameters<\n  parameterType extends PrepareTransactionRequestParameterType,\n> = parameterType extends 'fees'\n  ? 'maxFeePerGas' | 'maxPriorityFeePerGas' | 'gasPrice'\n  : parameterType\n\nexport type PrepareTransactionRequestRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetTransactionRequestKzgParameter & {\n    parameters?: readonly PrepareTransactionRequestParameterType[] | undefined\n  }\n\nexport type PrepareTransactionRequestParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  request extends PrepareTransactionRequestRequest<\n    chain,\n    chainOverride\n  > = PrepareTransactionRequestRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account, accountOverride, false> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request> & { chainId?: number | undefined }\n\nexport type PrepareTransactionRequestReturnType_<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  ///\n  _derivedAccount extends Account | Address | undefined = DeriveAccount<\n    account,\n    accountOverride\n  >,\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetChainParameter<chain, chainOverride> &\n  (_derivedAccount extends Account\n    ? { account: _derivedAccount; from: Address }\n    : { account?: undefined; from?: undefined })\n\nexport type PrepareTransactionRequestReturnType<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  request extends PrepareTransactionRequestRequest<\n    chain,\n    chainOverride\n  > = PrepareTransactionRequestRequest<chain, chainOverride>,\n  ///\n  _derivedAccount extends Account | Address | undefined = DeriveAccount<\n    account,\n    accountOverride\n  >,\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n  _transactionType = request['type'] extends string | undefined\n    ? request['type']\n    : GetTransactionType<request> extends 'legacy'\n      ? unknown\n      : GetTransactionType<request>,\n  _transactionRequest extends TransactionRequest =\n    | (_transactionType extends 'legacy' ? TransactionRequestLegacy : never)\n    | (_transactionType extends 'eip1559' ? TransactionRequestEIP1559 : never)\n    | (_transactionType extends 'eip2930' ? TransactionRequestEIP2930 : never)\n    | (_transactionType extends 'eip4844' ? TransactionRequestEIP4844 : never),\n> = Prettify<\n  UnionRequiredBy<\n    Extract<\n      UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n        (_derivedChain extends Chain\n          ? { chain: _derivedChain }\n          : { chain?: undefined }) &\n        (_derivedAccount extends Account\n          ? { account: _derivedAccount; from: Address }\n          : { account?: undefined; from?: undefined }),\n      IsNever<_transactionRequest> extends true\n        ? unknown\n        : ExactPartial<_transactionRequest>\n    > & { chainId?: number | undefined },\n    ParameterTypeToParameters<\n      request['parameters'] extends readonly PrepareTransactionRequestParameterType[]\n        ? request['parameters'][number]\n        : (typeof defaultParameters)[number]\n    >\n  > &\n    (unknown extends request['kzg'] ? {} : Pick<request, 'kzg'>)\n>\n\nexport type PrepareTransactionRequestErrorType =\n  | AccountNotFoundErrorType\n  | AssertRequestErrorType\n  | ParseAccountErrorType\n  | GetBlockErrorType\n  | GetTransactionCountErrorType\n  | EstimateGasErrorType\n  | EstimateFeesPerGasErrorType\n\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const request extends PrepareTransactionRequestRequest<chain, chainOverride>,\n  accountOverride extends Account | Address | undefined = undefined,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: PrepareTransactionRequestParameters<\n    chain,\n    account,\n    chainOverride,\n    accountOverride,\n    request\n  >,\n): Promise<\n  PrepareTransactionRequestReturnType<\n    chain,\n    account,\n    chainOverride,\n    accountOverride,\n    request\n  >\n> {\n  const {\n    account: account_ = client.account,\n    blobs,\n    chain,\n    chainId,\n    gas,\n    kzg,\n    nonce,\n    parameters = defaultParameters,\n    type,\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  const request = { ...args, ...(account ? { from: account?.address } : {}) }\n\n  let block: Block | undefined\n  async function getBlock(): Promise<Block> {\n    if (block) return block\n    block = await getAction(\n      client,\n      getBlock_,\n      'getBlock',\n    )({ blockTag: 'latest' })\n    return block\n  }\n\n  if (\n    (parameters.includes('blobVersionedHashes') ||\n      parameters.includes('sidecars')) &&\n    blobs &&\n    kzg\n  ) {\n    const commitments = blobsToCommitments({ blobs, kzg })\n\n    if (parameters.includes('blobVersionedHashes')) {\n      const versionedHashes = commitmentsToVersionedHashes({\n        commitments,\n        to: 'hex',\n      })\n      request.blobVersionedHashes = versionedHashes\n    }\n    if (parameters.includes('sidecars')) {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      const sidecars = toBlobSidecars({\n        blobs,\n        commitments,\n        proofs,\n        to: 'hex',\n      })\n      request.sidecars = sidecars\n    }\n  }\n\n  if (parameters.includes('chainId')) {\n    if (chain) request.chainId = chain.id\n    else if (typeof chainId !== 'undefined') request.chainId = chainId\n    else request.chainId = await getAction(client, getChainId, 'getChainId')({})\n  }\n\n  if (parameters.includes('nonce') && typeof nonce === 'undefined' && account)\n    request.nonce = await getAction(\n      client,\n      getTransactionCount,\n      'getTransactionCount',\n    )({\n      address: account.address,\n      blockTag: 'pending',\n    })\n\n  if (\n    (parameters.includes('fees') || parameters.includes('type')) &&\n    typeof type === 'undefined'\n  ) {\n    try {\n      request.type = getTransactionType(\n        request as TransactionSerializable,\n      ) as any\n    } catch {\n      // infer type from block\n      const block = await getBlock()\n      request.type =\n        typeof block?.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy'\n    }\n  }\n\n  if (parameters.includes('fees')) {\n    // TODO(4844): derive blob base fees once https://github.com/ethereum/execution-apis/pull/486 is merged.\n\n    if (request.type !== 'legacy' && request.type !== 'eip2930') {\n      // EIP-1559 fees\n      if (\n        typeof request.maxFeePerGas === 'undefined' ||\n        typeof request.maxPriorityFeePerGas === 'undefined'\n      ) {\n        const block = await getBlock()\n        const { maxFeePerGas, maxPriorityFeePerGas } =\n          await internal_estimateFeesPerGas(client, {\n            block: block as Block,\n            chain,\n            request: request as PrepareTransactionRequestParameters,\n          })\n\n        if (\n          typeof args.maxPriorityFeePerGas === 'undefined' &&\n          args.maxFeePerGas &&\n          args.maxFeePerGas < maxPriorityFeePerGas\n        )\n          throw new MaxFeePerGasTooLowError({\n            maxPriorityFeePerGas,\n          })\n\n        request.maxPriorityFeePerGas = maxPriorityFeePerGas\n        request.maxFeePerGas = maxFeePerGas\n      }\n    } else {\n      // Legacy fees\n      if (\n        typeof args.maxFeePerGas !== 'undefined' ||\n        typeof args.maxPriorityFeePerGas !== 'undefined'\n      )\n        throw new Eip1559FeesNotSupportedError()\n\n      const block = await getBlock()\n      const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(\n        client,\n        {\n          block: block as Block,\n          chain,\n          request: request as PrepareTransactionRequestParameters,\n          type: 'legacy',\n        },\n      )\n      request.gasPrice = gasPrice_\n    }\n  }\n\n  if (parameters.includes('gas') && typeof gas === 'undefined')\n    request.gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      ...request,\n      account: account\n        ? { address: account.address, type: 'json-rpc' }\n        : undefined,\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  delete request.parameters\n\n  return request as any\n}\n","import type { Address } from 'abitype'\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { StateOverride } from '../../types/stateOverride.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetEstimateGasErrorReturnType,\n  getEstimateGasError,\n} from '../../utils/errors/getEstimateGasError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { serializeStateOverride } from '../../utils/stateOverride.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  prepareTransactionRequest,\n} from '../wallet/prepareTransactionRequest.js'\n\nexport type FormattedEstimateGas<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type EstimateGasParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<FormattedEstimateGas<TChain>, 'from'> & {\n  account?: Account | Address | undefined\n  stateOverride?: StateOverride | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: never | undefined\n      }\n    | {\n        blockNumber?: never | undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\n\nexport type EstimateGasReturnType = bigint\n\nexport type EstimateGasErrorType = GetEstimateGasErrorReturnType<\n  | ParseAccountErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | AssertRequestErrorType\n>\n\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: EstimateGasParameters<TChain>,\n): Promise<EstimateGasReturnType> {\n  const account_ = args.account ?? client.account\n  const account = account_ ? parseAccount(account_) : undefined\n\n  try {\n    const {\n      accessList,\n      blobs,\n      blobVersionedHashes,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      stateOverride,\n      ...rest\n    } = (await prepareTransactionRequest(client, {\n      ...args,\n      parameters:\n        // Some RPC Providers do not compute versioned hashes from blobs. We will need\n        // to compute them.\n        account?.type === 'local' ? undefined : ['blobVersionedHashes'],\n    } as PrepareTransactionRequestParameters)) as EstimateGasParameters\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const rpcStateOverride = serializeStateOverride(stateOverride)\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      blobs,\n      blobVersionedHashes,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    const balance = await client.request({\n      method: 'eth_estimateGas',\n      params: rpcStateOverride\n        ? [request, block ?? 'latest', rpcStateOverride]\n        : block\n          ? [request, block]\n          : [request],\n    })\n    return BigInt(balance)\n  } catch (err) {\n    throw getEstimateGasError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { EstimateGasParameters } from '../../actions/public/estimateGas.js'\nimport type { BaseError } from '../../errors/base.js'\nimport {\n  EstimateGasExecutionError,\n  type EstimateGasExecutionErrorType,\n} from '../../errors/estimateGas.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetEstimateGasErrorReturnType<cause = ErrorType> = Omit<\n  EstimateGasExecutionErrorType,\n  'cause'\n> & { cause: cause | GetNodeErrorReturnType }\n\nexport function getEstimateGasError<err extends ErrorType<string>>(\n  err: err,\n  {\n    docsPath,\n    ...args\n  }: Omit<EstimateGasParameters, 'account'> & {\n    account?: Account | undefined\n    chain?: Chain | undefined\n    docsPath?: string | undefined\n  },\n): GetEstimateGasErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new EstimateGasExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetEstimateGasErrorReturnType<err>\n}\n","import type { ErrorType } from '../../errors/utils.js'\n\nexport const promiseCache = /*#__PURE__*/ new Map()\nexport const responseCache = /*#__PURE__*/ new Map()\n\nexport type GetCacheErrorType = ErrorType\n\nexport function getCache<TData>(cacheKey: string) {\n  const buildCache = <TData>(cacheKey: string, cache: Map<string, TData>) => ({\n    clear: () => cache.delete(cacheKey),\n    get: () => cache.get(cacheKey),\n    set: (data: TData) => cache.set(cacheKey, data),\n  })\n\n  const promise = buildCache<Promise<TData>>(cacheKey, promiseCache)\n  const response = buildCache<{ created: Date; data: TData }>(\n    cacheKey,\n    responseCache,\n  )\n\n  return {\n    clear: () => {\n      promise.clear()\n      response.clear()\n    },\n    promise,\n    response,\n  }\n}\n\nexport type WithCacheParameters = {\n  /** The key to cache the data against. */\n  cacheKey: string\n  /** The time that cached data will remain in memory. Default: Infinity (no expiry) */\n  cacheTime?: number | undefined\n}\n\n/**\n * @description Returns the result of a given promise, and caches the result for\n * subsequent invocations against a provided cache key.\n */\nexport async function withCache<TData>(\n  fn: () => Promise<TData>,\n  { cacheKey, cacheTime = Number.POSITIVE_INFINITY }: WithCacheParameters,\n) {\n  const cache = getCache<TData>(cacheKey)\n\n  // If a response exists in the cache, and it's not expired, return it\n  // and do not invoke the promise.\n  // If the max age is 0, the cache is disabled.\n  const response = cache.response.get()\n  if (response && cacheTime > 0) {\n    const age = new Date().getTime() - response.created.getTime()\n    if (age < cacheTime) return response.data\n  }\n\n  let promise = cache.promise.get()\n  if (!promise) {\n    promise = fn()\n\n    // Store the promise in the cache so that subsequent invocations\n    // will wait for the same promise to resolve (deduping).\n    cache.promise.set(promise)\n  }\n\n  try {\n    const data = await promise\n\n    // Store the response in the cache so that subsequent invocations\n    // will return the same response.\n    cache.response.set({ created: new Date(), data })\n\n    return data\n  } finally {\n    // Clear the promise cache so that subsequent invocations will\n    // invoke the promise again.\n    cache.promise.clear()\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { getCache, withCache } from '../../utils/promise/withCache.js'\n\nexport type GetBlockNumberParameters = {\n  /** Time (in ms) that cached block number will remain in memory. */\n  cacheTime?: number | undefined\n}\n\nexport type GetBlockNumberReturnType = bigint\n\nexport type GetBlockNumberErrorType = RequestErrorType | ErrorType\n\nconst cacheKey = (id: string) => `blockNumber.${id}`\n\nexport function getBlockNumberCache(id: string) {\n  return getCache(cacheKey(id))\n}\n\n/**\n * Returns the number of the most recent block seen.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockNumber\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\n * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockNumberParameters}\n * @returns The number of the block. {@link GetBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockNumber } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blockNumber = await getBlockNumber(client)\n * // 69420n\n */\nexport async function getBlockNumber<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { cacheTime = client.cacheTime }: GetBlockNumberParameters = {},\n): Promise<GetBlockNumberReturnType> {\n  const blockNumberHex = await withCache(\n    () =>\n      client.request({\n        method: 'eth_blockNumber',\n      }),\n    { cacheKey: cacheKey(client.uid), cacheTime },\n  )\n  return BigInt(blockNumberHex)\n}\n","import type { Abi, AbiParameter } from 'abitype'\n\nimport {\n  AbiDecodingDataSizeTooSmallError,\n  type AbiDecodingDataSizeTooSmallErrorType,\n  AbiEventSignatureEmptyTopicsError,\n  type AbiEventSignatureEmptyTopicsErrorType,\n  AbiEventSignatureNotFoundError,\n  type AbiEventSignatureNotFoundErrorType,\n  DecodeLogDataMismatch,\n  type DecodeLogDataMismatchErrorType,\n  DecodeLogTopicsMismatch,\n  type DecodeLogTopicsMismatchErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ContractEventArgsFromTopics,\n  ContractEventName,\n  EventDefinition,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type {\n  IsNarrowable,\n  Prettify,\n  UnionEvaluate,\n} from '../../types/utils.js'\nimport { size } from '../data/size.js'\nimport {\n  type ToEventSelectorErrorType,\n  toEventSelector,\n} from '../hash/toEventSelector.js'\n\nimport { PositionOutOfBoundsError } from '../../errors/cursor.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\n\nexport type DecodeEventLogParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  topics extends Hex[] = Hex[],\n  data extends Hex | undefined = undefined,\n  strict extends boolean = true,\n> = {\n  abi: abi\n  data?: data | undefined\n  eventName?: eventName | ContractEventName<abi> | undefined\n  strict?: strict | boolean | undefined\n  topics: [signature: Hex, ...args: topics] | []\n}\n\nexport type DecodeEventLogReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  topics extends Hex[] = Hex[],\n  data extends Hex | undefined = undefined,\n  strict extends boolean = true,\n  ///\n  allEventNames extends\n    ContractEventName<abi> = eventName extends ContractEventName<abi>\n    ? eventName\n    : ContractEventName<abi>,\n> = IsNarrowable<abi, Abi> extends true\n  ? {\n      [name in allEventNames]: Prettify<\n        {\n          eventName: name\n        } & UnionEvaluate<\n          ContractEventArgsFromTopics<abi, name, strict> extends infer allArgs\n            ? topics extends readonly []\n              ? data extends undefined\n                ? { args?: undefined }\n                : { args?: allArgs | undefined }\n              : { args: allArgs }\n            : never\n        >\n      >\n    }[allEventNames]\n  : {\n      eventName: eventName\n      args: readonly unknown[] | undefined\n    }\n\nexport type DecodeEventLogErrorType =\n  | AbiDecodingDataSizeTooSmallErrorType\n  | AbiEventSignatureEmptyTopicsErrorType\n  | AbiEventSignatureNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | DecodeLogTopicsMismatchErrorType\n  | DecodeLogDataMismatchErrorType\n  | FormatAbiItemErrorType\n  | ToEventSelectorErrorType\n  | ErrorType\n\nconst docsPath = '/docs/contract/decodeEventLog'\n\nexport function decodeEventLog<\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  topics extends Hex[] = Hex[],\n  data extends Hex | undefined = undefined,\n  strict extends boolean = true,\n>(\n  parameters: DecodeEventLogParameters<abi, eventName, topics, data, strict>,\n): DecodeEventLogReturnType<abi, eventName, topics, data, strict> {\n  const {\n    abi,\n    data,\n    strict: strict_,\n    topics,\n  } = parameters as DecodeEventLogParameters\n\n  const strict = strict_ ?? true\n  const [signature, ...argTopics] = topics\n  if (!signature) throw new AbiEventSignatureEmptyTopicsError({ docsPath })\n\n  const abiItem = abi.find(\n    (x) =>\n      x.type === 'event' &&\n      signature === toEventSelector(formatAbiItem(x) as EventDefinition),\n  )\n  if (!(abiItem && 'name' in abiItem) || abiItem.type !== 'event')\n    throw new AbiEventSignatureNotFoundError(signature, { docsPath })\n\n  const { name, inputs } = abiItem\n  const isUnnamed = inputs?.some((x) => !('name' in x && x.name))\n\n  let args: any = isUnnamed ? [] : {}\n\n  // Decode topics (indexed args).\n  const indexedInputs = inputs.filter((x) => 'indexed' in x && x.indexed)\n  for (let i = 0; i < indexedInputs.length; i++) {\n    const param = indexedInputs[i]\n    const topic = argTopics[i]\n    if (!topic)\n      throw new DecodeLogTopicsMismatch({\n        abiItem,\n        param: param as AbiParameter & { indexed: boolean },\n      })\n    args[isUnnamed ? i : param.name || i] = decodeTopic({ param, value: topic })\n  }\n\n  // Decode data (non-indexed args).\n  const nonIndexedInputs = inputs.filter((x) => !('indexed' in x && x.indexed))\n  if (nonIndexedInputs.length > 0) {\n    if (data && data !== '0x') {\n      try {\n        const decodedData = decodeAbiParameters(nonIndexedInputs, data)\n        if (decodedData) {\n          if (isUnnamed) args = [...args, ...decodedData]\n          else {\n            for (let i = 0; i < nonIndexedInputs.length; i++) {\n              args[nonIndexedInputs[i].name!] = decodedData[i]\n            }\n          }\n        }\n      } catch (err) {\n        if (strict) {\n          if (\n            err instanceof AbiDecodingDataSizeTooSmallError ||\n            err instanceof PositionOutOfBoundsError\n          )\n            throw new DecodeLogDataMismatch({\n              abiItem,\n              data: data,\n              params: nonIndexedInputs,\n              size: size(data),\n            })\n          throw err\n        }\n      }\n    } else if (strict) {\n      throw new DecodeLogDataMismatch({\n        abiItem,\n        data: '0x',\n        params: nonIndexedInputs,\n        size: 0,\n      })\n    }\n  }\n\n  return {\n    eventName: name,\n    args: Object.values(args).length > 0 ? args : undefined,\n  } as unknown as DecodeEventLogReturnType<abi, eventName, topics, data, strict>\n}\n\nfunction decodeTopic({ param, value }: { param: AbiParameter; value: Hex }) {\n  if (\n    param.type === 'string' ||\n    param.type === 'bytes' ||\n    param.type === 'tuple' ||\n    param.type.match(/^(.*)\\[(\\d+)?\\]$/)\n  )\n    return value\n  const decodedArg = decodeAbiParameters([param], value) || []\n  return decodedArg[0]\n}\n","// TODO(v3): checksum address.\n\nimport type { Abi } from 'abitype'\nimport {\n  AbiEventSignatureNotFoundError,\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ContractEventName } from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport {\n  type DecodeEventLogErrorType,\n  decodeEventLog,\n} from './decodeEventLog.js'\n\nexport type ParseEventLogsParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends\n    | ContractEventName<abi>\n    | ContractEventName<abi>[]\n    | undefined = ContractEventName<abi>,\n  strict extends boolean | undefined = boolean | undefined,\n> = {\n  /** Contract ABI. */\n  abi: abi\n  /** Contract event. */\n  eventName?:\n    | eventName\n    | ContractEventName<abi>\n    | ContractEventName<abi>[]\n    | undefined\n  /** List of logs. */\n  logs: (Log | RpcLog)[]\n  strict?: strict | boolean | undefined\n}\n\nexport type ParseEventLogsReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends\n    | ContractEventName<abi>\n    | ContractEventName<abi>[]\n    | undefined = ContractEventName<abi>,\n  strict extends boolean | undefined = boolean | undefined,\n  ///\n  derivedEventName extends\n    | ContractEventName<abi>\n    | undefined = eventName extends ContractEventName<abi>[]\n    ? eventName[number]\n    : eventName,\n> = Log<bigint, number, false, undefined, strict, abi, derivedEventName>[]\n\nexport type ParseEventLogsErrorType = DecodeEventLogErrorType | ErrorType\n\n/**\n * Extracts & decodes logs matching the provided signature(s) (`abi` + optional `eventName`)\n * from a set of opaque logs.\n *\n * @param parameters - {@link ParseEventLogsParameters}\n * @returns The logs. {@link ParseEventLogsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { parseEventLogs } from 'viem/op-stack'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const receipt = await getTransactionReceipt(client, {\n *   hash: '0xec23b2ba4bc59ba61554507c1b1bc91649e6586eb2dd00c728e8ed0db8bb37ea',\n * })\n *\n * const logs = parseEventLogs({ logs: receipt.logs })\n * // [{ args: { ... }, eventName: 'TransactionDeposited', ... }, ...]\n */\nexport function parseEventLogs<\n  abi extends Abi | readonly unknown[],\n  strict extends boolean | undefined = true,\n  eventName extends\n    | ContractEventName<abi>\n    | ContractEventName<abi>[]\n    | undefined = undefined,\n>({\n  abi,\n  eventName,\n  logs,\n  strict = true,\n}: ParseEventLogsParameters<abi, eventName, strict>): ParseEventLogsReturnType<\n  abi,\n  eventName,\n  strict\n> {\n  return logs\n    .map((log) => {\n      try {\n        const event = decodeEventLog({\n          ...log,\n          abi,\n          strict,\n        })\n        if (eventName && !eventName.includes(event.eventName!)) return null\n        return { ...event, ...log }\n      } catch (err) {\n        let eventName: string | undefined\n        let isUnnamed: boolean | undefined\n\n        if (err instanceof AbiEventSignatureNotFoundError) return null\n        if (\n          err instanceof DecodeLogDataMismatch ||\n          err instanceof DecodeLogTopicsMismatch\n        ) {\n          // If strict mode is on, and log data/topics do not match event definition, skip.\n          if (strict) return null\n          eventName = err.abiItem.name\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\n        }\n\n        // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n        return { ...log, args: isUnnamed ? [] : {}, eventName }\n      }\n    })\n    .filter(Boolean) as unknown as ParseEventLogsReturnType<\n    abi,\n    eventName,\n    strict\n  >\n}\n","import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash, LogTopic } from '../../types/misc.js'\nimport type { RpcLog } from '../../types/rpc.js'\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetLogsParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = {\n  /** Address or list of addresses from which logs originated */\n  address?: Address | Address[] | undefined\n} & (\n  | {\n      event: TAbiEvent\n      events?: never | undefined\n      args?: MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName> | undefined\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict | undefined\n    }\n  | {\n      event?: never | undefined\n      events: TAbiEvents\n      args?: never | undefined\n      /**\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n       * @default false\n       */\n      strict?: TStrict | undefined\n    }\n  | {\n      event?: never | undefined\n      events?: never | undefined\n      args?: never | undefined\n      strict?: never | undefined\n    }\n) &\n  (\n    | {\n        /** Block number or tag after which to include logs */\n        fromBlock?: TFromBlock | BlockNumber | BlockTag | undefined\n        /** Block number or tag before which to include logs */\n        toBlock?: TToBlock | BlockNumber | BlockTag | undefined\n        blockHash?: never | undefined\n      }\n    | {\n        fromBlock?: never | undefined\n        toBlock?: never | undefined\n        /** Hash of block to include logs from */\n        blockHash?: Hash | undefined\n      }\n  )\n\nexport type GetLogsReturnType<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, TAbiEvent, TStrict, TAbiEvents, _EventName>[]\n\nexport type GetLogsErrorType =\n  | DecodeEventLogErrorType\n  | EncodeEventTopicsErrorType\n  | FormatLogErrorType\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs matching the provided parameters.\n *\n * - Docs: https://viem.sh/docs/actions/public/getLogs\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetLogsParameters}\n * @returns A list of event logs. {@link GetLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getLogs(client)\n */\nexport async function getLogs<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockHash,\n    fromBlock,\n    toBlock,\n    event,\n    events: events_,\n    args,\n    strict: strict_,\n  }: GetLogsParameters<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  > = {},\n): Promise<\n  GetLogsReturnType<TAbiEvent, TAbiEvents, TStrict, TFromBlock, TToBlock>\n> {\n  const strict = strict_ ?? false\n  const events = events_ ?? (event ? [event] : undefined)\n\n  let topics: LogTopic[] = []\n  if (events) {\n    topics = [\n      (events as AbiEvent[]).flatMap((event) =>\n        encodeEventTopics({\n          abi: [event],\n          eventName: (event as AbiEvent).name,\n          args,\n        } as EncodeEventTopicsParameters),\n      ),\n    ]\n    if (event) topics = topics[0] as LogTopic[]\n  }\n\n  let logs: RpcLog[]\n  if (blockHash) {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [{ address, topics, blockHash }],\n    })\n  } else {\n    logs = await client.request({\n      method: 'eth_getLogs',\n      params: [\n        {\n          address,\n          topics,\n          fromBlock:\n            typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\n          toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\n        },\n      ],\n    })\n  }\n\n  const formattedLogs = logs.map((log) => formatLog(log))\n  if (!events)\n    return formattedLogs as GetLogsReturnType<\n      TAbiEvent,\n      TAbiEvents,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n  return parseEventLogs({\n    abi: events,\n    logs: formattedLogs,\n    strict,\n  }) as unknown as GetLogsReturnType<\n    TAbiEvent,\n    TAbiEvents,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { Abi, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractEventArgs,\n  ContractEventName,\n} from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash } from '../../types/misc.js'\nimport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  getAbiItem,\n} from '../../utils/abi/getAbiItem.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type GetLogsErrorType,\n  type GetLogsParameters,\n  getLogs,\n} from './getLogs.js'\n\nexport type GetContractEventsParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined =\n    | ContractEventName<abi>\n    | undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[] | undefined\n  /** Contract ABI. */\n  abi: abi\n  args?:\n    | ContractEventArgs<\n        abi,\n        eventName extends ContractEventName<abi>\n          ? eventName\n          : ContractEventName<abi>\n      >\n    | undefined\n  /** Contract event. */\n  eventName?: eventName | ContractEventName<abi> | undefined\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: strict | boolean | undefined\n} & (\n  | {\n      /** Block number or tag after which to include logs */\n      fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\n      /** Block number or tag before which to include logs */\n      toBlock?: toBlock | BlockNumber | BlockTag | undefined\n      blockHash?: undefined\n    }\n  | {\n      fromBlock?: undefined\n      toBlock?: undefined\n      /** Hash of block to include logs from */\n      blockHash?: Hash | undefined\n    }\n)\n\nexport type GetContractEventsReturnType<\n  abi extends Abi | readonly unknown[] = readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined =\n    | ContractEventName<abi>\n    | undefined,\n  strict extends boolean | undefined = undefined,\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  ///\n  isPending extends boolean =\n    | (fromBlock extends 'pending' ? true : false)\n    | (toBlock extends 'pending' ? true : false),\n> = Log<bigint, number, isPending, undefined, strict, abi, eventName>[]\n\nexport type GetContractEventsErrorType =\n  | GetAbiItemErrorType\n  | GetLogsErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs emitted by a contract.\n *\n * - Docs: https://viem.sh/docs/actions/public/getContractEvents\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetContractEventsParameters}\n * @returns A list of event logs. {@link GetContractEventsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getContractEvents } from 'viem/public'\n * import { wagmiAbi } from './abi'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getContractEvents(client, {\n *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *  abi: wagmiAbi,\n *  eventName: 'Transfer'\n * })\n */\nexport async function getContractEvents<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: GetContractEventsParameters<\n    abi,\n    eventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >,\n): Promise<\n  GetContractEventsReturnType<abi, eventName, TStrict, TFromBlock, TToBlock>\n> {\n  const {\n    abi,\n    address,\n    args,\n    blockHash,\n    eventName,\n    fromBlock,\n    toBlock,\n    strict,\n  } = parameters\n  const event = eventName\n    ? getAbiItem({ abi, name: eventName } as GetAbiItemParameters)\n    : undefined\n  const events = !event\n    ? (abi as Abi).filter((x) => x.type === 'event')\n    : undefined\n  return getAction(\n    client,\n    getLogs,\n    'getLogs',\n  )({\n    address,\n    args,\n    blockHash,\n    event,\n    events,\n    fromBlock,\n    toBlock,\n    strict,\n  } as {} as GetLogsParameters) as unknown as GetContractEventsReturnType<\n    abi,\n    eventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { FeeHistory } from '../../types/fee.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatFeeHistoryErrorType,\n  formatFeeHistory,\n} from '../../utils/formatters/feeHistory.js'\n\nexport type GetFeeHistoryParameters = {\n  /**\n   * Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n   */\n  blockCount: number\n  /**\n   * A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.\n   */\n  rewardPercentiles: number[]\n} & (\n  | {\n      blockNumber?: never | undefined\n      /**\n       * Highest number block of the requested range.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag | undefined\n    }\n  | {\n      /** Highest number block of the requested range. */\n      blockNumber?: bigint | undefined\n      blockTag?: never | undefined\n    }\n)\nexport type GetFeeHistoryReturnType = FeeHistory\n\nexport type GetFeeHistoryErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | FormatFeeHistoryErrorType\n\n/**\n * Returns a collection of historical gas information.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\n * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n *\n * @param client - Client to use\n * @param parameters - {@link GetFeeHistoryParameters}\n * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getFeeHistory } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const feeHistory = await getFeeHistory(client, {\n *   blockCount: 4,\n *   rewardPercentiles: [25, 75],\n * })\n */\nexport async function getFeeHistory<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockCount,\n    blockNumber,\n    blockTag = 'latest',\n    rewardPercentiles,\n  }: GetFeeHistoryParameters,\n): Promise<GetFeeHistoryReturnType> {\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n  const feeHistory = await client.request({\n    method: 'eth_feeHistory',\n    params: [\n      numberToHex(blockCount),\n      blockNumberHex || blockTag,\n      rewardPercentiles,\n    ],\n  })\n  return formatFeeHistory(feeHistory)\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { FeeHistory } from '../../types/fee.js'\nimport type { RpcFeeHistory } from '../../types/rpc.js'\n\nexport type FormatFeeHistoryErrorType = ErrorType\n\nexport function formatFeeHistory(feeHistory: RpcFeeHistory): FeeHistory {\n  return {\n    baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),\n    gasUsedRatio: feeHistory.gasUsedRatio,\n    oldestBlock: BigInt(feeHistory.oldestBlock),\n    reward: feeHistory.reward?.map((reward) =>\n      reward.map((value) => BigInt(value)),\n    ),\n  }\n}\n","import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcLog } from '../../index.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter, FilterType } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetFilterChangesParameters<\n  TFilterType extends FilterType = FilterType,\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  filter: Filter<\n    TFilterType,\n    TAbi,\n    TEventName,\n    any,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n\nexport type GetFilterChangesReturnType<\n  TFilterType extends FilterType = FilterType,\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _AbiEvent extends AbiEvent | undefined = TAbi extends Abi\n    ? TEventName extends string\n      ? ExtractAbiEvent<TAbi, TEventName>\n      : undefined\n    : undefined,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = TFilterType extends 'event'\n  ? Log<bigint, number, _Pending, _AbiEvent, TStrict, TAbi, TEventName>[]\n  : Hash[]\n\nexport type GetFilterChangesErrorType =\n  | RequestErrorType\n  | DecodeEventLogErrorType\n  | FormatLogErrorType\n  | ErrorType\n\n/**\n * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterChanges\n * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n *\n * A Filter can be created from the following actions:\n *\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n *\n * Depending on the type of filter, the return value will be different:\n *\n * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterChangesParameters}\n * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n *\n * @example\n * // Blocks\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n *\n * @example\n * // Contract Events\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n *   eventName: 'Transfer',\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Raw Events\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Transactions\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n */\nexport async function getFilterChanges<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n  TFilterType extends FilterType,\n  const TAbi extends Abi | readonly unknown[] | undefined,\n  TEventName extends string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  _client: Client<TTransport, TChain>,\n  {\n    filter,\n  }: GetFilterChangesParameters<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >,\n): Promise<\n  GetFilterChangesReturnType<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n> {\n  const strict = 'strict' in filter && filter.strict\n\n  const logs = await filter.request({\n    method: 'eth_getFilterChanges',\n    params: [filter.id],\n  })\n\n  if (typeof logs[0] === 'string')\n    return logs as GetFilterChangesReturnType<\n      TFilterType,\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n\n  const formattedLogs = logs.map((log) => formatLog(log as RpcLog))\n  if (!('abi' in filter) || !filter.abi)\n    return formattedLogs as GetFilterChangesReturnType<\n      TFilterType,\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n  return parseEventLogs({\n    abi: filter.abi,\n    logs: formattedLogs,\n    strict,\n  }) as unknown as GetFilterChangesReturnType<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { Address } from 'abitype'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Proof } from '../../types/proof.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormatProofErrorType,\n  formatProof,\n} from '../../utils/formatters/proof.js'\n\nexport type GetProofParameters = {\n  /** Account address. */\n  address: Address\n  /** Array of storage-keys that should be proofed and included. */\n  storageKeys: Hash[]\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: never | undefined\n    }\n  | {\n      blockNumber?: never | undefined\n      /**\n       * The block tag.\n       * @default 'latest'\n       */\n      blockTag?: BlockTag | undefined\n    }\n)\n\nexport type GetProofReturnType = Proof\n\nexport type GetProofErrorType =\n  | NumberToHexErrorType\n  | FormatProofErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the account and storage values of the specified account including the Merkle-proof.\n *\n * - Docs: https://viem.sh/docs/actions/public/getProof\n * - JSON-RPC Methods:\n *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n *\n * @param client - Client to use\n * @param parameters - {@link GetProofParameters}\n * @returns Proof data. {@link GetProofReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getProof } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getProof(client, {\n *  address: '0x...',\n *  storageKeys: ['0x...'],\n * })\n */\nexport async function getProof<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockNumber,\n    blockTag: blockTag_,\n    storageKeys,\n  }: GetProofParameters,\n): Promise<GetProofReturnType> {\n  const blockTag = blockTag_ ?? 'latest'\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  const proof = await client.request({\n    method: 'eth_getProof',\n    params: [address, storageKeys, blockNumberHex || blockTag],\n  })\n\n  return formatProof(proof)\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Proof } from '../../types/proof.js'\nimport type { RpcProof } from '../../types/rpc.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { hexToNumber } from '../index.js'\n\nexport type FormatProofErrorType = ErrorType\n\nfunction formatStorageProof(storageProof: RpcProof['storageProof']) {\n  return storageProof.map((proof) => ({\n    ...proof,\n    value: BigInt(proof.value),\n  }))\n}\n\nexport function formatProof(proof: ExactPartial<RpcProof>) {\n  return {\n    ...proof,\n    balance: proof.balance ? BigInt(proof.balance) : undefined,\n    nonce: proof.nonce ? hexToNumber(proof.nonce) : undefined,\n    storageProof: proof.storageProof\n      ? formatStorageProof(proof.storageProof)\n      : undefined,\n  } as Proof\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { TransactionNotFoundError } from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcTransaction } from '../../types/rpc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\n\nexport type GetTransactionParameters<TBlockTag extends BlockTag = 'latest'> =\n  | {\n      /** The block hash */\n      blockHash: Hash\n      blockNumber?: never | undefined\n      blockTag?: never | undefined\n      hash?: never | undefined\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never | undefined\n      /** The block number */\n      blockNumber: bigint\n      blockTag?: never | undefined\n      hash?: never | undefined\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never | undefined\n      blockNumber?: never | undefined\n      /** The block tag. */\n      blockTag: TBlockTag | BlockTag\n      hash?: never | undefined\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never | undefined\n      blockNumber?: never | undefined\n      blockTag?: never | undefined\n      /** The hash of the transaction. */\n      hash: Hash\n      index?: number | undefined\n    }\n\nexport type GetTransactionReturnType<\n  TChain extends Chain | undefined = undefined,\n  TBlockTag extends BlockTag = 'latest',\n> = Prettify<FormattedTransaction<TChain, TBlockTag>>\n\nexport type GetTransactionErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms#transaction) given a hash or block identifier.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransaction\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionParameters}\n * @returns The transaction information. {@link GetTransactionReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransaction } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transaction = await getTransaction(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransaction<\n  TChain extends Chain | undefined,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<Transport, TChain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag: blockTag_,\n    hash,\n    index,\n  }: GetTransactionParameters<TBlockTag>,\n): Promise<GetTransactionReturnType<TChain, TBlockTag>> {\n  const blockTag = blockTag_ || 'latest'\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let transaction: RpcTransaction | null = null\n  if (hash) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByHash',\n      params: [hash],\n    })\n  } else if (blockHash) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByBlockHashAndIndex',\n      params: [blockHash, numberToHex(index)],\n    })\n  } else if (blockNumberHex || blockTag) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByBlockNumberAndIndex',\n      params: [blockNumberHex || blockTag, numberToHex(index)],\n    })\n  }\n\n  if (!transaction)\n    throw new TransactionNotFoundError({\n      blockHash,\n      blockNumber,\n      blockTag,\n      hash,\n      index,\n    })\n\n  const format =\n    client.chain?.formatters?.transaction?.format || formatTransaction\n  return format(transaction)\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  TransactionReceiptNotFoundError,\n  type TransactionReceiptNotFoundErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormattedTransactionReceipt,\n  formatTransactionReceipt,\n} from '../../utils/formatters/transactionReceipt.js'\n\nexport type GetTransactionReceiptParameters = {\n  /** The hash of the transaction. */\n  hash: Hash\n}\n\nexport type GetTransactionReceiptReturnType<\n  TChain extends Chain | undefined = undefined,\n> = FormattedTransactionReceipt<TChain>\n\nexport type GetTransactionReceiptErrorType =\n  | RequestErrorType\n  | TransactionReceiptNotFoundErrorType\n  | ErrorType\n\n/**\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionReceiptParameters}\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionReceipt } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await getTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionReceipt<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { hash }: GetTransactionReceiptParameters,\n) {\n  const receipt = await client.request({\n    method: 'eth_getTransactionReceipt',\n    params: [hash],\n  })\n\n  if (!receipt) throw new TransactionReceiptNotFoundError({ hash })\n\n  const format =\n    client.chain?.formatters?.transactionReceipt?.format ||\n    formatTransactionReceipt\n  return format(receipt) as GetTransactionReceiptReturnType<TChain>\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type UninstallFilterParameters = {\n  filter: Filter<any>\n}\nexport type UninstallFilterReturnType = boolean\n\nexport type UninstallFilterErrorType = RequestErrorType | ErrorType\n\n/**\n * Destroys a [`Filter`](https://viem.sh/docs/glossary/types#filter).\n *\n * - Docs: https://viem.sh/docs/actions/public/uninstallFilter\n * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\n *\n * Destroys a Filter that was created from one of the following Actions:\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n *\n * @param client - Client to use\n * @param parameters - {@link UninstallFilterParameters}\n * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\n *\n * const filter = await createPendingTransactionFilter(client)\n * const uninstalled = await uninstallFilter(client, { filter })\n * // true\n */\nexport async function uninstallFilter<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n>(\n  _client: Client<TTransport, TChain>,\n  { filter }: UninstallFilterParameters,\n): Promise<UninstallFilterReturnType> {\n  return filter.request({\n    method: 'eth_uninstallFilter',\n    params: [filter.id],\n  })\n}\n","export const presignMessagePrefix = '\\x19Ethereum Signed Message:\\n'\n","import { presignMessagePrefix } from '../../constants/strings.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport {\n  type StringToBytesErrorType,\n  type ToBytesErrorType,\n  stringToBytes,\n  toBytes,\n} from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashMessage<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type HashMessageErrorType =\n  | ConcatErrorType\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashMessage<TTo extends To = 'hex'>(\n  message: SignableMessage,\n  to_?: TTo | undefined,\n): HashMessage<TTo> {\n  const messageBytes = (() => {\n    if (typeof message === 'string') return stringToBytes(message)\n    if (message.raw instanceof Uint8Array) return message.raw\n    return toBytes(message.raw)\n  })()\n  const prefixBytes = stringToBytes(\n    `${presignMessagePrefix}${messageBytes.length}`,\n  )\n  return keccak256(concat([prefixBytes, messageBytes]), to_)\n}\n","export const universalSignatureValidatorByteCode =\n  '0x60806040523480156200001157600080fd5b50604051620007003803806200070083398101604081905262000034916200056f565b6000620000438484846200004f565b9050806000526001601ff35b600080846001600160a01b0316803b806020016040519081016040528181526000908060200190933c90507f6492649264926492649264926492649264926492649264926492649264926492620000a68462000451565b036200021f57600060608085806020019051810190620000c79190620005ce565b8651929550909350915060000362000192576000836001600160a01b031683604051620000f5919062000643565b6000604051808303816000865af19150503d806000811462000134576040519150601f19603f3d011682016040523d82523d6000602084013e62000139565b606091505b5050905080620001905760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b505b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90620001c4908b90869060040162000661565b602060405180830381865afa158015620001e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020891906200069d565b6001600160e01b031916149450505050506200044a565b805115620002b157604051630b135d3f60e11b808252906001600160a01b03871690631626ba7e9062000259908890889060040162000661565b602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d91906200069d565b6001600160e01b031916149150506200044a565b8251604114620003195760405162461bcd60e51b815260206004820152603a6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000606482015260840162000187565b620003236200046b565b506020830151604080850151855186939260009185919081106200034b576200034b620006c9565b016020015160f81c9050601b81148015906200036b57508060ff16601c14155b15620003cf5760405162461bcd60e51b815260206004820152603b6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c75650000000000606482015260840162000187565b6040805160008152602081018083528a905260ff83169181019190915260608101849052608081018390526001600160a01b038a169060019060a0016020604051602081039080840390855afa1580156200042e573d6000803e3d6000fd5b505050602060405103516001600160a01b031614955050505050505b9392505050565b60006020825110156200046357600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b03811681146200049f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004d5578181015183820152602001620004bb565b50506000910152565b600082601f830112620004f057600080fd5b81516001600160401b03808211156200050d576200050d620004a2565b604051601f8301601f19908116603f01168101908282118183101715620005385762000538620004a2565b816040528381528660208588010111156200055257600080fd5b62000565846020830160208901620004b8565b9695505050505050565b6000806000606084860312156200058557600080fd5b8351620005928162000489565b6020850151604086015191945092506001600160401b03811115620005b657600080fd5b620005c486828701620004de565b9150509250925092565b600080600060608486031215620005e457600080fd5b8351620005f18162000489565b60208501519093506001600160401b03808211156200060f57600080fd5b6200061d87838801620004de565b935060408601519150808211156200063457600080fd5b50620005c486828701620004de565b6000825162000657818460208701620004b8565b9190910192915050565b828152604060208201526000825180604084015262000688816060850160208701620004b8565b601f01601f1916919091016060019392505050565b600060208284031215620006b057600080fd5b81516001600160e01b0319811681146200044a57600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572'\n","import type { Abi } from 'abitype'\n\nimport {\n  AbiConstructorNotFoundError,\n  type AbiConstructorNotFoundErrorType,\n  AbiConstructorParamsNotFoundError,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ContractConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionEvaluate } from '../../types/utils.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\n\nconst docsPath = '/docs/contract/encodeDeployData'\n\nexport type EncodeDeployDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  ///\n  hasConstructor = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [Extract<abi[number], { type: 'constructor' }>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractConstructorArgs<abi>,\n> = {\n  abi: abi\n  bytecode: Hex\n} & UnionEvaluate<\n  readonly [] extends allArgs\n    ? { args?: allArgs | undefined }\n    : { args: allArgs }\n> &\n  (hasConstructor extends true ? unknown : never)\n\nexport type EncodeDeployDataReturnType = Hex\n\nexport type EncodeDeployDataErrorType =\n  | AbiConstructorNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | ErrorType\n\nexport function encodeDeployData<const abi extends Abi | readonly unknown[]>(\n  parameters: EncodeDeployDataParameters<abi>,\n): EncodeDeployDataReturnType {\n  const { abi, args, bytecode } = parameters as EncodeDeployDataParameters\n  if (!args || args.length === 0) return bytecode\n\n  const description = abi.find((x) => 'type' in x && x.type === 'constructor')\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\n  if (!('inputs' in description))\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n  if (!description.inputs || description.inputs.length === 0)\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n\n  const data = encodeAbiParameters(description.inputs, args)\n  return concatHex([bytecode, data!])\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalSignatureValidatorAbi } from '../../constants/abis.js'\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js'\nimport { CallExecutionError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport {\n  type EncodeDeployDataErrorType,\n  encodeDeployData,\n} from '../../utils/abi/encodeDeployData.js'\nimport {\n  type IsBytesEqualErrorType,\n  isBytesEqual,\n} from '../../utils/data/isBytesEqual.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { type ToHexErrorType, bytesToHex } from '../../utils/encoding/toHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type VerifyHashParameters = Pick<\n  CallParameters,\n  'blockNumber' | 'blockTag'\n> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The hash to be verified. */\n  hash: Hex\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray | Signature\n}\n\nexport type VerifyHashReturnType = boolean\n\nexport type VerifyHashErrorType =\n  | CallErrorType\n  | IsHexErrorType\n  | ToHexErrorType\n  | IsBytesEqualErrorType\n  | EncodeDeployDataErrorType\n  | ErrorType\n\n/**\n * Verifies a message hash onchain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, hash, signature, ...callRequest }: VerifyHashParameters,\n): Promise<VerifyHashReturnType> {\n  const signatureHex = (() => {\n    if (isHex(signature)) return signature\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature)\n      return serializeSignature(signature)\n    return bytesToHex(signature)\n  })()\n\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      data: encodeDeployData({\n        abi: universalSignatureValidatorAbi,\n        args: [address, hash, signatureHex],\n        bytecode: universalSignatureValidatorByteCode,\n      }),\n      ...callRequest,\n    } as unknown as CallParameters)\n\n    return isBytesEqual(data ?? '0x0', '0x1')\n  } catch (error) {\n    if (error instanceof CallExecutionError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false\n    }\n\n    throw error\n  }\n}\n","import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport { type HexToBigIntErrorType, hexToBigInt } from '../encoding/fromHex.js'\nimport type { ToHexErrorType } from '../encoding/toHex.js'\n\nexport type SerializeSignatureErrorType =\n  | HexToBigIntErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * serializeSignature({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   yParity: 1\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function serializeSignature({ r, s, v, yParity }: Signature): Hex {\n  const yParity_ = (() => {\n    if (yParity === 0 || yParity === 1) return yParity\n    if (v && (v === 27n || v === 28n || v >= 35n)) return v % 2n === 0n ? 1 : 0\n    throw new Error('Invalid `v` or `yParity` value')\n  })()\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${yParity_ === 0 ? '1b' : '1c'}`\n}\n","import { equalBytes } from '@noble/curves/abstract/utils'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type IsBytesEqualErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function isBytesEqual(a_: ByteArray | Hex, b_: ByteArray | Hex) {\n  const a = isHex(a_) ? toBytes(a_) : a_\n  const b = isHex(b_) ? toBytes(b_) : b_\n  return equalBytes(a, b)\n}\n","export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\n\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\n\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex =\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\n","import type { TypedData, TypedDataDomain, TypedDataParameter } from 'abitype'\n\nimport { BytesSizeMismatchError } from '../errors/abi.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport type { Hex } from '../types/misc.js'\nimport type { TypedDataDefinition } from '../types/typedData.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nimport { type SizeErrorType, size } from './data/size.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\nimport { bytesRegex, integerRegex } from './regex.js'\nimport {\n  type HashDomainErrorType,\n  hashDomain,\n} from './signature/hashTypedData.js'\n\nexport type ValidateTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function validateTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const { domain, message, primaryType, types } =\n    parameters as unknown as TypedDataDefinition\n\n  const validateData = (\n    struct: readonly TypedDataParameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [_type, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_) / 8,\n        })\n      }\n\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\n        throw new InvalidAddressError({ address: value })\n\n      const bytesMatch = type.match(bytesRegex)\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch\n        if (size_ && size(value as Hex) !== Number.parseInt(size_))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size_),\n            givenSize: size(value as Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) validateData(struct, value as Record<string, unknown>)\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) validateData(types.EIP712Domain, domain)\n\n  if (primaryType !== 'EIP712Domain') {\n    // Validate message types.\n    const type = types[primaryType]\n    validateData(type, message)\n  }\n}\n\nexport type GetTypesForEIP712DomainErrorType = ErrorType\n\nexport function getTypesForEIP712Domain({\n  domain,\n}: { domain?: TypedDataDomain | undefined }): TypedDataParameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    typeof domain?.chainId === 'number' && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as TypedDataParameter[]\n}\n\nexport type DomainSeparatorErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | ErrorType\n\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\n    },\n  })\n}\n","// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport type HashTypedDataErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | HashStructErrorType\n  | ValidateTypedDataErrorType\n  | ErrorType\n\nexport function hashTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  parameters: HashTypedDataParameters<typedData, primaryType>,\n): HashTypedDataReturnType {\n  const {\n    domain = {},\n    message,\n    primaryType,\n  } = parameters as HashTypedDataParameters\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...parameters.types,\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  })\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain')\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  return keccak256(concat(parts))\n}\n\nexport type HashDomainErrorType = HashStructErrorType | ErrorType\n\nexport function hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\ntype HashStructErrorType = EncodeDataErrorType | Keccak256ErrorType | ErrorType\n\nfunction hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\ntype EncodeDataErrorType =\n  | EncodeAbiParametersErrorType\n  | EncodeFieldErrorType\n  | HashTypeErrorType\n  | ErrorType\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\ntype HashTypeErrorType =\n  | ToHexErrorType\n  | EncodeTypeErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\ntype EncodeTypeErrorType = FindTypeDependenciesErrorType\n\nfunction encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\ntype FindTypeDependenciesErrorType = ErrorType\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\ntype EncodeFieldErrorType =\n  | Keccak256ErrorType\n  | EncodeAbiParametersErrorType\n  | ToHexErrorType\n  | ErrorType\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n","import type { ErrorType } from '../errors/utils.js'\nimport type { MaybePromise } from '../types/utils.js'\n\ntype Callback = ((...args: any[]) => any) | undefined\ntype Callbacks = Record<string, Callback>\n\nexport type ObserveErrorType = ErrorType\n\nexport const listenersCache = /*#__PURE__*/ new Map<\n  string,\n  { id: number; fns: Callbacks }[]\n>()\nexport const cleanupCache = /*#__PURE__*/ new Map<string, () => void>()\n\ntype EmitFunction<TCallbacks extends Callbacks> = (\n  emit: TCallbacks,\n) => MaybePromise<void | (() => void)>\n\nlet callbackCount = 0\n\n/**\n * @description Sets up an observer for a given function. If another function\n * is set up under the same observer id, the function will only be called once\n * for both instances of the observer.\n */\nexport function observe<TCallbacks extends Callbacks>(\n  observerId: string,\n  callbacks: TCallbacks,\n  fn: EmitFunction<TCallbacks>,\n) {\n  const callbackId = ++callbackCount\n\n  const getListeners = () => listenersCache.get(observerId) || []\n\n  const unsubscribe = () => {\n    const listeners = getListeners()\n    listenersCache.set(\n      observerId,\n      listeners.filter((cb: any) => cb.id !== callbackId),\n    )\n  }\n\n  const unwatch = () => {\n    const cleanup = cleanupCache.get(observerId)\n    if (getListeners().length === 1 && cleanup) cleanup()\n    unsubscribe()\n  }\n\n  const listeners = getListeners()\n  listenersCache.set(observerId, [\n    ...listeners,\n    { id: callbackId, fns: callbacks },\n  ])\n\n  if (listeners && listeners.length > 0) return unwatch\n\n  const emit: TCallbacks = {} as TCallbacks\n  for (const key in callbacks) {\n    emit[key] = ((\n      ...args: Parameters<NonNullable<TCallbacks[keyof TCallbacks]>>\n    ) => {\n      const listeners = getListeners()\n      if (listeners.length === 0) return\n      for (const listener of listeners) listener.fns[key]?.(...args)\n    }) as TCallbacks[Extract<keyof TCallbacks, string>]\n  }\n\n  const cleanup = fn(emit)\n  if (typeof cleanup === 'function') cleanupCache.set(observerId, cleanup)\n\n  return unwatch\n}\n","import type { ErrorType } from '../errors/utils.js'\nimport { wait } from './wait.js'\n\ntype PollOptions<TData> = {\n  // Whether or not to emit when the polling starts.\n  emitOnBegin?: boolean | undefined\n  // The initial wait time (in ms) before polling.\n  initialWaitTime?: ((data: TData | void) => Promise<number>) | undefined\n  // The interval (in ms).\n  interval: number\n}\n\nexport type PollErrorType = ErrorType\n\n/**\n * @description Polls a function at a specified interval.\n */\nexport function poll<TData>(\n  fn: ({ unpoll }: { unpoll: () => void }) => Promise<TData | void>,\n  { emitOnBegin, initialWaitTime, interval }: PollOptions<TData>,\n) {\n  let active = true\n\n  const unwatch = () => (active = false)\n\n  const watch = async () => {\n    let data: TData | void = undefined\n    if (emitOnBegin) data = await fn({ unpoll: unwatch })\n\n    const initialWait = (await initialWaitTime?.(data)) ?? interval\n    await wait(initialWait)\n\n    const poll = async () => {\n      if (!active) return\n      await fn({ unpoll: unwatch })\n      await wait(interval)\n      poll()\n    }\n\n    poll()\n  }\n  watch()\n\n  return unwatch\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { HasTransportType } from '../../types/transport.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport {\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from './getBlockNumber.js'\n\nexport type OnBlockNumberParameter = GetBlockNumberReturnType\nexport type OnBlockNumberFn = (\n  blockNumber: OnBlockNumberParameter,\n  prevBlockNumber: OnBlockNumberParameter | undefined,\n) => void\n\nexport type WatchBlockNumberParameters<\n  TTransport extends Transport = Transport,\n> = {\n  /** The callback to call when a new block number is received. */\n  onBlockNumber: OnBlockNumberFn\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n} & (\n  | (HasTransportType<TTransport, 'webSocket'> extends true\n      ? {\n          emitMissed?: undefined\n          emitOnBegin?: undefined\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false | undefined\n          pollingInterval?: undefined\n        }\n      : never)\n  | {\n      /** Whether or not to emit the missed block numbers to the callback. */\n      emitMissed?: boolean | undefined\n      /** Whether or not to emit the latest block number to the callback when the subscription opens. */\n      emitOnBegin?: boolean | undefined\n      poll?: true | undefined\n      /** Polling frequency (in ms). Defaults to Client's pollingInterval config. */\n      pollingInterval?: number | undefined\n    }\n)\n\nexport type WatchBlockNumberReturnType = () => void\n\nexport type WatchBlockNumberErrorType = PollErrorType | ErrorType\n\n/**\n * Watches and returns incoming block numbers.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlockNumberParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, watchBlockNumber, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlockNumber(client, {\n *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n * })\n */\nexport function watchBlockNumber<\n  TChain extends Chain | undefined,\n  TTransport extends Transport,\n>(\n  client: Client<TTransport, TChain>,\n  {\n    emitOnBegin = false,\n    emitMissed = false,\n    onBlockNumber,\n    onError,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlockNumberParameters<TTransport>,\n): WatchBlockNumberReturnType {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (client.transport.type === 'webSocket') return false\n    if (\n      client.transport.type === 'fallback' &&\n      client.transport.transports[0].config.type === 'webSocket'\n    )\n      return false\n    return true\n  })()\n\n  let prevBlockNumber: GetBlockNumberReturnType | undefined\n\n  const pollBlockNumber = () => {\n    const observerId = stringify([\n      'watchBlockNumber',\n      client.uid,\n      emitOnBegin,\n      emitMissed,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlockNumber, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const blockNumber = await getAction(\n              client,\n              getBlockNumber,\n              'getBlockNumber',\n            )({ cacheTime: 0 })\n\n            if (prevBlockNumber) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (blockNumber === prevBlockNumber) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (blockNumber - prevBlockNumber > 1 && emitMissed) {\n                for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {\n                  emit.onBlockNumber(i, prevBlockNumber)\n                  prevBlockNumber = i\n                }\n              }\n            }\n\n            // If the next block number is greater than the previous,\n            // it is not in the past, and we can emit the new block number.\n            if (!prevBlockNumber || blockNumber > prevBlockNumber) {\n              emit.onBlockNumber(blockNumber, prevBlockNumber)\n              prevBlockNumber = blockNumber\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlockNumber = () => {\n    const observerId = stringify([\n      'watchBlockNumber',\n      client.uid,\n      emitOnBegin,\n      emitMissed,\n    ])\n\n    return observe(observerId, { onBlockNumber, onError }, (emit) => {\n      let active = true\n      let unsubscribe = () => (active = false)\n      ;(async () => {\n        try {\n          const transport = (() => {\n            if (client.transport.type === 'fallback') {\n              const transport = client.transport.transports.find(\n                (transport: ReturnType<Transport>) =>\n                  transport.config.type === 'webSocket',\n              )\n              if (!transport) return client.transport\n              return transport.value\n            }\n            return client.transport\n          })()\n\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n            params: ['newHeads'],\n            onData(data: any) {\n              if (!active) return\n              const blockNumber = hexToBigInt(data.result?.number)\n              emit.onBlockNumber(blockNumber, prevBlockNumber)\n              prevBlockNumber = blockNumber\n            },\n            onError(error: Error) {\n              emit.onError?.(error)\n            },\n          })\n          unsubscribe = unsubscribe_\n          if (!active) unsubscribe()\n        } catch (err) {\n          onError?.(err as Error)\n        }\n      })()\n      return () => unsubscribe()\n    })\n  }\n\n  return enablePolling ? pollBlockNumber() : subscribeBlockNumber()\n}\n","import type { Address } from 'abitype'\n\nimport type { ExactPartial, Prettify } from '../../types/utils.js'\nimport type { SiweMessage } from './types.js'\n\n/**\n * @description Parses EIP-4361 formatted message into message fields object.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4361\n *\n * @returns EIP-4361 fields object\n */\nexport function parseSiweMessage(\n  message: string,\n): Prettify<ExactPartial<SiweMessage>> {\n  const { scheme, statement, ...prefix } = (message.match(prefixRegex)\n    ?.groups ?? {}) as {\n    address: Address\n    domain: string\n    scheme?: string\n    statement?: string\n  }\n  const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } =\n    (message.match(suffixRegex)?.groups ?? {}) as {\n      chainId: string\n      expirationTime?: string\n      issuedAt?: string\n      nonce: string\n      notBefore?: string\n      requestId?: string\n      uri: string\n      version: '1'\n    }\n  const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1)\n  return {\n    ...prefix,\n    ...suffix,\n    ...(chainId ? { chainId: Number(chainId) } : {}),\n    ...(expirationTime ? { expirationTime: new Date(expirationTime) } : {}),\n    ...(issuedAt ? { issuedAt: new Date(issuedAt) } : {}),\n    ...(notBefore ? { notBefore: new Date(notBefore) } : {}),\n    ...(requestId ? { requestId } : {}),\n    ...(resources ? { resources } : {}),\n    ...(scheme ? { scheme } : {}),\n    ...(statement ? { statement } : {}),\n  }\n}\n\n// https://regexr.com/80gdj\nconst prefixRegex =\n  /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/\n\n// https://regexr.com/80gf9\nconst suffixRegex =\n  /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport { parseSiweMessage } from '../../utils/siwe/parseSiweMessage.js'\nimport {\n  type ValidateSiweMessageParameters,\n  validateSiweMessage,\n} from '../../utils/siwe/validateSiweMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from '../public/verifyHash.js'\n\nexport type VerifySiweMessageParameters = Prettify<\n  Pick<VerifyHashParameters, 'blockNumber' | 'blockTag'> &\n    Pick<\n      ValidateSiweMessageParameters,\n      'address' | 'domain' | 'nonce' | 'scheme' | 'time'\n    > & {\n      /**\n       * EIP-4361 formatted message.\n       */\n      message: string\n      /**\n       * Signature to check against.\n       */\n      signature: Hex\n    }\n>\n\nexport type VerifySiweMessageReturnType = boolean\n\nexport type VerifySiweMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifySiweMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\n */\nexport async function verifySiweMessage<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: VerifySiweMessageParameters,\n): Promise<VerifySiweMessageReturnType> {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    signature,\n    time = new Date(),\n    ...callRequest\n  } = parameters\n\n  const parsed = parseSiweMessage(message)\n  if (!parsed.address) return false\n\n  const isValid = validateSiweMessage({\n    address,\n    domain,\n    message: parsed,\n    nonce,\n    scheme,\n    time,\n  })\n  if (!isValid) return false\n\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address: parsed.address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n","import type { Address } from 'abitype'\n\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddressEqual } from '../address/isAddressEqual.js'\nimport type { SiweMessage } from './types.js'\n\nexport type ValidateSiweMessageParameters = {\n  /**\n   * Ethereum address to check against.\n   */\n  address?: Address | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority to check against.\n   */\n  domain?: string | undefined\n  /**\n   * EIP-4361 message fields.\n   */\n  message: ExactPartial<SiweMessage>\n  /**\n   * Random string to check against.\n   */\n  nonce?: string | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme to check against.\n   */\n  scheme?: string | undefined\n  /**\n   * Current time to check optional `expirationTime` and `notBefore` fields.\n   *\n   * @default new Date()\n   */\n  time?: Date | undefined\n}\n\nexport type ValidateSiweMessageReturnType = boolean\n\n/**\n * @description Validates EIP-4361 message.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4361\n */\nexport function validateSiweMessage(\n  parameters: ValidateSiweMessageParameters,\n): ValidateSiweMessageReturnType {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    time = new Date(),\n  } = parameters\n\n  if (domain && message.domain !== domain) return false\n  if (nonce && message.nonce !== nonce) return false\n  if (scheme && message.scheme !== scheme) return false\n\n  if (message.expirationTime && time >= message.expirationTime) return false\n  if (message.notBefore && time < message.notBefore) return false\n\n  try {\n    if (!message.address) return false\n    if (address && !isAddressEqual(message.address, address)) return false\n  } catch {\n    return false\n  }\n\n  return true\n}\n","import type { Abi, AbiEvent, Address } from 'abitype'\n\nimport {\n  type GetEnsAddressParameters,\n  type GetEnsAddressReturnType,\n  getEnsAddress,\n} from '../../actions/ens/getEnsAddress.js'\nimport {\n  type GetEnsAvatarParameters,\n  type GetEnsAvatarReturnType,\n  getEnsAvatar,\n} from '../../actions/ens/getEnsAvatar.js'\nimport {\n  type GetEnsNameParameters,\n  type GetEnsNameReturnType,\n  getEnsName,\n} from '../../actions/ens/getEnsName.js'\nimport {\n  type GetEnsResolverParameters,\n  type GetEnsResolverReturnType,\n  getEnsResolver,\n} from '../../actions/ens/getEnsResolver.js'\nimport {\n  type GetEnsTextParameters,\n  type GetEnsTextReturnType,\n  getEnsText,\n} from '../../actions/ens/getEnsText.js'\nimport {\n  type CallParameters,\n  type CallReturnType,\n  call,\n} from '../../actions/public/call.js'\nimport {\n  type CreateBlockFilterReturnType,\n  createBlockFilter,\n} from '../../actions/public/createBlockFilter.js'\nimport {\n  type CreateContractEventFilterParameters,\n  type CreateContractEventFilterReturnType,\n  createContractEventFilter,\n} from '../../actions/public/createContractEventFilter.js'\nimport {\n  type CreateEventFilterParameters,\n  type CreateEventFilterReturnType,\n  createEventFilter,\n} from '../../actions/public/createEventFilter.js'\nimport {\n  type CreatePendingTransactionFilterReturnType,\n  createPendingTransactionFilter,\n} from '../../actions/public/createPendingTransactionFilter.js'\nimport {\n  type EstimateContractGasParameters,\n  type EstimateContractGasReturnType,\n  estimateContractGas,\n} from '../../actions/public/estimateContractGas.js'\nimport {\n  type EstimateFeesPerGasParameters,\n  type EstimateFeesPerGasReturnType,\n  estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasParameters,\n  type EstimateGasReturnType,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type EstimateMaxPriorityFeePerGasParameters,\n  type EstimateMaxPriorityFeePerGasReturnType,\n  estimateMaxPriorityFeePerGas,\n} from '../../actions/public/estimateMaxPriorityFeePerGas.js'\nimport {\n  type GetBalanceParameters,\n  type GetBalanceReturnType,\n  getBalance,\n} from '../../actions/public/getBalance.js'\nimport {\n  type GetBlobBaseFeeReturnType,\n  getBlobBaseFee,\n} from '../../actions/public/getBlobBaseFee.js'\nimport {\n  type GetBlockParameters,\n  type GetBlockReturnType,\n  getBlock,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetBlockNumberParameters,\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from '../../actions/public/getBlockNumber.js'\nimport {\n  type GetBlockTransactionCountParameters,\n  type GetBlockTransactionCountReturnType,\n  getBlockTransactionCount,\n} from '../../actions/public/getBlockTransactionCount.js'\nimport {\n  type GetBytecodeParameters,\n  type GetBytecodeReturnType,\n  getBytecode,\n} from '../../actions/public/getBytecode.js'\nimport {\n  type GetChainIdReturnType,\n  getChainId,\n} from '../../actions/public/getChainId.js'\nimport {\n  type GetContractEventsParameters,\n  type GetContractEventsReturnType,\n  getContractEvents,\n} from '../../actions/public/getContractEvents.js'\nimport {\n  type GetFeeHistoryParameters,\n  type GetFeeHistoryReturnType,\n  getFeeHistory,\n} from '../../actions/public/getFeeHistory.js'\nimport {\n  type GetFilterChangesParameters,\n  type GetFilterChangesReturnType,\n  getFilterChanges,\n} from '../../actions/public/getFilterChanges.js'\nimport {\n  type GetFilterLogsParameters,\n  type GetFilterLogsReturnType,\n  getFilterLogs,\n} from '../../actions/public/getFilterLogs.js'\nimport {\n  type GetGasPriceReturnType,\n  getGasPrice,\n} from '../../actions/public/getGasPrice.js'\nimport {\n  type GetLogsParameters,\n  type GetLogsReturnType,\n  getLogs,\n} from '../../actions/public/getLogs.js'\nimport {\n  type GetProofParameters,\n  type GetProofReturnType,\n  getProof,\n} from '../../actions/public/getProof.js'\nimport {\n  type GetStorageAtParameters,\n  type GetStorageAtReturnType,\n  getStorageAt,\n} from '../../actions/public/getStorageAt.js'\nimport {\n  type GetTransactionParameters,\n  type GetTransactionReturnType,\n  getTransaction,\n} from '../../actions/public/getTransaction.js'\nimport {\n  type GetTransactionConfirmationsParameters,\n  type GetTransactionConfirmationsReturnType,\n  getTransactionConfirmations,\n} from '../../actions/public/getTransactionConfirmations.js'\nimport {\n  type GetTransactionCountParameters,\n  type GetTransactionCountReturnType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport {\n  type GetTransactionReceiptParameters,\n  type GetTransactionReceiptReturnType,\n  getTransactionReceipt,\n} from '../../actions/public/getTransactionReceipt.js'\nimport {\n  type MulticallParameters,\n  type MulticallReturnType,\n  multicall,\n} from '../../actions/public/multicall.js'\nimport {\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from '../../actions/public/readContract.js'\nimport {\n  type SimulateContractParameters,\n  type SimulateContractReturnType,\n  simulateContract,\n} from '../../actions/public/simulateContract.js'\nimport {\n  type UninstallFilterParameters,\n  type UninstallFilterReturnType,\n  uninstallFilter,\n} from '../../actions/public/uninstallFilter.js'\nimport {\n  type VerifyMessageParameters,\n  type VerifyMessageReturnType,\n  verifyMessage,\n} from '../../actions/public/verifyMessage.js'\nimport {\n  type VerifyTypedDataParameters,\n  type VerifyTypedDataReturnType,\n  verifyTypedData,\n} from '../../actions/public/verifyTypedData.js'\nimport {\n  type WaitForTransactionReceiptParameters,\n  type WaitForTransactionReceiptReturnType,\n  waitForTransactionReceipt,\n} from '../../actions/public/waitForTransactionReceipt.js'\nimport {\n  type WatchBlockNumberParameters,\n  type WatchBlockNumberReturnType,\n  watchBlockNumber,\n} from '../../actions/public/watchBlockNumber.js'\nimport {\n  type WatchBlocksParameters,\n  type WatchBlocksReturnType,\n  watchBlocks,\n} from '../../actions/public/watchBlocks.js'\nimport {\n  type WatchContractEventParameters,\n  type WatchContractEventReturnType,\n  watchContractEvent,\n} from '../../actions/public/watchContractEvent.js'\nimport {\n  type WatchEventParameters,\n  type WatchEventReturnType,\n  watchEvent,\n} from '../../actions/public/watchEvent.js'\nimport {\n  type WatchPendingTransactionsParameters,\n  type WatchPendingTransactionsReturnType,\n  watchPendingTransactions,\n} from '../../actions/public/watchPendingTransactions.js'\nimport {\n  type VerifySiweMessageParameters,\n  type VerifySiweMessageReturnType,\n  verifySiweMessage,\n} from '../../actions/siwe/verifySiweMessage.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestRequest,\n  type PrepareTransactionRequestReturnType,\n  prepareTransactionRequest,\n} from '../../actions/wallet/prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionParameters,\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from '../../actions/wallet/sendRawTransaction.js'\nimport type { Account } from '../../types/account.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractEventName,\n  ContractFunctionArgs,\n  ContractFunctionName,\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { FeeValuesType } from '../../types/fee.js'\nimport type { FilterType } from '../../types/filter.js'\nimport type { Client } from '../createClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type PublicActions<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Executes a new message call immediately without submitting a transaction to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/call\n   * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n   *\n   * @param args - {@link CallParameters}\n   * @returns The call data. {@link CallReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const data = await client.call({\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   * })\n   */\n  call: (parameters: CallParameters<TChain>) => Promise<CallReturnType>\n  /**\n   * Creates a Filter to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createBlockFilter\n   * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n   *\n   * @returns Filter. {@link CreateBlockFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, createBlockFilter, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await createBlockFilter(client)\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n   */\n  createBlockFilter: () => Promise<CreateBlockFilterReturnType>\n  /**\n   * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n   *\n   * - Docs: https://viem.sh/docs/contract/createContractEventFilter\n   *\n   * @param args - {@link CreateContractEventFilterParameters}\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createContractEventFilter({\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n   * })\n   */\n  createContractEventFilter: <\n    const TAbi extends Abi | readonly unknown[],\n    TEventName extends ContractEventName<TAbi> | undefined,\n    TArgs extends MaybeExtractEventArgsFromAbi<TAbi, TEventName> | undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: CreateContractEventFilterParameters<\n      TAbi,\n      TEventName,\n      TArgs,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >,\n  ) => Promise<\n    CreateContractEventFilterReturnType<\n      TAbi,\n      TEventName,\n      TArgs,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n  >\n  /**\n   * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createEventFilter\n   * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\n   *\n   * @param args - {@link CreateEventFilterParameters}\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n   * })\n   */\n  createEventFilter: <\n    const TAbiEvent extends AbiEvent | undefined = undefined,\n    const TAbiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n    _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n    _Args extends\n      | MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n      | undefined = undefined,\n  >(\n    args?:\n      | CreateEventFilterParameters<\n          TAbiEvent,\n          TAbiEvents,\n          TStrict,\n          TFromBlock,\n          TToBlock,\n          _EventName,\n          _Args\n        >\n      | undefined,\n  ) => Promise<\n    CreateEventFilterReturnType<\n      TAbiEvent,\n      TAbiEvents,\n      TStrict,\n      TFromBlock,\n      TToBlock,\n      _EventName,\n      _Args\n    >\n  >\n  /**\n   * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\n   * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\n   *\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createPendingTransactionFilter()\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n   */\n  createPendingTransactionFilter: () => Promise<CreatePendingTransactionFilterReturnType>\n  /**\n   * Estimates the gas required to successfully execute a contract write function call.\n   *\n   * - Docs: https://viem.sh/docs/contract/estimateContractGas\n   *\n   * @remarks\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link EstimateContractGasParameters}\n   * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gas = await client.estimateContractGas({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint() public']),\n   *   functionName: 'mint',\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   * })\n   */\n  estimateContractGas: <\n    TChain extends Chain | undefined,\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'nonpayable' | 'payable',\n      functionName\n    >,\n  >(\n    args: EstimateContractGasParameters<abi, functionName, args, TChain>,\n  ) => Promise<EstimateContractGasReturnType>\n  /**\n   * Estimates the gas necessary to complete a transaction without submitting it to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateGas\n   * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n   *\n   * @param args - {@link EstimateGasParameters}\n   * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseEther } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gasEstimate = await client.estimateGas({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: parseEther('1'),\n   * })\n   */\n  estimateGas: (\n    args: EstimateGasParameters<TChain>,\n  ) => Promise<EstimateGasReturnType>\n  /**\n   * Returns the balance of an address in wei.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBalance\n   * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n   *\n   * @remarks\n   * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\n   *\n   * ```ts\n   * const balance = await getBalance(client, {\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   blockTag: 'safe'\n   * })\n   * const balanceAsEther = formatEther(balance)\n   * // \"6.942\"\n   * ```\n   *\n   * @param args - {@link GetBalanceParameters}\n   * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const balance = await client.getBalance({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   * // 10000000000000000000000n (wei)\n   */\n  getBalance: (args: GetBalanceParameters) => Promise<GetBalanceReturnType>\n  /**\n   * Returns the base fee per blob gas in wei.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlobBaseFee\n   * - JSON-RPC Methods: [`eth_blobBaseFee`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blobBaseFee)\n   *\n   * @param client - Client to use\n   * @returns The blob base fee (in wei). {@link GetBlobBaseFeeReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { getBlobBaseFee } from 'viem/public'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const blobBaseFee = await client.getBlobBaseFee()\n   */\n  getBlobBaseFee: () => Promise<GetBlobBaseFeeReturnType>\n  /**\n   * Returns information about a block at a block number, hash, or tag.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlock\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n   *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n   *\n   * @param args - {@link GetBlockParameters}\n   * @returns Information about the block. {@link GetBlockReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const block = await client.getBlock()\n   */\n  getBlock: <\n    TIncludeTransactions extends boolean = false,\n    TBlockTag extends BlockTag = 'latest',\n  >(\n    args?: GetBlockParameters<TIncludeTransactions, TBlockTag> | undefined,\n  ) => Promise<GetBlockReturnType<TChain, TIncludeTransactions, TBlockTag>>\n  /**\n   * Returns the number of the most recent block seen.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlockNumber\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\n   * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n   *\n   * @param args - {@link GetBlockNumberParameters}\n   * @returns The number of the block. {@link GetBlockNumberReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const blockNumber = await client.getBlockNumber()\n   * // 69420n\n   */\n  getBlockNumber: (\n    args?: GetBlockNumberParameters | undefined,\n  ) => Promise<GetBlockNumberReturnType>\n  /**\n   * Returns the number of Transactions at a block number, hash, or tag.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n   *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n   *\n   * @param args - {@link GetBlockTransactionCountParameters}\n   * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const count = await client.getBlockTransactionCount()\n   */\n  getBlockTransactionCount: (\n    args?: GetBlockTransactionCountParameters | undefined,\n  ) => Promise<GetBlockTransactionCountReturnType>\n  /**\n   * Retrieves the bytecode at an address.\n   *\n   * - Docs: https://viem.sh/docs/contract/getBytecode\n   * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n   *\n   * @param args - {@link GetBytecodeParameters}\n   * @returns The contract's bytecode. {@link GetBytecodeReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const code = await client.getBytecode({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   * })\n   */\n  getBytecode: (args: GetBytecodeParameters) => Promise<GetBytecodeReturnType>\n  /**\n   * Returns the chain ID associated with the current network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getChainId\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n   *\n   * @returns The current chain ID. {@link GetChainIdReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const chainId = await client.getChainId()\n   * // 1\n   */\n  getChainId: () => Promise<GetChainIdReturnType>\n  /**\n   * Returns a list of event logs emitted by a contract.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getContractEvents\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetContractEventsParameters}\n   * @returns A list of event logs. {@link GetContractEventsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { wagmiAbi } from './abi'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const logs = await client.getContractEvents(client, {\n   *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *  abi: wagmiAbi,\n   *  eventName: 'Transfer'\n   * })\n   */\n  getContractEvents: <\n    const abi extends Abi | readonly unknown[],\n    eventName extends ContractEventName<abi> | undefined = undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetContractEventsParameters<\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >,\n  ) => Promise<\n    GetContractEventsReturnType<abi, eventName, strict, fromBlock, toBlock>\n  >\n  /**\n   * Gets address for ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsAddressParameters}\n   * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensAddress = await client.getEnsAddress({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n   */\n  getEnsAddress: (\n    args: GetEnsAddressParameters,\n  ) => Promise<GetEnsAddressReturnType>\n  /**\n   * Gets the avatar of an ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsAvatarParameters}\n   * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensAvatar = await client.getEnsAvatar({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n   */\n  getEnsAvatar: (\n    args: GetEnsAvatarParameters,\n  ) => Promise<GetEnsAvatarReturnType>\n  /**\n   * Gets primary name for specified address.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n   *\n   * @param args - {@link GetEnsNameParameters}\n   * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensName = await client.getEnsName({\n   *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n   * })\n   * // 'wevm.eth'\n   */\n  getEnsName: (args: GetEnsNameParameters) => Promise<GetEnsNameReturnType>\n  /**\n   * Gets resolver for ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsResolverParameters}\n   * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const resolverAddress = await client.getEnsResolver({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n   */\n  getEnsResolver: (\n    args: GetEnsResolverParameters,\n  ) => Promise<GetEnsResolverReturnType>\n  /**\n   * Gets a text record for specified ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsTextParameters}\n   * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const twitterRecord = await client.getEnsText({\n   *   name: normalize('wevm.eth'),\n   *   key: 'com.twitter',\n   * })\n   * // 'wagmi_sh'\n   */\n  getEnsText: (args: GetEnsTextParameters) => Promise<GetEnsTextReturnType>\n  /**\n   * Returns a collection of historical gas information.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\n   * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n   *\n   * @param args - {@link GetFeeHistoryParameters}\n   * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const feeHistory = await client.getFeeHistory({\n   *   blockCount: 4,\n   *   rewardPercentiles: [25, 75],\n   * })\n   */\n  getFeeHistory: (\n    args: GetFeeHistoryParameters,\n  ) => Promise<GetFeeHistoryReturnType>\n  /**\n   * Returns an estimate for the fees per gas for a transaction to be included\n   * in the next block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\n   *\n   * @param client - Client to use\n   * @param parameters - {@link EstimateFeesPerGasParameters}\n   * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const maxPriorityFeePerGas = await client.estimateFeesPerGas()\n   * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n   */\n  estimateFeesPerGas: <\n    TChainOverride extends Chain | undefined = undefined,\n    TType extends FeeValuesType = 'eip1559',\n  >(\n    args?:\n      | EstimateFeesPerGasParameters<TChain, TChainOverride, TType>\n      | undefined,\n  ) => Promise<EstimateFeesPerGasReturnType>\n  /**\n   * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFilterChanges\n   * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n   *\n   * @remarks\n   * A Filter can be created from the following actions:\n   *\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n   * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n   *\n   * Depending on the type of filter, the return value will be different:\n   *\n   * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n   * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n   * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n   *\n   * @param args - {@link GetFilterChangesParameters}\n   * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n   *\n   * @example\n   * // Blocks\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createBlockFilter()\n   * const hashes = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Contract Events\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createContractEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n   *   eventName: 'Transfer',\n   * })\n   * const logs = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Raw Events\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n   * })\n   * const logs = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Transactions\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createPendingTransactionFilter()\n   * const hashes = await client.getFilterChanges({ filter })\n   */\n  getFilterChanges: <\n    TFilterType extends FilterType,\n    const TAbi extends Abi | readonly unknown[] | undefined,\n    TEventName extends string | undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetFilterChangesParameters<\n      TFilterType,\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >,\n  ) => Promise<\n    GetFilterChangesReturnType<\n      TFilterType,\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n  >\n  /**\n   * Returns a list of event logs since the filter was created.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\n   * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n   *\n   * @remarks\n   * `getFilterLogs` is only compatible with **event filters**.\n   *\n   * @param args - {@link GetFilterLogsParameters}\n   * @returns A list of event logs. {@link GetFilterLogsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n   * })\n   * const logs = await client.getFilterLogs({ filter })\n   */\n  getFilterLogs: <\n    const TAbi extends Abi | readonly unknown[] | undefined,\n    TEventName extends string | undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetFilterLogsParameters<\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >,\n  ) => Promise<\n    GetFilterLogsReturnType<TAbi, TEventName, TStrict, TFromBlock, TToBlock>\n  >\n  /**\n   * Returns the current price of gas (in wei).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getGasPrice\n   * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\n   *\n   * @returns The gas price (in wei). {@link GetGasPriceReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gasPrice = await client.getGasPrice()\n   */\n  getGasPrice: () => Promise<GetGasPriceReturnType>\n  /**\n   * Returns a list of event logs matching the provided parameters.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getLogs\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n   *\n   * @param args - {@link GetLogsParameters}\n   * @returns A list of event logs. {@link GetLogsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const logs = await client.getLogs()\n   */\n  getLogs: <\n    const TAbiEvent extends AbiEvent | undefined = undefined,\n    const TAbiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n    TStrict extends boolean | undefined = undefined,\n    TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args?:\n      | GetLogsParameters<TAbiEvent, TAbiEvents, TStrict, TFromBlock, TToBlock>\n      | undefined,\n  ) => Promise<\n    GetLogsReturnType<TAbiEvent, TAbiEvents, TStrict, TFromBlock, TToBlock>\n  >\n  /**\n   * Returns the account and storage values of the specified account including the Merkle-proof.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getProof\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetProofParameters}\n   * @returns Proof data. {@link GetProofReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const block = await client.getProof({\n   *  address: '0x...',\n   *  storageKeys: ['0x...'],\n   * })\n   */\n  getProof: (args: GetProofParameters) => Promise<GetProofReturnType>\n  /**\n   * Returns an estimate for the max priority fee per gas (in wei) for a transaction\n   * to be included in the next block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\n   *\n   * @param client - Client to use\n   * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const maxPriorityFeePerGas = await client.estimateMaxPriorityFeePerGas()\n   * // 10000000n\n   */\n  estimateMaxPriorityFeePerGas: <\n    TChainOverride extends Chain | undefined = undefined,\n  >(\n    args?:\n      | EstimateMaxPriorityFeePerGasParameters<TChain, TChainOverride>\n      | undefined,\n  ) => Promise<EstimateMaxPriorityFeePerGasReturnType>\n  /**\n   * Returns the value from a storage slot at a given address.\n   *\n   * - Docs: https://viem.sh/docs/contract/getStorageAt\n   * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\n   *\n   * @param args - {@link GetStorageAtParameters}\n   * @returns The value of the storage slot. {@link GetStorageAtReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { getStorageAt } from 'viem/contract'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const code = await client.getStorageAt({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   slot: toHex(0),\n   * })\n   */\n  getStorageAt: (\n    args: GetStorageAtParameters,\n  ) => Promise<GetStorageAtReturnType>\n  /**\n   * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms#transaction) given a hash or block identifier.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransaction\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n   *\n   * @param args - {@link GetTransactionParameters}\n   * @returns The transaction information. {@link GetTransactionReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transaction = await client.getTransaction({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransaction: <TBlockTag extends BlockTag = 'latest'>(\n    args: GetTransactionParameters<TBlockTag>,\n  ) => Promise<GetTransactionReturnType<TChain, TBlockTag>>\n  /**\n   * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n   *\n   * @param args - {@link GetTransactionConfirmationsParameters}\n   * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const confirmations = await client.getTransactionConfirmations({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransactionConfirmations: (\n    args: GetTransactionConfirmationsParameters<TChain>,\n  ) => Promise<GetTransactionConfirmationsReturnType>\n  /**\n   * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has broadcast / sent.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\n   * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n   *\n   * @param args - {@link GetTransactionCountParameters}\n   * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionCount = await client.getTransactionCount({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  getTransactionCount: (\n    args: GetTransactionCountParameters,\n  ) => Promise<GetTransactionCountReturnType>\n  /**\n   * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt)\n   *\n   * @param args - {@link GetTransactionReceiptParameters}\n   * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionReceipt = await client.getTransactionReceipt({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransactionReceipt: (\n    args: GetTransactionReceiptParameters,\n  ) => Promise<GetTransactionReceiptReturnType<TChain>>\n  /**\n   * Similar to [`readContract`](https://viem.sh/docs/contract/readContract), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\n   *\n   * - Docs: https://viem.sh/docs/contract/multicall\n   *\n   * @param args - {@link MulticallParameters}\n   * @returns An array of results with accompanying status. {@link MulticallReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const abi = parseAbi([\n   *   'function balanceOf(address) view returns (uint256)',\n   *   'function totalSupply() view returns (uint256)',\n   * ])\n   * const result = await client.multicall({\n   *   contracts: [\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'balanceOf',\n   *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n   *     },\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'totalSupply',\n   *     },\n   *   ],\n   * })\n   * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\n   */\n  multicall: <\n    const contracts extends readonly unknown[],\n    allowFailure extends boolean = true,\n  >(\n    args: MulticallParameters<contracts, allowFailure>,\n  ) => Promise<MulticallReturnType<contracts, allowFailure>>\n  /**\n   * Prepares a transaction request for signing.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n   *\n   * @param args - {@link PrepareTransactionRequestParameters}\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   */\n  prepareTransactionRequest: <\n    const TRequest extends PrepareTransactionRequestRequest<\n      TChain,\n      TChainOverride\n    >,\n    TChainOverride extends Chain | undefined = undefined,\n    TAccountOverride extends Account | Address | undefined = undefined,\n  >(\n    args: PrepareTransactionRequestParameters<\n      TChain,\n      TAccount,\n      TChainOverride,\n      TAccountOverride,\n      TRequest\n    >,\n  ) => Promise<\n    PrepareTransactionRequestReturnType<\n      Chain,\n      TAccount,\n      TChainOverride,\n      TAccountOverride,\n      // @ts-expect-error\n      TRequest\n    >\n  >\n  /**\n   * Calls a read-only function on a contract, and returns the response.\n   *\n   * - Docs: https://viem.sh/docs/contract/readContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/reading-contracts\n   *\n   * @remarks\n   * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n   *\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link ReadContractParameters}\n   * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { readContract } from 'viem/contract'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const result = await client.readContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n   *   functionName: 'balanceOf',\n   *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n   * })\n   * // 424122n\n   */\n  readContract: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n    args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  >(\n    args: ReadContractParameters<abi, functionName, args>,\n  ) => Promise<ReadContractReturnType<abi, functionName, args>>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionParameters}\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransaction } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const hash = await client.sendRawTransaction({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransaction: (\n    args: SendRawTransactionParameters,\n  ) => Promise<SendRawTransactionReturnType>\n  /**\n   * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\n   *\n   * - Docs: https://viem.sh/docs/contract/simulateContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\n   *\n   * @remarks\n   * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\n   *\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link SimulateContractParameters}\n   * @returns The simulation result and write request. {@link SimulateContractReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const result = await client.simulateContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\n   *   functionName: 'mint',\n   *   args: ['69420'],\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  simulateContract: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'nonpayable' | 'payable',\n      functionName\n    >,\n    chainOverride extends Chain | undefined,\n    accountOverride extends Account | Address | undefined = undefined,\n  >(\n    args: SimulateContractParameters<\n      abi,\n      functionName,\n      args,\n      TChain,\n      chainOverride,\n      accountOverride\n    >,\n  ) => Promise<\n    SimulateContractReturnType<\n      abi,\n      functionName,\n      args,\n      TChain,\n      TAccount,\n      chainOverride,\n      accountOverride\n    >\n  >\n  /**\n   * Verify that a message was signed by the provided address.\n   *\n   * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n   *\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\n   *\n   * @param parameters - {@link VerifyMessageParameters}\n   * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n   */\n  verifyMessage: (\n    args: VerifyMessageParameters,\n  ) => Promise<VerifyMessageReturnType>\n  /**\n   * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\n   *\n   * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n   *\n   * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\n   *\n   * @param parameters - {@link VerifySiweMessageParameters}\n   * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\n   */\n  verifySiweMessage: (\n    args: VerifySiweMessageParameters,\n  ) => Promise<VerifySiweMessageReturnType>\n  /**\n   * Verify that typed data was signed by the provided address.\n   *\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\n   *\n   * @param parameters - {@link VerifyTypedDataParameters}\n   * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n   */\n  verifyTypedData: (\n    args: VerifyTypedDataParameters,\n  ) => Promise<VerifyTypedDataReturnType>\n  /**\n   * Destroys a Filter that was created from one of the following Actions:\n   *\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n   *\n   * - Docs: https://viem.sh/docs/actions/public/uninstallFilter\n   * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\n   *\n   * @param args - {@link UninstallFilterParameters}\n   * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\n   *\n   * const filter = await client.createPendingTransactionFilter()\n   * const uninstalled = await client.uninstallFilter({ filter })\n   * // true\n   */\n  uninstallFilter: (\n    args: UninstallFilterParameters,\n  ) => Promise<UninstallFilterReturnType>\n  /**\n   * Waits for the [Transaction](https://viem.sh/docs/glossary/terms#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt). If the Transaction reverts, then the action will throw an error.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n   * - JSON-RPC Methods:\n   *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\n   *   - If a Transaction has been replaced:\n   *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\n   *     - Checks if one of the Transactions is a replacement\n   *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\n   *\n   * @remarks\n   * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\n   *\n   * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\n   *\n   * There are 3 types of Transaction Replacement reasons:\n   *\n   * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\n   * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\n   * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\n   *\n   * @param args - {@link WaitForTransactionReceiptParameters}\n   * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionReceipt = await client.waitForTransactionReceipt({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  waitForTransactionReceipt: (\n    args: WaitForTransactionReceiptParameters<TChain>,\n  ) => Promise<WaitForTransactionReceiptReturnType<TChain>>\n  /**\n   * Watches and returns incoming block numbers.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n   * - JSON-RPC Methods:\n   *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n   *\n   * @param args - {@link WatchBlockNumberParameters}\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchBlockNumber({\n   *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n   * })\n   */\n  watchBlockNumber: (\n    args: WatchBlockNumberParameters,\n  ) => WatchBlockNumberReturnType\n  /**\n   * Watches and returns information for incoming blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchBlocks\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n   * - JSON-RPC Methods:\n   *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n   *\n   * @param args - {@link WatchBlocksParameters}\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchBlocks({\n   *   onBlock: (block) => console.log(block),\n   * })\n   */\n  watchBlocks: <\n    TIncludeTransactions extends boolean = false,\n    TBlockTag extends BlockTag = 'latest',\n  >(\n    args: WatchBlocksParameters<\n      TTransport,\n      TChain,\n      TIncludeTransactions,\n      TBlockTag\n    >,\n  ) => WatchBlocksReturnType\n  /**\n   * Watches and returns emitted contract event logs.\n   *\n   * - Docs: https://viem.sh/docs/contract/watchContractEvent\n   *\n   * @remarks\n   * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n   *\n   * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n   *\n   * @param args - {@link WatchContractEventParameters}\n   * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = client.watchContractEvent({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n   *   eventName: 'Transfer',\n   *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n   *   onLogs: (logs) => console.log(logs),\n   * })\n   */\n  watchContractEvent: <\n    const TAbi extends Abi | readonly unknown[],\n    TEventName extends ContractEventName<TAbi>,\n    TStrict extends boolean | undefined = undefined,\n  >(\n    args: WatchContractEventParameters<TAbi, TEventName, TStrict, TTransport>,\n  ) => WatchContractEventReturnType\n  /**\n   * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchEvent\n   * - JSON-RPC Methods:\n   *   - **RPC Provider supports `eth_newFilter`:**\n   *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n   *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n   *   - **RPC Provider does not support `eth_newFilter`:**\n   *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n   *\n   * @remarks\n   * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\n   *\n   * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n   *\n   * @param args - {@link WatchEventParameters}\n   * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = client.watchEvent({\n   *   onLogs: (logs) => console.log(logs),\n   * })\n   */\n  watchEvent: <\n    const TAbiEvent extends AbiEvent | undefined = undefined,\n    const TAbiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n    TStrict extends boolean | undefined = undefined,\n  >(\n    args: WatchEventParameters<TAbiEvent, TAbiEvents, TStrict, TTransport>,\n  ) => WatchEventReturnType\n  /**\n   * Watches and returns pending transaction hashes.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\n   * - JSON-RPC Methods:\n   *   - When `poll: true`\n   *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n   *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n   *\n   * @remarks\n   * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\n   *\n   * @param args - {@link WatchPendingTransactionsParameters}\n   * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchPendingTransactions({\n   *   onTransactions: (hashes) => console.log(hashes),\n   * })\n   */\n  watchPendingTransactions: (\n    args: WatchPendingTransactionsParameters<TTransport>,\n  ) => WatchPendingTransactionsReturnType\n}\n\nexport function publicActions<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n>(\n  client: Client<TTransport, TChain, TAccount>,\n): PublicActions<TTransport, TChain, TAccount> {\n  return {\n    call: (args) => call(client, args),\n    createBlockFilter: () => createBlockFilter(client),\n    createContractEventFilter: (args) =>\n      createContractEventFilter(client, args),\n    createEventFilter: (args) => createEventFilter(client, args),\n    createPendingTransactionFilter: () =>\n      createPendingTransactionFilter(client),\n    estimateContractGas: (args) => estimateContractGas(client, args as any),\n    estimateGas: (args) => estimateGas(client, args),\n    getBalance: (args) => getBalance(client, args),\n    getBlobBaseFee: () => getBlobBaseFee(client),\n    getBlock: (args) => getBlock(client, args),\n    getBlockNumber: (args) => getBlockNumber(client, args),\n    getBlockTransactionCount: (args) => getBlockTransactionCount(client, args),\n    getBytecode: (args) => getBytecode(client, args),\n    getChainId: () => getChainId(client),\n    getContractEvents: (args) => getContractEvents(client, args),\n    getEnsAddress: (args) => getEnsAddress(client, args),\n    getEnsAvatar: (args) => getEnsAvatar(client, args),\n    getEnsName: (args) => getEnsName(client, args),\n    getEnsResolver: (args) => getEnsResolver(client, args),\n    getEnsText: (args) => getEnsText(client, args),\n    getFeeHistory: (args) => getFeeHistory(client, args),\n    estimateFeesPerGas: (args) => estimateFeesPerGas(client, args),\n    getFilterChanges: (args) => getFilterChanges(client, args),\n    getFilterLogs: (args) => getFilterLogs(client, args),\n    getGasPrice: () => getGasPrice(client),\n    getLogs: (args) => getLogs(client, args as any),\n    getProof: (args) => getProof(client, args),\n    estimateMaxPriorityFeePerGas: (args) =>\n      estimateMaxPriorityFeePerGas(client, args),\n    getStorageAt: (args) => getStorageAt(client, args),\n    getTransaction: (args) => getTransaction(client, args),\n    getTransactionConfirmations: (args) =>\n      getTransactionConfirmations(client, args),\n    getTransactionCount: (args) => getTransactionCount(client, args),\n    getTransactionReceipt: (args) => getTransactionReceipt(client, args),\n    multicall: (args) => multicall(client, args),\n    prepareTransactionRequest: (args) =>\n      prepareTransactionRequest(client as any, args as any),\n    readContract: (args) => readContract(client, args),\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\n    simulateContract: (args) => simulateContract(client, args),\n    verifyMessage: (args) => verifyMessage(client, args),\n    verifySiweMessage: (args) => verifySiweMessage(client, args),\n    verifyTypedData: (args) => verifyTypedData(client, args),\n    uninstallFilter: (args) => uninstallFilter(client, args),\n    waitForTransactionReceipt: (args) =>\n      waitForTransactionReceipt(client, args),\n    watchBlocks: (args) => watchBlocks(client, args),\n    watchBlockNumber: (args) => watchBlockNumber(client, args),\n    watchContractEvent: (args) => watchContractEvent(client, args),\n    watchEvent: (args) => watchEvent(client, args),\n    watchPendingTransactions: (args) => watchPendingTransactions(client, args),\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\n\nexport type CreateBlockFilterReturnType = Filter<'block'>\n\nexport type CreateBlockFilterErrorType = RequestErrorType | ErrorType\n\n/**\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n *\n * - Docs: https://viem.sh/docs/actions/public/createBlockFilter\n * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n *\n * @param client - Client to use\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n */\nexport async function createBlockFilter<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n): Promise<CreateBlockFilterReturnType> {\n  const getRequest = createFilterRequestScope(client, {\n    method: 'eth_newBlockFilter',\n  })\n  const id = await client.request({\n    method: 'eth_newBlockFilter',\n  })\n  return { id, request: getRequest(id), type: 'block' }\n}\n","import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n  GetValue,\n} from '../../types/contract.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type EstimateGasErrorType,\n  type EstimateGasParameters,\n  estimateGas,\n} from './estimateGas.js'\n\nexport type EstimateContractGasParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n> = ContractFunctionParameters<\n  abi,\n  'nonpayable' | 'payable',\n  functionName,\n  args\n> &\n  UnionOmit<EstimateGasParameters<chain>, 'data' | 'to' | 'value'> &\n  GetValue<\n    abi,\n    functionName,\n    EstimateGasParameters<chain> extends EstimateGasParameters\n      ? EstimateGasParameters<chain>['value']\n      : EstimateGasParameters['value']\n  >\n\nexport type EstimateContractGasReturnType = bigint\n\nexport type EstimateContractGasErrorType = GetContractErrorReturnType<\n  EncodeFunctionDataErrorType | EstimateGasErrorType | ParseAccountErrorType\n>\n\n/**\n * Estimates the gas required to successfully execute a contract write function call.\n *\n * - Docs: https://viem.sh/docs/contract/estimateContractGas\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateContractGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateContractGas } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gas = await estimateContractGas(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint() public']),\n *   functionName: 'mint',\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * })\n */\nexport async function estimateContractGas<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  chain extends Chain | undefined,\n  account extends Account | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: EstimateContractGasParameters<abi, functionName, args, chain>,\n): Promise<EstimateContractGasReturnType> {\n  const { abi, address, args, functionName, ...request } =\n    parameters as EstimateContractGasParameters\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as EncodeFunctionDataParameters)\n  try {\n    const gas = await getAction(\n      client,\n      estimateGas,\n      'estimateGas',\n    )({\n      data,\n      to: address,\n      ...request,\n    } as unknown as EstimateGasParameters)\n    return gas\n  } catch (error) {\n    const account = request.account ? parseAccount(request.account) : undefined\n    throw getContractError(error as BaseError, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBalanceParameters = {\n  /** The address of the account. */\n  address: Address\n} & (\n  | {\n      /** The balance of the account at a block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: never | undefined\n    }\n  | {\n      blockNumber?: never | undefined\n      /** The balance of the account at a block tag. */\n      blockTag?: BlockTag | undefined\n    }\n)\n\nexport type GetBalanceReturnType = bigint\n\nexport type GetBalanceErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the balance of an address in wei.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBalance\n * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n *\n * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\n *\n * ```ts\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   blockTag: 'safe'\n * })\n * const balanceAsEther = formatEther(balance)\n * // \"6.942\"\n * ```\n *\n * @param client - Client to use\n * @param parameters - {@link GetBalanceParameters}\n * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBalance } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const balance = await getBalance(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n * // 10000000000000000000000n (wei)\n */\nexport async function getBalance<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, blockNumber, blockTag = 'latest' }: GetBalanceParameters,\n): Promise<GetBalanceReturnType> {\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n\n  const balance = await client.request({\n    method: 'eth_getBalance',\n    params: [address, blockNumberHex || blockTag],\n  })\n  return BigInt(balance)\n}\n","import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetBlobBaseFeeReturnType = bigint\n\nexport type GetBlobBaseFeeErrorType = RequestErrorType | ErrorType\n\n/**\n * Returns the base fee per blob gas in wei.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlobBaseFee\n * - JSON-RPC Methods: [`eth_blobBaseFee`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blobBaseFee)\n *\n * @param client - Client to use\n * @returns The blob base fee (in wei). {@link GetBlobBaseFeeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlobBaseFee } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blobBaseFee = await getBlobBaseFee(client)\n */\nexport async function getBlobBaseFee<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n): Promise<GetBlobBaseFeeReturnType> {\n  const baseFee = await client.request({\n    method: 'eth_blobBaseFee',\n  })\n  return BigInt(baseFee)\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type HexToNumberErrorType,\n  hexToNumber,\n} from '../../utils/encoding/fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBlockTransactionCountParameters =\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash | undefined\n      blockNumber?: never | undefined\n      blockTag?: never | undefined\n    }\n  | {\n      blockHash?: never | undefined\n      /** The block number. */\n      blockNumber?: bigint | undefined\n      blockTag?: never | undefined\n    }\n  | {\n      blockHash?: never | undefined\n      blockNumber?: never | undefined\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag | undefined\n    }\n\nexport type GetBlockTransactionCountReturnType = number\n\nexport type GetBlockTransactionCountErrorType =\n  | NumberToHexErrorType\n  | HexToNumberErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the number of Transactions at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockTransactionCountParameters}\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const count = await getBlockTransactionCount(client)\n */\nexport async function getBlockTransactionCount<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag = 'latest',\n  }: GetBlockTransactionCountParameters = {},\n): Promise<GetBlockTransactionCountReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let count: Quantity\n  if (blockHash) {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByHash',\n      params: [blockHash],\n    })\n  } else {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByNumber',\n      params: [blockNumberHex || blockTag],\n    })\n  }\n\n  return hexToNumber(count)\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetBytecodeParameters = {\n  address: Address\n} & (\n  | {\n      blockNumber?: never | undefined\n      blockTag?: BlockTag | undefined\n    }\n  | {\n      blockNumber?: bigint | undefined\n      blockTag?: never | undefined\n    }\n)\n\nexport type GetBytecodeReturnType = Hex | undefined\n\nexport type GetBytecodeErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Retrieves the bytecode at an address.\n *\n * - Docs: https://viem.sh/docs/contract/getBytecode\n * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBytecodeParameters}\n * @returns The contract's bytecode. {@link GetBytecodeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBytecode } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getBytecode(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n * })\n */\nexport async function getBytecode<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, blockNumber, blockTag = 'latest' }: GetBytecodeParameters,\n): Promise<GetBytecodeReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n  const hex = await client.request({\n    method: 'eth_getCode',\n    params: [address, blockNumberHex || blockTag],\n  })\n  if (hex === '0x') return undefined\n  return hex\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  addressResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type TrimErrorType, trim } from '../../utils/data/trim.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsAddressParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** ENSIP-9 compliant coinType used to resolve addresses for other chains */\n    coinType?: number | undefined\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\n    gatewayUrls?: string[] | undefined\n    /** Name to get the address for. */\n    name: string\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\n    strict?: boolean | undefined\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsAddressReturnType = Address | null\n\nexport type GetEnsAddressErrorType =\n  | GetChainContractAddressErrorType\n  | EncodeFunctionDataErrorType\n  | NamehashErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | DecodeFunctionResultErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Gets address for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAddressParameters}\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAddress, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAddress = await getEnsAddress(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n */\nexport async function getEnsAddress<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    coinType,\n    name,\n    gatewayUrls,\n    strict,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsAddressParameters,\n): Promise<GetEnsAddressReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  try {\n    const functionData = encodeFunctionData({\n      abi: addressResolverAbi,\n      functionName: 'addr',\n      ...(coinType != null\n        ? { args: [namehash(name), BigInt(coinType)] }\n        : { args: [namehash(name)] }),\n    })\n\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [toHex(packetToBytes(name)), functionData],\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const res = gatewayUrls\n      ? await readContractAction({\n          ...readContractParameters,\n          args: [...readContractParameters.args, gatewayUrls],\n        })\n      : await readContractAction(readContractParameters)\n\n    if (res[0] === '0x') return null\n\n    const address = decodeFunctionResult({\n      abi: addressResolverAbi,\n      args: coinType != null ? [namehash(name), BigInt(coinType)] : undefined,\n      functionName: 'addr',\n      data: res[0],\n    })\n\n    if (address === '0x') return null\n    if (trim(address) === '0x00') return null\n    return address\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err, 'resolve')) return null\n    throw err\n  }\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { AssetGatewayUrls } from '../../types/ens.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type ParseAvatarRecordErrorType,\n  parseAvatarRecord,\n} from '../../utils/ens/avatar/parseAvatarRecord.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport {\n  type GetEnsTextErrorType,\n  type GetEnsTextParameters,\n  getEnsText,\n} from './getEnsText.js'\n\nexport type GetEnsAvatarParameters = Prettify<\n  Omit<GetEnsTextParameters, 'key'> & {\n    /** Gateway urls to resolve IPFS and/or Arweave assets. */\n    assetGatewayUrls?: AssetGatewayUrls | undefined\n  }\n>\n\nexport type GetEnsAvatarReturnType = string | null\n\nexport type GetEnsAvatarErrorType =\n  | GetEnsTextErrorType\n  | ParseAvatarRecordErrorType\n  | ErrorType\n\n/**\n * Gets the avatar of an ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsAvatarParameters}\n * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsAvatar, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensAvatar = await getEnsAvatar(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n */\nexport async function getEnsAvatar<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    assetGatewayUrls,\n    name,\n    gatewayUrls,\n    strict,\n    universalResolverAddress,\n  }: GetEnsAvatarParameters,\n): Promise<GetEnsAvatarReturnType> {\n  const record = await getAction(\n    client,\n    getEnsText,\n    'getEnsText',\n  )({\n    blockNumber,\n    blockTag,\n    key: 'avatar',\n    name,\n    universalResolverAddress,\n    gatewayUrls,\n    strict,\n  })\n  if (!record) return null\n  try {\n    return await parseAvatarRecord(client, {\n      record,\n      gatewayUrls: assetGatewayUrls,\n    })\n  } catch {\n    return null\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalResolverReverseAbi } from '../../constants/abis.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsNameParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Address to get ENS name for. */\n    address: Address\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\n    gatewayUrls?: string[] | undefined\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\n    strict?: boolean | undefined\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsNameReturnType = string | null\n\nexport type GetEnsNameErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wevm.eth'\n */\nexport async function getEnsName<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockNumber,\n    blockTag,\n    gatewayUrls,\n    strict,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsNameParameters,\n): Promise<GetEnsNameReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`\n  try {\n    const readContractParameters = {\n      address: universalResolverAddress,\n      abi: universalResolverReverseAbi,\n      functionName: 'reverse',\n      args: [toHex(packetToBytes(reverseNode))],\n      blockNumber,\n      blockTag,\n    } as const\n\n    const readContractAction = getAction(client, readContract, 'readContract')\n\n    const [name, resolvedAddress] = gatewayUrls\n      ? await readContractAction({\n          ...readContractParameters,\n          args: [...readContractParameters.args, gatewayUrls],\n        })\n      : await readContractAction(readContractParameters)\n\n    if (address.toLowerCase() !== resolvedAddress.toLowerCase()) return null\n    return name\n  } catch (err) {\n    if (strict) throw err\n    if (isNullUniversalResolverError(err, 'reverse')) return null\n    throw err\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\nimport {\n  type PacketToBytesErrorType,\n  packetToBytes,\n} from '../../utils/ens/packetToBytes.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsResolverParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Name to get the address for. */\n    name: string\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address | undefined\n  }\n>\n\nexport type GetEnsResolverReturnType = Address\n\nexport type GetEnsResolverErrorType =\n  | GetChainContractAddressErrorType\n  | ToHexErrorType\n  | PacketToBytesErrorType\n  | ErrorType\n\n/**\n * Gets resolver for ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n *\n * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsResolverParameters}\n * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsResolver, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const resolverAddress = await getEnsResolver(client, {\n *   name: normalize('wevm.eth'),\n * })\n * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n */\nexport async function getEnsResolver<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    name,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsResolverParameters,\n) {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  const [resolverAddress] = await getAction(\n    client,\n    readContract,\n    'readContract',\n  )({\n    address: universalResolverAddress,\n    abi: [\n      {\n        inputs: [{ type: 'bytes' }],\n        name: 'findResolver',\n        outputs: [{ type: 'address' }, { type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n      },\n    ],\n    functionName: 'findResolver',\n    args: [toHex(packetToBytes(name))],\n    blockNumber,\n    blockTag,\n  })\n  return resolverAddress\n}\n","import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type FormatLogErrorType,\n  formatLog,\n} from '../../utils/formatters/log.js'\n\nexport type GetFilterLogsParameters<\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  filter: Filter<'event', TAbi, TEventName, any, TStrict, TFromBlock, TToBlock>\n}\nexport type GetFilterLogsReturnType<\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _AbiEvent extends AbiEvent | undefined = TAbi extends Abi\n    ? TEventName extends string\n      ? ExtractAbiEvent<TAbi, TEventName>\n      : undefined\n    : undefined,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, _AbiEvent, TStrict, TAbi, TEventName>[]\n\nexport type GetFilterLogsErrorType =\n  | RequestErrorType\n  | DecodeEventLogErrorType\n  | FormatLogErrorType\n  | ErrorType\n\n/**\n * Returns a list of event logs since the filter was created.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\n * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n *\n * `getFilterLogs` is only compatible with **event filters**.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterLogsParameters}\n * @returns A list of event logs. {@link GetFilterLogsReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterLogs } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterLogs(client, { filter })\n */\nexport async function getFilterLogs<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[] | undefined,\n  TEventName extends string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  _client: Client<Transport, TChain>,\n  {\n    filter,\n  }: GetFilterLogsParameters<TAbi, TEventName, TStrict, TFromBlock, TToBlock>,\n): Promise<\n  GetFilterLogsReturnType<TAbi, TEventName, TStrict, TFromBlock, TToBlock>\n> {\n  const strict = filter.strict ?? false\n\n  const logs = await filter.request({\n    method: 'eth_getFilterLogs',\n    params: [filter.id],\n  })\n\n  const formattedLogs = logs.map((log) => formatLog(log))\n  if (!filter.abi)\n    return formattedLogs as GetFilterLogsReturnType<\n      TAbi,\n      TEventName,\n      TStrict,\n      TFromBlock,\n      TToBlock\n    >\n  return parseEventLogs({\n    abi: filter.abi,\n    logs: formattedLogs,\n    strict,\n  }) as unknown as GetFilterLogsReturnType<\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type GetStorageAtParameters = {\n  address: Address\n  slot: Hex\n} & (\n  | {\n      blockNumber?: never | undefined\n      blockTag?: BlockTag | undefined\n    }\n  | {\n      blockNumber?: bigint | undefined\n      blockTag?: never | undefined\n    }\n)\n\nexport type GetStorageAtReturnType = Hex | undefined\n\nexport type GetStorageAtErrorType =\n  | NumberToHexErrorType\n  | RequestErrorType\n  | ErrorType\n\n/**\n * Returns the value from a storage slot at a given address.\n *\n * - Docs: https://viem.sh/docs/contract/getStorageAt\n * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\n *\n * @param client - Client to use\n * @param parameters - {@link GetStorageAtParameters}\n * @returns The value of the storage slot. {@link GetStorageAtReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getStorageAt } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getStorageAt(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   slot: toHex(0),\n * })\n */\nexport async function getStorageAt<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, blockNumber, blockTag = 'latest', slot }: GetStorageAtParameters,\n): Promise<GetStorageAtReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n  const data = await client.request({\n    method: 'eth_getStorageAt',\n    params: [address, slot, blockNumberHex || blockTag],\n  })\n  return data\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { FormattedTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\nimport { getAction } from '../../utils/getAction.js'\n\nimport {\n  type GetBlockNumberErrorType,\n  getBlockNumber,\n} from './getBlockNumber.js'\nimport {\n  type GetTransactionErrorType,\n  getTransaction,\n} from './getTransaction.js'\n\nexport type GetTransactionConfirmationsParameters<\n  TChain extends Chain | undefined = Chain,\n> =\n  | {\n      /** The transaction hash. */\n      hash: Hash\n      transactionReceipt?: never | undefined\n    }\n  | {\n      hash?: never | undefined\n      /** The transaction receipt. */\n      transactionReceipt: FormattedTransactionReceipt<TChain>\n    }\n\nexport type GetTransactionConfirmationsReturnType = bigint\n\nexport type GetTransactionConfirmationsErrorType =\n  | GetBlockNumberErrorType\n  | GetTransactionErrorType\n  | ErrorType\n\n/**\n * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionConfirmationsParameters}\n * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionConfirmations } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const confirmations = await getTransactionConfirmations(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionConfirmations<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  { hash, transactionReceipt }: GetTransactionConfirmationsParameters<TChain>,\n): Promise<GetTransactionConfirmationsReturnType> {\n  const [blockNumber, transaction] = await Promise.all([\n    getAction(client, getBlockNumber, 'getBlockNumber')({}),\n    hash\n      ? getAction(client, getTransaction, 'getBlockNumber')({ hash })\n      : undefined,\n  ])\n  const transactionBlockNumber =\n    transactionReceipt?.blockNumber || transaction?.blockNumber\n  if (!transactionBlockNumber) return 0n\n  return blockNumber - transactionBlockNumber! + 1n\n}\n","import type { AbiStateMutability, Address, Narrow } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { multicall3Abi } from '../../constants/abis.js'\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\nimport { BaseError } from '../../errors/base.js'\nimport { RawContractError } from '../../errors/contract.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ContractFunctionParameters } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type {\n  MulticallContracts,\n  MulticallResults,\n} from '../../types/multicall.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { getAction } from '../../utils/getAction.js'\nimport type { CallParameters } from './call.js'\nimport { type ReadContractErrorType, readContract } from './readContract.js'\n\nexport type MulticallParameters<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  options extends {\n    optional?: boolean\n    properties?: Record<string, any>\n  } = {},\n> = Pick<CallParameters, 'blockNumber' | 'blockTag' | 'stateOverride'> & {\n  allowFailure?: allowFailure | boolean | undefined\n  batchSize?: number | undefined\n  contracts: MulticallContracts<\n    Narrow<contracts>,\n    { mutability: AbiStateMutability } & options\n  >\n  multicallAddress?: Address | undefined\n}\n\nexport type MulticallReturnType<\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\n  allowFailure extends boolean = true,\n  options extends {\n    error?: Error\n  } = { error: Error },\n> = MulticallResults<\n  Narrow<contracts>,\n  allowFailure,\n  { mutability: AbiStateMutability } & options\n>\n\nexport type MulticallErrorType =\n  | GetChainContractAddressErrorType\n  | ReadContractErrorType\n  | GetContractErrorReturnType<\n      EncodeFunctionDataErrorType | DecodeFunctionResultErrorType\n    >\n  | ErrorType\n\n/**\n * Similar to [`readContract`](https://viem.sh/docs/contract/readContract), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\n *\n * - Docs: https://viem.sh/docs/contract/multicall\n *\n * @param client - Client to use\n * @param parameters - {@link MulticallParameters}\n * @returns An array of results with accompanying status. {@link MulticallReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { multicall } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const abi = parseAbi([\n *   'function balanceOf(address) view returns (uint256)',\n *   'function totalSupply() view returns (uint256)',\n * ])\n * const results = await multicall(client, {\n *   contracts: [\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'balanceOf',\n *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n *     },\n *     {\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *       abi,\n *       functionName: 'totalSupply',\n *     },\n *   ],\n * })\n * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\n */\nexport async function multicall<\n  const contracts extends readonly unknown[],\n  chain extends Chain | undefined,\n  allowFailure extends boolean = true,\n>(\n  client: Client<Transport, chain>,\n  parameters: MulticallParameters<contracts, allowFailure>,\n): Promise<MulticallReturnType<contracts, allowFailure>> {\n  const {\n    allowFailure = true,\n    batchSize: batchSize_,\n    blockNumber,\n    blockTag,\n    multicallAddress: multicallAddress_,\n    stateOverride,\n  } = parameters\n  const contracts = parameters.contracts as ContractFunctionParameters[]\n\n  const batchSize =\n    batchSize_ ??\n    ((typeof client.batch?.multicall === 'object' &&\n      client.batch.multicall.batchSize) ||\n      1_024)\n\n  let multicallAddress = multicallAddress_\n  if (!multicallAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. multicallAddress is required.',\n      )\n\n    multicallAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'multicall3',\n    })\n  }\n\n  type Aggregate3Calls = {\n    allowFailure: boolean\n    callData: Hex\n    target: Address\n  }[]\n\n  const chunkedCalls: Aggregate3Calls[] = [[]]\n  let currentChunk = 0\n  let currentChunkSize = 0\n  for (let i = 0; i < contracts.length; i++) {\n    const { abi, address, args, functionName } = contracts[i]\n    try {\n      const callData = encodeFunctionData({ abi, args, functionName })\n\n      currentChunkSize += (callData.length - 2) / 2\n      // Check to see if we need to create a new chunk.\n      if (\n        // Check if batching is enabled.\n        batchSize > 0 &&\n        // Check if the current size of the batch exceeds the size limit.\n        currentChunkSize > batchSize &&\n        // Check if the current chunk is not already empty.\n        chunkedCalls[currentChunk].length > 0\n      ) {\n        currentChunk++\n        currentChunkSize = (callData.length - 2) / 2\n        chunkedCalls[currentChunk] = []\n      }\n\n      chunkedCalls[currentChunk] = [\n        ...chunkedCalls[currentChunk],\n        {\n          allowFailure: true,\n          callData,\n          target: address,\n        },\n      ]\n    } catch (err) {\n      const error = getContractError(err as BaseError, {\n        abi,\n        address,\n        args,\n        docsPath: '/docs/contract/multicall',\n        functionName,\n      })\n      if (!allowFailure) throw error\n      chunkedCalls[currentChunk] = [\n        ...chunkedCalls[currentChunk],\n        {\n          allowFailure: true,\n          callData: '0x' as Hex,\n          target: address,\n        },\n      ]\n    }\n  }\n\n  const aggregate3Results = await Promise.allSettled(\n    chunkedCalls.map((calls) =>\n      getAction(\n        client,\n        readContract,\n        'readContract',\n      )({\n        abi: multicall3Abi,\n        address: multicallAddress!,\n        args: [calls],\n        blockNumber,\n        blockTag,\n        functionName: 'aggregate3',\n        stateOverride,\n      }),\n    ),\n  )\n\n  const results = []\n  for (let i = 0; i < aggregate3Results.length; i++) {\n    const result = aggregate3Results[i]\n\n    // If an error occurred in a `readContract` invocation (ie. network error),\n    // then append the failure reason to each contract result.\n    if (result.status === 'rejected') {\n      if (!allowFailure) throw result.reason\n      for (let j = 0; j < chunkedCalls[i].length; j++) {\n        results.push({\n          status: 'failure',\n          error: result.reason,\n          result: undefined,\n        })\n      }\n      continue\n    }\n\n    // If the `readContract` call was successful, then decode the results.\n    const aggregate3Result = result.value\n    for (let j = 0; j < aggregate3Result.length; j++) {\n      // Extract the response from `readContract`\n      const { returnData, success } = aggregate3Result[j]\n\n      // Extract the request call data from the original call.\n      const { callData } = chunkedCalls[i][j]\n\n      // Extract the contract config for this call from the `contracts` argument\n      // for decoding.\n      const { abi, address, functionName, args } = contracts[\n        results.length\n      ] as ContractFunctionParameters\n\n      try {\n        if (callData === '0x') throw new AbiDecodingZeroDataError()\n        if (!success) throw new RawContractError({ data: returnData })\n        const result = decodeFunctionResult({\n          abi,\n          args,\n          data: returnData,\n          functionName,\n        })\n        results.push(allowFailure ? { result, status: 'success' } : result)\n      } catch (err) {\n        const error = getContractError(err as BaseError, {\n          abi,\n          address,\n          args,\n          docsPath: '/docs/contract/multicall',\n          functionName,\n        })\n        if (!allowFailure) throw error\n        results.push({ error, result: undefined, status: 'failure' })\n      }\n    }\n  }\n\n  if (results.length !== contracts.length)\n    throw new BaseError('multicall results mismatch')\n  return results as MulticallReturnType<contracts, allowFailure>\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionSerializedGeneric } from '../../types/transaction.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type SendRawTransactionParameters = {\n  /** The signed serialized tranasction. */\n  serializedTransaction: TransactionSerializedGeneric\n}\n\nexport type SendRawTransactionReturnType = Hash\n\nexport type SendRawTransactionErrorType = RequestErrorType | ErrorType\n\n/**\n * Sends a **signed** transaction to the network\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\n * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *\n * @param client - Client to use\n * @param parameters - {@link SendRawTransactionParameters}\n * @returns The transaction hash. {@link SendRawTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendRawTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * const hash = await sendRawTransaction(client, {\n *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n * })\n */\nexport async function sendRawTransaction<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { serializedTransaction }: SendRawTransactionParameters,\n): Promise<SendRawTransactionReturnType> {\n  return client.request(\n    {\n      method: 'eth_sendRawTransaction',\n      params: [serializedTransaction],\n    },\n    { retryCount: 0 },\n  )\n}\n","import type { Abi, Address } from 'abitype'\n\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account, ParseAccount } from '../../types/account.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n  ContractFunctionParameters,\n  ContractFunctionReturnType,\n  ExtractAbiFunctionForArgs,\n  GetValue,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify, UnionEvaluate, UnionOmit } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../utils/errors/getContractError.js'\nimport type { WriteContractParameters } from '../wallet/writeContract.js'\n\nimport { getAction } from '../../utils/getAction.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type SimulateContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined = undefined,\n  ///\n  derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = {\n  account?: accountOverride | undefined\n  chain?: chainOverride | undefined\n  /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n  dataSuffix?: Hex | undefined\n} & ContractFunctionParameters<\n  abi,\n  'nonpayable' | 'payable',\n  functionName,\n  args\n> &\n  UnionOmit<\n    CallParameters<derivedChain>,\n    'account' | 'batch' | 'to' | 'data' | 'value'\n  > &\n  GetValue<\n    abi,\n    functionName,\n    CallParameters<derivedChain> extends CallParameters\n      ? CallParameters<derivedChain>['value']\n      : CallParameters['value']\n  >\n\nexport type SimulateContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'nonpayable' | 'payable'\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  accountOverride extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  ///\n  minimizedAbi extends Abi = readonly [\n    ExtractAbiFunctionForArgs<\n      abi extends Abi ? abi : Abi,\n      'nonpayable' | 'payable',\n      functionName,\n      args\n    >,\n  ],\n  resolvedAccount extends Account | undefined = accountOverride extends\n    | Account\n    | Address\n    ? ParseAccount<accountOverride>\n    : account,\n> = {\n  result: ContractFunctionReturnType<\n    minimizedAbi,\n    'nonpayable' | 'payable',\n    functionName,\n    args\n  >\n  request: Prettify<\n    UnionEvaluate<\n      UnionOmit<\n        WriteContractParameters<\n          minimizedAbi,\n          functionName,\n          args,\n          chain,\n          undefined,\n          chainOverride\n        >,\n        'account' | 'abi' | 'args' | 'chain' | 'functionName'\n      >\n    > &\n      ContractFunctionParameters<\n        minimizedAbi,\n        'nonpayable' | 'payable',\n        functionName,\n        args\n      > & {\n        chain: DeriveChain<chain, chainOverride>\n      } & (resolvedAccount extends Account\n        ? { account: resolvedAccount }\n        : { account?: undefined })\n  >\n}\n\nexport type SimulateContractErrorType =\n  | ParseAccountErrorType\n  | EncodeFunctionDataErrorType\n  | GetContractErrorReturnType<CallErrorType | DecodeFunctionResultErrorType>\n  | ErrorType\n\n/**\n * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\n *\n * - Docs: https://viem.sh/docs/contract/simulateContract\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\n *\n * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n *\n * @param client - Client to use\n * @param parameters - {@link SimulateContractParameters}\n * @returns The simulation result and write request. {@link SimulateContractReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const result = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\n *   functionName: 'mint',\n *   args: ['69420'],\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function simulateContract<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  const args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  >,\n  chainOverride extends Chain | undefined = undefined,\n  accountOverride extends Account | Address | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SimulateContractParameters<\n    abi,\n    functionName,\n    args,\n    chain,\n    chainOverride,\n    accountOverride\n  >,\n): Promise<\n  SimulateContractReturnType<\n    abi,\n    functionName,\n    args,\n    chain,\n    account,\n    chainOverride,\n    accountOverride\n  >\n> {\n  const { abi, address, args, dataSuffix, functionName, ...callRequest } =\n    parameters as SimulateContractParameters\n\n  const account = callRequest.account\n    ? parseAccount(callRequest.account)\n    : client.account\n  const calldata = encodeFunctionData({ abi, args, functionName })\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      batch: false,\n      data: `${calldata}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n      to: address,\n      ...callRequest,\n      account,\n    })\n    const result = decodeFunctionResult({\n      abi,\n      args,\n      functionName,\n      data: data || '0x',\n    })\n    const minimizedAbi = abi.filter(\n      (abiItem) =>\n        'name' in abiItem && abiItem.name === parameters.functionName,\n    )\n    return {\n      result,\n      request: {\n        abi: minimizedAbi,\n        address,\n        args,\n        dataSuffix,\n        functionName,\n        ...callRequest,\n        account,\n      },\n    } as unknown as SimulateContractReturnType<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride,\n      accountOverride\n    >\n  } catch (error) {\n    throw getContractError(error as BaseError, {\n      abi,\n      address,\n      args,\n      docsPath: '/docs/contract/simulateContract',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n","import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ByteArray,\n  Hex,\n  SignableMessage,\n  Signature,\n} from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyMessageParameters = Prettify<\n  Omit<VerifyHashParameters, 'hash'> & {\n    /** The address that signed the original message. */\n    address: Address\n    /** The message to be verified. */\n    message: SignableMessage\n    /** The signature that was generated by signing the message with the address's private key. */\n    signature: Hex | ByteArray | Signature\n  }\n>\n\nexport type VerifyMessageReturnType = boolean\n\nexport type VerifyMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, message, signature, ...callRequest }: VerifyMessageParameters,\n): Promise<VerifyMessageReturnType> {\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n","import type { Address, TypedData } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type HashTypedDataErrorType,\n  hashTypedData,\n} from '../../utils/signature/hashTypedData.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = Omit<VerifyHashParameters, 'hash'> &\n  TypedDataDefinition<typedData, primaryType> & {\n    /** The address to verify the typed data for. */\n    address: Address\n    /** The signature to verify */\n    signature: Hex | ByteArray | Signature\n  }\n\nexport type VerifyTypedDataReturnType = boolean\n\nexport type VerifyTypedDataErrorType =\n  | HashTypedDataErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n  chain extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: VerifyTypedDataParameters<typedData, primaryType>,\n): Promise<VerifyTypedDataReturnType> {\n  const {\n    address,\n    signature,\n    message,\n    primaryType,\n    types,\n    domain,\n    ...callRequest\n  } = parameters as VerifyTypedDataParameters\n  const hash = hashTypedData({ message, primaryType, types, domain })\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BlockNotFoundError } from '../../errors/block.js'\nimport {\n  TransactionNotFoundError,\n  TransactionReceiptNotFoundError,\n  WaitForTransactionReceiptTimeoutError,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Transaction } from '../../types/transaction.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport {\n  type WithRetryParameters,\n  withRetry,\n} from '../../utils/promise/withRetry.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport { type GetBlockErrorType, getBlock } from './getBlock.js'\nimport {\n  type GetTransactionErrorType,\n  type GetTransactionReturnType,\n  getTransaction,\n} from './getTransaction.js'\nimport {\n  type GetTransactionReceiptErrorType,\n  type GetTransactionReceiptReturnType,\n  getTransactionReceipt,\n} from './getTransactionReceipt.js'\nimport {\n  type WatchBlockNumberErrorType,\n  watchBlockNumber,\n} from './watchBlockNumber.js'\n\nexport type ReplacementReason = 'cancelled' | 'replaced' | 'repriced'\nexport type ReplacementReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n> = {\n  reason: ReplacementReason\n  replacedTransaction: Transaction\n  transaction: Transaction\n  transactionReceipt: GetTransactionReceiptReturnType<TChain>\n}\n\nexport type WaitForTransactionReceiptReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n> = GetTransactionReceiptReturnType<TChain>\n\nexport type WaitForTransactionReceiptParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = {\n  /**\n   * The number of confirmations (blocks that have passed) to wait before resolving.\n   * @default 1\n   */\n  confirmations?: number | undefined\n  /** The hash of the transaction. */\n  hash: Hash\n  /** Optional callback to emit if the transaction has been replaced. */\n  onReplaced?: ((response: ReplacementReturnType<TChain>) => void) | undefined\n  /**\n   * Polling frequency (in ms). Defaults to the client's pollingInterval config.\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number | undefined\n  /**\n   * Number of times to retry if the transaction or block is not found.\n   * @default 6 (exponential backoff)\n   */\n  retryCount?: WithRetryParameters['retryCount'] | undefined\n  /**\n   * Time to wait (in ms) between retries.\n   * @default `({ count }) => ~~(1 << count) * 200` (exponential backoff)\n   */\n  retryDelay?: WithRetryParameters['delay'] | undefined\n  /** Optional timeout (in milliseconds) to wait before stopping polling. */\n  timeout?: number | undefined\n}\n\nexport type WaitForTransactionReceiptErrorType =\n  | ObserveErrorType\n  | GetBlockErrorType\n  | GetTransactionErrorType\n  | GetTransactionReceiptErrorType\n  | WatchBlockNumberErrorType\n  | ErrorType\n\n/**\n * Waits for the [Transaction](https://viem.sh/docs/glossary/terms#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt).\n *\n * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\n *   - If a Transaction has been replaced:\n *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\n *     - Checks if one of the Transactions is a replacement\n *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\n *\n * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\n *\n * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\n *\n * There are 3 types of Transaction Replacement reasons:\n *\n * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\n * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\n * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\n *\n * @param client - Client to use\n * @param parameters - {@link WaitForTransactionReceiptParameters}\n * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, waitForTransactionReceipt, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await waitForTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function waitForTransactionReceipt<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    confirmations = 1,\n    hash,\n    onReplaced,\n    pollingInterval = client.pollingInterval,\n    retryCount = 6,\n    retryDelay = ({ count }) => ~~(1 << count) * 200, // exponential backoff\n    timeout,\n  }: WaitForTransactionReceiptParameters<TChain>,\n): Promise<WaitForTransactionReceiptReturnType<TChain>> {\n  const observerId = stringify(['waitForTransactionReceipt', client.uid, hash])\n\n  let count = 0\n  let transaction: GetTransactionReturnType<TChain> | undefined\n  let replacedTransaction: GetTransactionReturnType<TChain> | undefined\n  let receipt: GetTransactionReceiptReturnType<TChain>\n  let retrying = false\n\n  return new Promise((resolve, reject) => {\n    if (timeout)\n      setTimeout(\n        () => reject(new WaitForTransactionReceiptTimeoutError({ hash })),\n        timeout,\n      )\n\n    const _unobserve = observe(\n      observerId,\n      { onReplaced, resolve, reject },\n      (emit) => {\n        const _unwatch = getAction(\n          client,\n          watchBlockNumber,\n          'watchBlockNumber',\n        )({\n          emitMissed: true,\n          emitOnBegin: true,\n          poll: true,\n          pollingInterval,\n          async onBlockNumber(blockNumber_) {\n            const done = (fn: () => void) => {\n              _unwatch()\n              fn()\n              _unobserve()\n            }\n\n            let blockNumber = blockNumber_\n\n            if (retrying) return\n            if (count > retryCount)\n              done(() =>\n                emit.reject(\n                  new WaitForTransactionReceiptTimeoutError({ hash }),\n                ),\n              )\n\n            try {\n              // If we already have a valid receipt, let's check if we have enough\n              // confirmations. If we do, then we can resolve.\n              if (receipt) {\n                if (\n                  confirmations > 1 &&\n                  (!receipt.blockNumber ||\n                    blockNumber - receipt.blockNumber + 1n < confirmations)\n                )\n                  return\n\n                done(() => emit.resolve(receipt))\n                return\n              }\n\n              // Get the transaction to check if it's been replaced.\n              // We need to retry as some RPC Providers may be slow to sync\n              // up mined transactions.\n              if (!transaction) {\n                retrying = true\n                await withRetry(\n                  async () => {\n                    transaction = (await getAction(\n                      client,\n                      getTransaction,\n                      'getTransaction',\n                    )({ hash })) as GetTransactionReturnType<TChain>\n                    if (transaction.blockNumber)\n                      blockNumber = transaction.blockNumber\n                  },\n                  {\n                    delay: retryDelay,\n                    retryCount,\n                  },\n                )\n                retrying = false\n              }\n\n              // Get the receipt to check if it's been processed.\n              receipt = await getAction(\n                client,\n                getTransactionReceipt,\n                'getTransactionReceipt',\n              )({ hash })\n\n              // Check if we have enough confirmations. If not, continue polling.\n              if (\n                confirmations > 1 &&\n                (!receipt.blockNumber ||\n                  blockNumber - receipt.blockNumber + 1n < confirmations)\n              )\n                return\n\n              done(() => emit.resolve(receipt))\n            } catch (err) {\n              // If the receipt is not found, the transaction will be pending.\n              // We need to check if it has potentially been replaced.\n              if (\n                err instanceof TransactionNotFoundError ||\n                err instanceof TransactionReceiptNotFoundError\n              ) {\n                if (!transaction) {\n                  retrying = false\n                  return\n                }\n\n                try {\n                  replacedTransaction = transaction\n\n                  // Let's retrieve the transactions from the current block.\n                  // We need to retry as some RPC Providers may be slow to sync\n                  // up mined blocks.\n                  retrying = true\n                  const block = await withRetry(\n                    () =>\n                      getAction(\n                        client,\n                        getBlock,\n                        'getBlock',\n                      )({\n                        blockNumber,\n                        includeTransactions: true,\n                      }),\n                    {\n                      delay: retryDelay,\n                      retryCount,\n                      shouldRetry: ({ error }) =>\n                        error instanceof BlockNotFoundError,\n                    },\n                  )\n                  retrying = false\n\n                  const replacementTransaction = (\n                    block.transactions as {} as Transaction[]\n                  ).find(\n                    ({ from, nonce }) =>\n                      from === replacedTransaction!.from &&\n                      nonce === replacedTransaction!.nonce,\n                  )\n\n                  // If we couldn't find a replacement transaction, continue polling.\n                  if (!replacementTransaction) return\n\n                  // If we found a replacement transaction, return it's receipt.\n                  receipt = await getAction(\n                    client,\n                    getTransactionReceipt,\n                    'getTransactionReceipt',\n                  )({\n                    hash: replacementTransaction.hash,\n                  })\n\n                  // Check if we have enough confirmations. If not, continue polling.\n                  if (\n                    confirmations > 1 &&\n                    (!receipt.blockNumber ||\n                      blockNumber - receipt.blockNumber + 1n < confirmations)\n                  )\n                    return\n\n                  let reason: ReplacementReason = 'replaced'\n                  if (\n                    replacementTransaction.to === replacedTransaction.to &&\n                    replacementTransaction.value === replacedTransaction.value\n                  ) {\n                    reason = 'repriced'\n                  } else if (\n                    replacementTransaction.from === replacementTransaction.to &&\n                    replacementTransaction.value === 0n\n                  ) {\n                    reason = 'cancelled'\n                  }\n\n                  done(() => {\n                    emit.onReplaced?.({\n                      reason,\n                      replacedTransaction: replacedTransaction! as any,\n                      transaction: replacementTransaction,\n                      transactionReceipt: receipt,\n                    })\n                    emit.resolve(receipt)\n                  })\n                } catch (err_) {\n                  done(() => emit.reject(err_))\n                }\n              } else {\n                done(() => emit.reject(err))\n              }\n            } finally {\n              count++\n            }\n          },\n        })\n      },\n    )\n  })\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { HasTransportType } from '../../types/transport.js'\nimport { formatBlock } from '../../utils/formatters/block.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { observe } from '../../utils/observe.js'\nimport { type PollErrorType, poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { type GetBlockReturnType, getBlock } from './getBlock.js'\n\nexport type OnBlockParameter<\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = GetBlockReturnType<TChain, TIncludeTransactions, TBlockTag>\n\nexport type OnBlock<\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = (\n  block: OnBlockParameter<TChain, TIncludeTransactions, TBlockTag>,\n  prevBlock:\n    | OnBlockParameter<TChain, TIncludeTransactions, TBlockTag>\n    | undefined,\n) => void\n\nexport type WatchBlocksParameters<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = {\n  /** The callback to call when a new block is received. */\n  onBlock: OnBlock<TChain, TIncludeTransactions, TBlockTag>\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n} & (\n  | (HasTransportType<TTransport, 'webSocket'> extends true\n      ? {\n          blockTag?: undefined\n          emitMissed?: undefined\n          emitOnBegin?: undefined\n          includeTransactions?: undefined\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\n          poll?: false | undefined\n          pollingInterval?: undefined\n        }\n      : never)\n  | {\n      /** The block tag. Defaults to \"latest\". */\n      blockTag?: TBlockTag | BlockTag | undefined\n      /** Whether or not to emit the missed blocks to the callback. */\n      emitMissed?: boolean | undefined\n      /** Whether or not to emit the block to the callback when the subscription opens. */\n      emitOnBegin?: boolean | undefined\n      /** Whether or not to include transaction data in the response. */\n      includeTransactions?: TIncludeTransactions | undefined\n      poll?: true | undefined\n      /** Polling frequency (in ms). Defaults to the client's pollingInterval config. */\n      pollingInterval?: number | undefined\n    }\n)\n\nexport type WatchBlocksReturnType = () => void\n\nexport type WatchBlocksErrorType =\n  | StringifyErrorType\n  | PollErrorType\n  | ErrorType\n\n/**\n * Watches and returns information for incoming blocks.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchBlocks\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\n * - JSON-RPC Methods:\n *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchBlocksParameters}\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n *\n * @example\n * import { createPublicClient, watchBlocks, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchBlocks(client, {\n *   onBlock: (block) => console.log(block),\n * })\n */\nexport function watchBlocks<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<TTransport, TChain>,\n  {\n    blockTag = 'latest',\n    emitMissed = false,\n    emitOnBegin = false,\n    onBlock,\n    onError,\n    includeTransactions: includeTransactions_,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchBlocksParameters<TTransport, TChain, TIncludeTransactions, TBlockTag>,\n): WatchBlocksReturnType {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (client.transport.type === 'webSocket') return false\n    if (\n      client.transport.type === 'fallback' &&\n      client.transport.transports[0].config.type === 'webSocket'\n    )\n      return false\n    return true\n  })()\n  const includeTransactions = includeTransactions_ ?? false\n\n  let prevBlock:\n    | GetBlockReturnType<TChain, false | TIncludeTransactions, 'latest'>\n    | undefined\n\n  const pollBlocks = () => {\n    const observerId = stringify([\n      'watchBlocks',\n      client.uid,\n      blockTag,\n      emitMissed,\n      emitOnBegin,\n      includeTransactions,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onBlock, onError }, (emit) =>\n      poll(\n        async () => {\n          try {\n            const block = await getAction(\n              client,\n              getBlock,\n              'getBlock',\n            )({\n              blockTag,\n              includeTransactions,\n            })\n            if (block.number && prevBlock?.number) {\n              // If the current block number is the same as the previous,\n              // we can skip.\n              if (block.number === prevBlock.number) return\n\n              // If we have missed out on some previous blocks, and the\n              // `emitMissed` flag is truthy, let's emit those blocks.\n              if (block.number - prevBlock.number > 1 && emitMissed) {\n                for (let i = prevBlock?.number + 1n; i < block.number; i++) {\n                  const block = (await getAction(\n                    client,\n                    getBlock,\n                    'getBlock',\n                  )({\n                    blockNumber: i,\n                    includeTransactions,\n                  })) as GetBlockReturnType<TChain>\n                  emit.onBlock(block as any, prevBlock as any)\n                  prevBlock = block\n                }\n              }\n            }\n\n            if (\n              // If no previous block exists, emit.\n              !prevBlock?.number ||\n              // If the block tag is \"pending\" with no block number, emit.\n              (blockTag === 'pending' && !block?.number) ||\n              // If the next block number is greater than the previous block number, emit.\n              // We don't want to emit blocks in the past.\n              (block.number && block.number > prevBlock.number)\n            ) {\n              emit.onBlock(block as any, prevBlock as any)\n              prevBlock = block as any\n            }\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin,\n          interval: pollingInterval,\n        },\n      ),\n    )\n  }\n\n  const subscribeBlocks = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const transport = (() => {\n          if (client.transport.type === 'fallback') {\n            const transport = client.transport.transports.find(\n              (transport: ReturnType<Transport>) =>\n                transport.config.type === 'webSocket',\n            )\n            if (!transport) return client.transport\n            return transport.value\n          }\n          return client.transport\n        })()\n\n        const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n          params: ['newHeads'],\n          onData(data: any) {\n            if (!active) return\n            const format =\n              client.chain?.formatters?.block?.format || formatBlock\n            const block = format(data.result)\n            onBlock(block, prevBlock as any)\n            prevBlock = block\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling ? pollBlocks() : subscribeBlocks()\n}\n","import type { Abi, Address, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\n\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber } from '../../types/block.js'\nimport type {\n  ContractEventArgs,\n  ContractEventName,\n} from '../../types/contract.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport {\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\nimport { createContractEventFilter } from './createContractEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport {\n  type GetContractEventsParameters,\n  getContractEvents,\n} from './getContractEvents.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type WatchContractEventOnLogsParameter<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n> = abi extends Abi\n  ? Abi extends abi\n    ? Log[]\n    : Log<bigint, number, false, ExtractAbiEvent<abi, eventName>, strict>[]\n  : Log[]\n\nexport type WatchContractEventOnLogsFn<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n> = (logs: WatchContractEventOnLogsParameter<abi, eventName, strict>) => void\n\nexport type WatchContractEventParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[] | undefined\n  /** Contract ABI. */\n  abi: abi\n  args?:\n    | ContractEventArgs<\n        abi,\n        eventName extends ContractEventName<abi>\n          ? eventName\n          : ContractEventName<abi>\n      >\n    | undefined\n  /** Contract event. */\n  eventName?: eventName | ContractEventName<abi> | undefined\n  /** Block to start listening from. */\n  fromBlock?: BlockNumber<bigint> | undefined\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchContractEventOnLogsFn<\n    abi,\n    eventName extends ContractEventName<abi>\n      ? eventName\n      : ContractEventName<abi>,\n    strict\n  >\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: strict | boolean | undefined\n} & GetPollOptions<transport>\n\nexport type WatchContractEventReturnType = () => void\n\nexport type WatchContractEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted contract event logs.\n *\n * - Docs: https://viem.sh/docs/contract/watchContractEvent\n *\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n *\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchContractEventParameters}\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchContractEvent } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchContractEvent(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n *   eventName: 'Transfer',\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchContractEvent<\n  chain extends Chain | undefined,\n  const abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi> | undefined = undefined,\n  strict extends boolean | undefined = undefined,\n  transport extends Transport = Transport,\n>(\n  client: Client<transport, chain>,\n  parameters: WatchContractEventParameters<abi, eventName, strict, transport>,\n): WatchContractEventReturnType {\n  const {\n    abi,\n    address,\n    args,\n    batch = true,\n    eventName,\n    fromBlock,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  } = parameters\n\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (typeof fromBlock === 'bigint') return true\n    if (client.transport.type === 'webSocket') return false\n    if (\n      client.transport.type === 'fallback' &&\n      client.transport.transports[0].config.type === 'webSocket'\n    )\n      return false\n    return true\n  })()\n\n  const pollContractEvent = () => {\n    const strict = strict_ ?? false\n    const observerId = stringify([\n      'watchContractEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      eventName,\n      pollingInterval,\n      strict,\n      fromBlock,\n    ])\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n\n      let filter: Filter<'event', abi, eventName> | undefined\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createContractEventFilter,\n                'createContractEventFilter',\n              )({\n                abi,\n                address,\n                args: args as any,\n                eventName: eventName as any,\n                strict: strict as any,\n                fromBlock,\n              })) as Filter<'event', abi, eventName>\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                logs = await getAction(\n                  client,\n                  getContractEvents,\n                  'getContractEvents',\n                )({\n                  abi,\n                  address,\n                  args,\n                  eventName,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                  strict,\n                } as {} as GetContractEventsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitalize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeContractEvent = () => {\n    const strict = strict_ ?? false\n    const observerId = stringify([\n      'watchContractEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      eventName,\n      pollingInterval,\n      strict,\n    ])\n\n    let active = true\n    let unsubscribe = () => (active = false)\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      ;(async () => {\n        try {\n          const transport = (() => {\n            if (client.transport.type === 'fallback') {\n              const transport = client.transport.transports.find(\n                (transport: ReturnType<Transport>) =>\n                  transport.config.type === 'webSocket',\n              )\n              if (!transport) return client.transport\n              return transport.value\n            }\n            return client.transport\n          })()\n\n          const topics: LogTopic[] = eventName\n            ? encodeEventTopics({\n                abi: abi,\n                eventName: eventName,\n                args,\n              } as EncodeEventTopicsParameters)\n            : []\n\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n            params: ['logs', { address, topics }],\n            onData(data: any) {\n              if (!active) return\n              const log = data.result\n              try {\n                const { eventName, args } = decodeEventLog({\n                  abi: abi,\n                  data: log.data,\n                  topics: log.topics as any,\n                  strict: strict_,\n                })\n                const formatted = formatLog(log, {\n                  args,\n                  eventName: eventName as string,\n                })\n                emit.onLogs([formatted] as any)\n              } catch (err) {\n                let eventName: string | undefined\n                let isUnnamed: boolean | undefined\n                if (\n                  err instanceof DecodeLogDataMismatch ||\n                  err instanceof DecodeLogTopicsMismatch\n                ) {\n                  // If strict mode is on, and log data/topics do not match event definition, skip.\n                  if (strict_) return\n                  eventName = err.abiItem.name\n                  isUnnamed = err.abiItem.inputs?.some(\n                    (x) => !('name' in x && x.name),\n                  )\n                }\n\n                // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n                const formatted = formatLog(log, {\n                  args: isUnnamed ? [] : {},\n                  eventName,\n                })\n                emit.onLogs([formatted] as any)\n              }\n            },\n            onError(error: Error) {\n              emit.onError?.(error)\n            },\n          })\n          unsubscribe = unsubscribe_\n          if (!active) unsubscribe()\n        } catch (err) {\n          onError?.(err as Error)\n        }\n      })()\n      return () => unsubscribe()\n    })\n  }\n\n  return enablePolling ? pollContractEvent() : subscribeContractEvent()\n}\n","import type { AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport {\n  type EncodeEventTopicsParameters,\n  encodeEventTopics,\n} from '../../utils/abi/encodeEventTopics.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockNumber } from '../../types/block.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport { formatLog } from '../../utils/formatters/log.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type CreateEventFilterParameters,\n  createEventFilter,\n} from './createEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { type GetLogsParameters, getLogs } from './getLogs.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type WatchEventOnLogsParameter<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TEventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = Log<bigint, number, false, TAbiEvent, TStrict, TAbiEvents, TEventName>[]\nexport type WatchEventOnLogsFn<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = (\n  logs: WatchEventOnLogsParameter<TAbiEvent, TAbiEvents, TStrict, _EventName>,\n) => void\n\nexport type WatchEventParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TTransport extends Transport = Transport,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[] | undefined\n  /** Block to start listening from. */\n  fromBlock?: BlockNumber<bigint> | undefined\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchEventOnLogsFn<TAbiEvent, TAbiEvents, TStrict, _EventName>\n} & GetPollOptions<TTransport> &\n  (\n    | {\n        event: TAbiEvent\n        events?: never | undefined\n        args?: MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName> | undefined\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: TStrict | undefined\n      }\n    | {\n        event?: never | undefined\n        events?: TAbiEvents | undefined\n        args?: never | undefined\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: TStrict | undefined\n      }\n    | {\n        event?: never | undefined\n        events?: never | undefined\n        args?: never | undefined\n        strict?: never | undefined\n      }\n  )\n\nexport type WatchEventReturnType = () => void\n\nexport type WatchEventErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TTransport extends Transport = Transport,\n  _EventName extends string | undefined = undefined,\n>(\n  client: Client<TTransport, TChain>,\n  {\n    address,\n    args,\n    batch = true,\n    event,\n    events,\n    fromBlock,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  }: WatchEventParameters<TAbiEvent, TAbiEvents, TStrict, TTransport>,\n): WatchEventReturnType {\n  const enablePolling = (() => {\n    if (typeof poll_ !== 'undefined') return poll_\n    if (typeof fromBlock === 'bigint') return true\n    if (client.transport.type === 'webSocket') return false\n    if (\n      client.transport.type === 'fallback' &&\n      client.transport.transports[0].config.type === 'webSocket'\n    )\n      return false\n    return true\n  })()\n  const strict = strict_ ?? false\n\n  const pollEvent = () => {\n    const observerId = stringify([\n      'watchEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      event,\n      pollingInterval,\n      fromBlock,\n    ])\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n\n      let filter: Filter<'event', TAbiEvents, _EventName, any>\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await getAction(\n                client,\n                createEventFilter as any,\n                'createEventFilter',\n              )({\n                address,\n                args,\n                event: event!,\n                events,\n                strict,\n                fromBlock,\n              } as unknown as CreateEventFilterParameters)) as unknown as Filter<\n                'event',\n                TAbiEvents,\n                _EventName\n              >\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getAction(\n                client,\n                getFilterChanges,\n                'getFilterChanges',\n              )({ filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getAction(\n                client,\n                getBlockNumber,\n                'getBlockNumber',\n              )({})\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                logs = await getAction(\n                  client,\n                  getLogs,\n                  'getLogs',\n                )({\n                  address,\n                  args,\n                  event: event!,\n                  events,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                } as unknown as GetLogsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else for (const log of logs) emit.onLogs([log] as any)\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitalize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeEvent = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const transport = (() => {\n          if (client.transport.type === 'fallback') {\n            const transport = client.transport.transports.find(\n              (transport: ReturnType<Transport>) =>\n                transport.config.type === 'webSocket',\n            )\n            if (!transport) return client.transport\n            return transport.value\n          }\n          return client.transport\n        })()\n\n        const events_ = events ?? (event ? [event] : undefined)\n        let topics: LogTopic[] = []\n        if (events_) {\n          topics = [\n            (events_ as AbiEvent[]).flatMap((event) =>\n              encodeEventTopics({\n                abi: [event],\n                eventName: (event as AbiEvent).name,\n                args,\n              } as EncodeEventTopicsParameters),\n            ),\n          ]\n          if (event) topics = topics[0] as LogTopic[]\n        }\n\n        const { unsubscribe: unsubscribe_ } = await transport.subscribe({\n          params: ['logs', { address, topics }],\n          onData(data: any) {\n            if (!active) return\n            const log = data.result\n            try {\n              const { eventName, args } = decodeEventLog({\n                abi: events_ ?? [],\n                data: log.data,\n                topics: log.topics,\n                strict,\n              })\n              const formatted = formatLog(log, { args, eventName })\n              onLogs([formatted] as any)\n            } catch (err) {\n              let eventName: string | undefined\n              let isUnnamed: boolean | undefined\n              if (\n                err instanceof DecodeLogDataMismatch ||\n                err instanceof DecodeLogTopicsMismatch\n              ) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict_) return\n                eventName = err.abiItem.name\n                isUnnamed = err.abiItem.inputs?.some(\n                  (x) => !('name' in x && x.name),\n                )\n              }\n\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n              const formatted = formatLog(log, {\n                args: isUnnamed ? [] : {},\n                eventName,\n              })\n              onLogs([formatted] as any)\n            }\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling ? pollEvent() : subscribeEvent()\n}\n","import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { GetPollOptions } from '../../types/transport.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\n\nimport { createPendingTransactionFilter } from './createPendingTransactionFilter.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\nexport type OnTransactionsParameter = Hash[]\nexport type OnTransactionsFn = (transactions: OnTransactionsParameter) => void\n\nexport type WatchPendingTransactionsParameters<\n  TTransport extends Transport = Transport,\n> = {\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: ((error: Error) => void) | undefined\n  /** The callback to call when new transactions are received. */\n  onTransactions: OnTransactionsFn\n} & GetPollOptions<TTransport>\n\nexport type WatchPendingTransactionsReturnType = () => void\n\nexport type WatchPendingTransactionsErrorType =\n  | StringifyErrorType\n  | ObserveErrorType\n  | ErrorType\n\n/**\n * Watches and returns pending transaction hashes.\n *\n * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\n * - JSON-RPC Methods:\n *   - When `poll: true`\n *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n *\n * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\n *\n * @param client - Client to use\n * @param parameters - {@link WatchPendingTransactionsParameters}\n * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchPendingTransactions } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = await watchPendingTransactions(client, {\n *   onTransactions: (hashes) => console.log(hashes),\n * })\n */\nexport function watchPendingTransactions<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n>(\n  client: Client<TTransport, TChain>,\n  {\n    batch = true,\n    onError,\n    onTransactions,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n  }: WatchPendingTransactionsParameters<TTransport>,\n) {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n\n  const pollPendingTransactions = () => {\n    const observerId = stringify([\n      'watchPendingTransactions',\n      client.uid,\n      batch,\n      pollingInterval,\n    ])\n    return observe(observerId, { onTransactions, onError }, (emit) => {\n      let filter: Filter<'transaction'>\n\n      const unwatch = poll(\n        async () => {\n          try {\n            if (!filter) {\n              try {\n                filter = await getAction(\n                  client,\n                  createPendingTransactionFilter,\n                  'createPendingTransactionFilter',\n                )({})\n                return\n              } catch (err) {\n                unwatch()\n                throw err\n              }\n            }\n\n            const hashes = await getAction(\n              client,\n              getFilterChanges,\n              'getFilterChanges',\n            )({ filter })\n            if (hashes.length === 0) return\n            if (batch) emit.onTransactions(hashes)\n            else for (const hash of hashes) emit.onTransactions([hash])\n          } catch (err) {\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter)\n          await getAction(\n            client,\n            uninstallFilter,\n            'uninstallFilter',\n          )({ filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribePendingTransactions = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['newPendingTransactions'],\n          onData(data: any) {\n            if (!active) return\n            const transaction = data.result\n            onTransactions([transaction])\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return () => unsubscribe()\n  }\n\n  return enablePolling\n    ? pollPendingTransactions()\n    : subscribePendingTransactions()\n}\n","import type { Address } from 'abitype'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Account, ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { PublicRpcSchema, RpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type PublicActions, publicActions } from './decorators/public.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type PublicClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n    | 'batch'\n    | 'cacheTime'\n    | 'ccipRead'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'rpcSchema'\n    | 'transport'\n  >\n>\n\nexport type PublicClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Client<\n    transport,\n    chain,\n    accountOrAddress,\n    rpcSchema extends RpcSchema\n      ? [...PublicRpcSchema, ...rpcSchema]\n      : PublicRpcSchema,\n    PublicActions<transport, chain>\n  >\n>\n\nexport type CreatePublicClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\n *\n * - Docs: https://viem.sh/docs/clients/public\n *\n * A Public Client is an interface to \"public\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\n *\n * @param config - {@link PublicClientConfig}\n * @returns A Public Client. {@link PublicClient}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createPublicClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n>(\n  parameters: PublicClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n): PublicClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema> {\n  const { key = 'public', name = 'Public Client' } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    type: 'publicClient',\n  })\n  return client.extend(publicActions) as any\n}\n","import type { Address } from 'abitype'\n\nimport type { JsonRpcAccount } from '../accounts/types.js'\nimport type { ParseAccountErrorType } from '../accounts/utils/parseAccount.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Account } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type {\n  EIP1193RequestFn,\n  EIP1474Methods,\n  RpcSchema,\n} from '../types/eip1193.js'\nimport type { ExactPartial, Prettify } from '../types/utils.js'\nimport { parseAccount } from '../utils/accounts.js'\nimport type {\n  CcipRequestParameters,\n  CcipRequestReturnType,\n} from '../utils/ccip.js'\nimport { uid } from '../utils/uid.js'\nimport type { PublicActions } from './decorators/public.js'\nimport type { WalletActions } from './decorators/wallet.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type ClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = {\n  /** The Account to use for the Client. This will be used for Actions that require an account as an argument. */\n  account?: accountOrAddress | Account | Address | undefined\n  /** Flags for batch settings. */\n  batch?:\n    | {\n        /** Toggle to enable `eth_call` multicall aggregation. */\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined\n      }\n    | undefined\n  /**\n   * Time (in ms) that cached data will remain in memory.\n   * @default 4_000\n   */\n  cacheTime?: number | undefined\n  /**\n   * [CCIP Read](https://eips.ethereum.org/EIPS/eip-3668) configuration.\n   * If `false`, the client will not support offchain CCIP lookups.\n   */\n  ccipRead?:\n    | {\n        /**\n         * A function that will be called to make the offchain CCIP lookup request.\n         * @see https://eips.ethereum.org/EIPS/eip-3668#client-lookup-protocol\n         */\n        request?: (\n          parameters: CcipRequestParameters,\n        ) => Promise<CcipRequestReturnType>\n      }\n    | false\n    | undefined\n  /** Chain for the client. */\n  chain?: Chain | undefined | chain\n  /** A key for the client. */\n  key?: string | undefined\n  /** A name for the client. */\n  name?: string | undefined\n  /**\n   * Frequency (in ms) for polling enabled actions & events.\n   * @default 4_000\n   */\n  pollingInterval?: number | undefined\n  /**\n   * Typed JSON-RPC schema for the client.\n   */\n  rpcSchema?: rpcSchema | undefined\n  /** The RPC transport */\n  transport: transport\n  /** The type of client. */\n  type?: string | undefined\n}\n\n// Actions that are used internally by other Actions (ie. `call` is used by `readContract`).\n// They are allowed to be extended, but must conform to their parameter & return type interfaces.\n// Example: an extended `call` action must accept `CallParameters` as parameters,\n// and conform to the `CallReturnType` return type.\ntype ExtendableProtectedActions<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = Pick<\n  PublicActions<transport, chain, account>,\n  | 'call'\n  | 'createContractEventFilter'\n  | 'createEventFilter'\n  | 'estimateContractGas'\n  | 'estimateGas'\n  | 'getBlock'\n  | 'getBlockNumber'\n  | 'getChainId'\n  | 'getContractEvents'\n  | 'getEnsText'\n  | 'getFilterChanges'\n  | 'getGasPrice'\n  | 'getLogs'\n  | 'getTransaction'\n  | 'getTransactionCount'\n  | 'getTransactionReceipt'\n  | 'prepareTransactionRequest'\n  | 'readContract'\n  | 'sendRawTransaction'\n  | 'simulateContract'\n  | 'uninstallFilter'\n  | 'watchBlockNumber'\n  | 'watchContractEvent'\n> &\n  Pick<WalletActions<chain, account>, 'sendTransaction' | 'writeContract'>\n\n// TODO: Move `transport` to slot index 2 since `chain` and `account` used more frequently.\n// Otherwise, we end up with a lot of `Client<Transport, chain, account>` in actions.\nexport type Client<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n  extended extends Extended | undefined = Extended | undefined,\n> = Client_Base<transport, chain, account, rpcSchema> &\n  (extended extends Extended ? extended : unknown) & {\n    extend: <\n      const client extends Extended &\n        ExactPartial<ExtendableProtectedActions<transport, chain, account>>,\n    >(\n      fn: (\n        client: Client<transport, chain, account, rpcSchema, extended>,\n      ) => client,\n    ) => Client<\n      transport,\n      chain,\n      account,\n      rpcSchema,\n      Prettify<client> & (extended extends Extended ? extended : unknown)\n    >\n  }\n\ntype Client_Base<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = {\n  /** The Account of the Client. */\n  account: account\n  /** Flags for batch settings. */\n  batch?: ClientConfig['batch'] | undefined\n  /** Time (in ms) that cached data will remain in memory. */\n  cacheTime: number\n  /** [CCIP Read](https://eips.ethereum.org/EIPS/eip-3668) configuration. */\n  ccipRead?: ClientConfig['ccipRead'] | undefined\n  /** Chain for the client. */\n  chain: chain\n  /** A key for the client. */\n  key: string\n  /** A name for the client. */\n  name: string\n  /** Frequency (in ms) for polling enabled actions & events. Defaults to 4_000 milliseconds. */\n  pollingInterval: number\n  /** Request function wrapped with friendly error handling */\n  request: EIP1193RequestFn<\n    rpcSchema extends undefined ? EIP1474Methods : rpcSchema\n  >\n  /** The RPC transport */\n  transport: ReturnType<transport>['config'] & ReturnType<transport>['value']\n  /** The type of client. */\n  type: string\n  /** A unique ID for the client. */\n  uid: string\n}\n\ntype Extended = Prettify<\n  // disallow redefining base properties\n  { [_ in keyof Client_Base]?: undefined } & {\n    [key: string]: unknown\n  }\n>\n\nexport type MulticallBatchOptions = {\n  /** The maximum size (in bytes) for each calldata chunk. @default 1_024 */\n  batchSize?: number | undefined\n  /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n  wait?: number | undefined\n}\n\nexport type CreateClientErrorType = ParseAccountErrorType | ErrorType\n\nexport function createClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n>(\n  parameters: ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n): Prettify<\n  Client<\n    transport,\n    chain,\n    accountOrAddress extends Address\n      ? Prettify<JsonRpcAccount<accountOrAddress>>\n      : accountOrAddress,\n    rpcSchema\n  >\n>\n\nexport function createClient(parameters: ClientConfig): Client {\n  const {\n    batch,\n    cacheTime = parameters.pollingInterval ?? 4_000,\n    ccipRead,\n    key = 'base',\n    name = 'Base Client',\n    pollingInterval = 4_000,\n    type = 'base',\n  } = parameters\n\n  const chain = parameters.chain\n  const account = parameters.account\n    ? parseAccount(parameters.account)\n    : undefined\n  const { config, request, value } = parameters.transport({\n    chain,\n    pollingInterval,\n  })\n  const transport = { ...config, ...value }\n\n  const client = {\n    account,\n    batch,\n    cacheTime,\n    ccipRead,\n    chain,\n    key,\n    name,\n    pollingInterval,\n    request,\n    transport,\n    type,\n    uid: uid(),\n  }\n\n  function extend(base: typeof client) {\n    type ExtendFn = (base: typeof client) => unknown\n    return (extendFn: ExtendFn) => {\n      const extended = extendFn(base) as Extended\n      for (const key in client) delete extended[key]\n      const combined = { ...base, ...extended }\n      return Object.assign(combined, { extend: extend(combined as any) })\n    }\n  }\n\n  return Object.assign(client, { extend: extend(client) as any })\n}\n\n/**\n * Defines a typed JSON-RPC schema for the client.\n * Note: This is a runtime noop function.\n */\nexport function rpcSchema<rpcSchema extends RpcSchema>(): rpcSchema {\n  return null as any\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain, ExtractChain } from '../../types/chain.js'\n\nexport type ExtractChainParameters<\n  chains extends readonly Chain[],\n  chainId extends chains[number]['id'],\n> = {\n  chains: chains\n  id: chainId | chains[number]['id']\n}\n\nexport type ExtractChainReturnType<\n  chains extends readonly Chain[],\n  chainId extends chains[number]['id'],\n> = ExtractChain<chains, chainId>\n\nexport type ExtractChainErrorType = ErrorType\n\nexport function extractChain<\n  const chains extends readonly Chain[],\n  chainId extends chains[number]['id'],\n>({\n  chains,\n  id,\n}: ExtractChainParameters<chains, chainId>): ExtractChainReturnType<\n  chains,\n  chainId\n> {\n  return chains.find((chain) => chain.id === id) as ExtractChainReturnType<\n    chains,\n    chainId\n  >\n}\n","export const aggregate3Signature = '0x82ad56cb'\n","import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { multicall3Abi } from '../../constants/abis.js'\nimport { aggregate3Signature } from '../../constants/contract.js'\nimport { BaseError } from '../../errors/base.js'\nimport {\n  ChainDoesNotSupportContract,\n  ClientChainNotConfiguredError,\n} from '../../errors/chain.js'\nimport {\n  RawContractError,\n  type RawContractErrorType,\n} from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\nimport type { StateOverride } from '../../types/stateOverride.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { ExactPartial, UnionOmit } from '../../types/utils.js'\nimport {\n  type DecodeFunctionResultErrorType,\n  decodeFunctionResult,\n} from '../../utils/abi/decodeFunctionResult.js'\nimport {\n  type EncodeFunctionDataErrorType,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from '../../utils/chain/getChainContractAddress.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\nimport {\n  type GetCallErrorReturnType,\n  getCallError,\n} from '../../utils/errors/getCallError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormatTransactionRequestErrorType,\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type CreateBatchSchedulerErrorType,\n  createBatchScheduler,\n} from '../../utils/promise/createBatchScheduler.js'\nimport {\n  type SerializeStateOverrideErrorType,\n  serializeStateOverride,\n} from '../../utils/stateOverride.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\nimport type {\n  AssertRequestErrorType,\n  AssertRequestParameters,\n} from '../../utils/transaction/assertRequest.js'\n\nexport type FormattedCall<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type CallParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = UnionOmit<FormattedCall<TChain>, 'from'> & {\n  account?: Account | Address | undefined\n  batch?: boolean | undefined\n  stateOverride?: StateOverride | undefined\n} & (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint | undefined\n        blockTag?: never | undefined\n      }\n    | {\n        blockNumber?: never | undefined\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag | undefined\n      }\n  )\n\nexport type CallReturnType = { data: Hex | undefined }\n\nexport type CallErrorType = GetCallErrorReturnType<\n  | ParseAccountErrorType\n  | SerializeStateOverrideErrorType\n  | AssertRequestErrorType\n  | NumberToHexErrorType\n  | FormatTransactionRequestErrorType\n  | ScheduleMulticallErrorType\n  | RequestErrorType\n>\n\n/**\n * Executes a new message call immediately without submitting a transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/call\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n *\n * @param client - Client to use\n * @param parameters - {@link CallParameters}\n * @returns The call data. {@link CallReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { call } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const data = await call(client, {\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n */\nexport async function call<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  args: CallParameters<TChain>,\n): Promise<CallReturnType> {\n  const {\n    account: account_ = client.account,\n    batch = Boolean(client.batch?.multicall),\n    blockNumber,\n    blockTag = 'latest',\n    accessList,\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    stateOverride,\n    ...rest\n  } = args\n  const account = account_ ? parseAccount(account_) : undefined\n\n  try {\n    assertRequest(args as AssertRequestParameters)\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    const rpcStateOverride = serializeStateOverride(stateOverride)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      blobs,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerBlobGas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest) as TransactionRequest\n\n    if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {\n      try {\n        return await scheduleMulticall(client, {\n          ...request,\n          blockNumber,\n          blockTag,\n        } as unknown as ScheduleMulticallParameters<TChain>)\n      } catch (err) {\n        if (\n          !(err instanceof ClientChainNotConfiguredError) &&\n          !(err instanceof ChainDoesNotSupportContract)\n        )\n          throw err\n      }\n    }\n\n    const response = await client.request({\n      method: 'eth_call',\n      params: rpcStateOverride\n        ? [\n            request as ExactPartial<RpcTransactionRequest>,\n            block,\n            rpcStateOverride,\n          ]\n        : [request as ExactPartial<RpcTransactionRequest>, block],\n    })\n    if (response === '0x') return { data: undefined }\n    return { data: response }\n  } catch (err) {\n    const data = getRevertErrorData(err)\n    const { offchainLookup, offchainLookupSignature } = await import(\n      '../../utils/ccip.js'\n    )\n    if (\n      client.ccipRead !== false &&\n      data?.slice(0, 10) === offchainLookupSignature &&\n      to\n    )\n      return { data: await offchainLookup(client, { data, to }) }\n    throw getCallError(err as ErrorType, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n\n// We only want to perform a scheduled multicall if:\n// - The request has calldata,\n// - The request has a target address,\n// - The target address is not already the aggregate3 signature,\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\nfunction shouldPerformMulticall({ request }: { request: TransactionRequest }) {\n  const { data, to, ...request_ } = request\n  if (!data) return false\n  if (data.startsWith(aggregate3Signature)) return false\n  if (!to) return false\n  if (\n    Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0\n  )\n    return false\n  return true\n}\n\ntype ScheduleMulticallParameters<TChain extends Chain | undefined> = Pick<\n  CallParameters<TChain>,\n  'blockNumber' | 'blockTag'\n> & {\n  data: Hex\n  multicallAddress?: Address | undefined\n  to: Address\n}\n\nexport type ScheduleMulticallErrorType =\n  | GetChainContractAddressErrorType\n  | NumberToHexErrorType\n  | CreateBatchSchedulerErrorType\n  | EncodeFunctionDataErrorType\n  | DecodeFunctionResultErrorType\n  | RawContractErrorType\n  | ErrorType\n\nasync function scheduleMulticall<TChain extends Chain | undefined>(\n  client: Client<Transport>,\n  args: ScheduleMulticallParameters<TChain>,\n) {\n  const { batchSize = 1024, wait = 0 } =\n    typeof client.batch?.multicall === 'object' ? client.batch.multicall : {}\n  const {\n    blockNumber,\n    blockTag = 'latest',\n    data,\n    multicallAddress: multicallAddress_,\n    to,\n  } = args\n\n  let multicallAddress = multicallAddress_\n  if (!multicallAddress) {\n    if (!client.chain) throw new ClientChainNotConfiguredError()\n\n    multicallAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'multicall3',\n    })\n  }\n\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n  const block = blockNumberHex || blockTag\n\n  const { schedule } = createBatchScheduler({\n    id: `${client.uid}.${block}`,\n    wait,\n    shouldSplitBatch(args) {\n      const size = args.reduce((size, { data }) => size + (data.length - 2), 0)\n      return size > batchSize * 2\n    },\n    fn: async (\n      requests: {\n        data: Hex\n        to: Address\n      }[],\n    ) => {\n      const calls = requests.map((request) => ({\n        allowFailure: true,\n        callData: request.data,\n        target: request.to,\n      }))\n\n      const calldata = encodeFunctionData({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: 'aggregate3',\n      })\n\n      const data = await client.request({\n        method: 'eth_call',\n        params: [\n          {\n            data: calldata,\n            to: multicallAddress,\n          },\n          block,\n        ],\n      })\n\n      return decodeFunctionResult({\n        abi: multicall3Abi,\n        args: [calls],\n        functionName: 'aggregate3',\n        data: data || '0x',\n      })\n    },\n  })\n\n  const [{ returnData, success }] = await schedule({ data, to })\n\n  if (!success) throw new RawContractError({ data: returnData })\n  if (returnData === '0x') return { data: undefined }\n  return { data: returnData }\n}\n\nexport type GetRevertErrorDataErrorType = ErrorType\n\nexport function getRevertErrorData(err: unknown) {\n  if (!(err instanceof BaseError)) return undefined\n  const error = err.walk() as RawContractError\n  return typeof error?.data === 'object' ? error.data?.data : error.data\n}\n","import type { CallParameters } from '../../actions/public/call.js'\nimport type { BaseError } from '../../errors/base.js'\nimport {\n  CallExecutionError,\n  type CallExecutionErrorType,\n} from '../../errors/contract.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport {\n  type GetNodeErrorParameters,\n  type GetNodeErrorReturnType,\n  getNodeError,\n} from './getNodeError.js'\n\nexport type GetCallErrorReturnType<cause = ErrorType> = Omit<\n  CallExecutionErrorType,\n  'cause'\n> & {\n  cause: cause | GetNodeErrorReturnType\n}\n\nexport function getCallError<err extends ErrorType<string>>(\n  err: err,\n  {\n    docsPath,\n    ...args\n  }: CallParameters & {\n    chain?: Chain | undefined\n    docsPath?: string | undefined\n  },\n): GetCallErrorReturnType<err> {\n  const cause = (() => {\n    const cause = getNodeError(\n      err as {} as BaseError,\n      args as GetNodeErrorParameters,\n    )\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\n    return cause\n  })()\n  return new CallExecutionError(cause, {\n    docsPath,\n    ...args,\n  }) as GetCallErrorReturnType<err>\n}\n"],"names":["toEventSelector","toSignatureHash","docsPath","decodeFunctionResult","parameters","abi","args","functionName","data","abiItem","item","getAbiItem","name","AbiFunctionNotFoundError","type","undefined","outputs","AbiFunctionOutputsNotFoundError","values","decodeAbiParameters","length","encodeAbiParameters","params","AbiEncodingLengthMismatchError","expectedLength","givenLength","preparedParams","_ref","i","push","prepareParam","param","value","prepareParams","encodeParams","_ref2","arrayComponents","getArrayComponents","_ref3","dynamic","Array","isArray","InvalidArrayError","AbiEncodingArrayLengthMismatchError","dynamicChild","preparedParam","numberToHex","size","encoded","concat","map","_ref4","encodeArray","_ref7","components","param_","_ref8","encodeTuple","isAddress","InvalidAddressError","address","padHex","toLowerCase","encodeAddress","BaseError","boolToHex","encodeBool","startsWith","_ref6","signed","encodeNumber","_ref5","paramSize","split","bytesSize","value_","dir","Math","ceil","Number","parseInt","AbiEncodingBytesSizeMismatchError","expectedSize","encodeBytes","hexValue","stringToHex","partsLength","parts","slice","encodeString","InvalidAbiEncodingTypeError","staticSize","staticParams","dynamicParams","dynamicSize","matches","match","AccountStateConflictError","constructor","super","Object","defineProperty","StateAssignmentConflictError","prettyStateMapping","stateMapping","reduce","pretty","slot","prettyStateOverride","stateOverride","state","val","nonce","balance","code","stateDiff","getChainContractAddress","blockNumber","chain","contract","contracts","ChainDoesNotSupportContract","blockCreated","extract","format","extract_","formatted","keys","key","isSelector","isHex","strict","abiItems","filter","toFunctionSelector","matchedAbiItem","inputs","every","arg","index","abiParameter","isArgOfType","ambiguousTypes","getAmbiguousTypes","AbiItemAmbiguityError","argType","abiParameterType","component","test","Uint8Array","x","replace","sourceParameters","targetParameters","parameterIndex","sourceParameter","targetParameter","types","includes","HttpRequestError","body","details","headers","status","url","metaMessages","getUrl","stringify","Boolean","this","RpcRequestError","error","cause","message","TimeoutError","multicall3Abi","stateMutability","universalResolverErrors","universalResolverResolveAbi","universalResolverReverseAbi","textResolverAbi","addressResolverAbi","universalSignatureValidatorAbi","internalType","assertRequest","account","account_","gasPrice","maxFeePerGas","maxPriorityFeePerGas","to","parseAccount","FeeConflictError","FeeCapTooHighError","TipAboveFeeCapError","bytesToBigInt","bytes","opts","arguments","assertSize","hex","bytesToHex","hexToBigInt","bytesToBool","bytes_","trim","InvalidBytesBooleanError","bytesToNumber","hexToNumber","bytesToString","TextDecoder","decode","hexToBytes","cursor","createCursor","AbiDecodingZeroDataError","AbiDecodingDataSizeTooSmallError","consumed","setPosition","consumed_","decodeParameter","staticPosition","start","readBytes","sizeOfOffset","startOfData","sizeOfLength","hasDynamicChild","decodeArray","hasUnnamedChild","some","decodeTuple","checksumAddress","sliceBytes","decodeAddress","decodeBool","_","offset","decodeBytes","decodeNumber","decodeString","InvalidAbiDecodingTypeError","endsWith","replacer","space","JSON","toString","serializeStateMapping","acc","InvalidBytesLengthError","targetSize","serializeAccountStateOverride","rpcAccountStateOverride","serializeStateOverride","rpcStateOverride","accountState","fn","decodeErrorResult","signature","solidityError","solidityPanic","find","formatAbiItem","AbiErrorSignatureNotFoundError","errorName","hash","keccak256","toBytes","tupleRegex","formatAbiParameter","result","regex","string","exec","groups","execTyped","array","indexed","formatAbiParameters","abiParameters","toSignature","def","active","current","level","valid","char","normalizeSignature","sig","schedulerCache","Map","createBatchScheduler","id","shouldSplitBatch","wait","sort","async","scheduler","getScheduler","flush","then","pendingPromise","resolve","catch","err","reject","delete","get","setScheduler","set","schedule","promise","Promise","setTimeout","getNodeError","executionRevertedError","walk","e","ExecutionRevertedError","nodeMessage","FeeCapTooLowError","NonceTooHighError","NonceTooLowError","NonceMaxValueError","InsufficientFundsError","IntrinsicGasTooHighError","gas","IntrinsicGasTooLowError","TransactionTypeNotSupportedError","UnknownNodeError","isAddressEqual","a","b","encodeFunctionData","prepareEncodeFunctionData","concatHex","formatAbiItemWithArgs","includeFunctionName","includeName","input","join","CallExecutionError","prettyArgs","prettyPrint","from","formatEther","nativeCurrency","symbol","formatGwei","shortMessage","ContractFunctionExecutionError","contractAddress","sender","formattedArgs","functionWithParams","getContractAddress","function","ContractFunctionRevertedError","decodedData","reason","errorArgs","firstArg","panicReasons","errorWithParams","ContractFunctionZeroDataError","RawContractError","AbiConstructorNotFoundError","AbiConstructorParamsNotFoundError","formatAbiParams","_ref10","AbiEventSignatureEmptyTopicsError","_ref11","AbiEventSignatureNotFoundError","_ref12","AbiEventNotFoundError","eventName","_ref13","y","BytesSizeMismatchError","_ref15","givenSize","DecodeLogDataMismatch","_ref16","DecodeLogTopicsMismatch","_ref17","_ref18","_ref19","InvalidDefinitionTypeError","formatAbiParam","UrlRequiredError","createIdStore","take","reset","idCache","getHttpRpcClient","options","request","onRequest","onResponse","timeout","fetchOptions","method","signal","signal_","response","errorInstance","Error","timeoutId","controller","AbortController","abort","clearTimeout","withTimeout","init","jsonrpc","Request","fetch","json","text","parse","ok","statusText","RpcError","ProviderRpcError","ParseRpcError","InvalidRequestRpcError","MethodNotFoundRpcError","InvalidParamsRpcError","InternalRpcError","InvalidInputRpcError","ResourceNotFoundRpcError","ResourceUnavailableRpcError","TransactionRejectedRpcError","MethodNotSupportedRpcError","LimitExceededRpcError","JsonRpcVersionUnsupportedError","UserRejectedRequestError","UnauthorizedProviderError","UnsupportedProviderMethodError","ProviderDisconnectedError","ChainDisconnectedError","SwitchChainError","UnknownRpcError","time","res","withRetry","delay","delay_","retryCount","shouldRetry","attemptRetry","count","retry","buildRequest","overrideOptions","retryDelay","err_","retryAfter","http","config","batch","onFetchRequest","onFetchResponse","retryCount_","timeout_","batchSize","url_","rpcUrls","default","rpcClient","createTransport","requests","buffer","uid","random","substring","isNullUniversalResolverError","callType","encodedLabelToLabelhash","label","indexOf","namehash","fill","labels","hashFromEncodedLabel","hashed","stringToBytes","labelhash","packetToBytes","packet","byteLength","list","getAction","client","action","EXECUTION_REVERTED_ERROR_CODE","getContractError","readContract","rest","calldata","call","EnsAvatarInvalidMetadataError","EnsAvatarInvalidNftUriError","EnsAvatarUriResolutionError","uri","EnsAvatarUnsupportedNamespaceError","namespace","networkRegex","ipfsHashRegex","base64Regex","dataURIRegex","getGateway","custom","defaultGateway","resolveAvatarUri","gatewayUrls","isEncoded","isOnChain","ipfsGateway","ipfs","arweaveGateway","arweave","networkRegexMatch","protocol","subpath","target","subtarget","isIPNS","isIPFS","replacedUri","parsedUri","btoa","getJsonImage","image","image_url","image_data","parseAvatarUri","resolvedURI","isImage","contentType","globalThis","hasOwnProperty","img","Image","onload","onerror","src","isImageUri","parseAvatarRecord","record","nft","uri_","reference","asset_namespace","tokenID","eip_namespace","chainID","erc_namespace","parseNftUri","nftUri","BigInt","getNftTokenUri","resolvedNftUri","encodedJson","atob","uriTokenId","padStart","getMetadataAvatarUri","parseNftAvatarUri","getEnsText","blockTag","universalResolverAddress","universalResolverAddress_","readContractParameters","toHex","readContractAction","createFilterRequestScope","requestMap","transport","method_","FilterTypeNotSupportedError","encodeEventTopics","definition","topics","indexedInputs","args_","j","encodeArg","createContractEventFilter","fromBlock","toBlock","getRequest","createEventFilter","event","events","events_","flatMap","createPendingTransactionFilter","EstimateGasExecutionError","BaseFeeScalarError","Eip1559FeesNotSupportedError","MaxFeePerGasTooLowError","BlockNotFoundError","blockHash","identifier","getBlock","blockTag_","includeTransactions","includeTransactions_","blockNumberHex","block","formatters","formatBlock","getGasPrice","internal_estimateMaxPriorityFeePerGas","block_","fees","defaultPriorityFee","maxPriorityFeePerGasHex","all","baseFeePerGas","internal_estimateFeesPerGas","baseFeeMultiplier","denominator","multiply","base","estimateFeesPerGas","getTransactionCount","getChainId","chainIdHex","defaultParameters","prepareTransactionRequest","blobs","chainId","kzg","getBlock_","commitments","blobsToCommitments","versionedHashes","commitmentsToVersionedHashes","blobVersionedHashes","proofs","blobsToProofs","sidecars","toBlobSidecars","getTransactionType","gasPrice_","estimateGas","accessList","maxFeePerBlobGas","chainFormat","transactionRequest","formatTransactionRequest","getEstimateGasError","promiseCache","responseCache","withCache","cacheKey","cacheTime","POSITIVE_INFINITY","cache","buildCache","clear","getCache","Date","getTime","created","getBlockNumber","decodeEventLog","strict_","argTopics","isUnnamed","topic","decodeTopic","nonIndexedInputs","PositionOutOfBoundsError","parseEventLogs","logs","log","getLogs","formattedLogs","formatLog","getContractEvents","getFeeHistory","blockCount","rewardPercentiles","feeHistory","gasUsedRatio","oldestBlock","reward","formatFeeHistory","getFilterChanges","_client","getProof","storageKeys","proof","storageProof","formatProof","getTransaction","transaction","TransactionNotFoundError","formatTransaction","getTransactionReceipt","receipt","TransactionReceiptNotFoundError","transactionReceipt","formatTransactionReceipt","uninstallFilter","presignMessagePrefix","hashMessage","to_","messageBytes","raw","prefixBytes","universalSignatureValidatorByteCode","encodeDeployData","bytecode","description","_1n","_2n","u8a","hexes","len","hexByte","byte","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","numberToBytesLE","ensureBytes","title","concatBytes","_len","arrays","_key","r","sum","pad","forEach","equalBytes","b1","b2","bitMask","u8n","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","h","_len2","_key2","reseed","seed","gen","out","sl","genUntil","pred","validatorFns","bigint","boolean","stringOrUint8Array","isSafeInteger","field","object","Fp","isValid","outputLen","validateObject","validators","optValidators","checkField","fieldName","isOptional","checkVal","String","entries","number","lengths","create","blockLen","exists","instance","checkFinished","destroyed","finished","output","min","crypto","createView","DataView","byteOffset","rotr","word","shift","Uint32Array","str","TextEncoder","encode","utf8ToBytes","Hash","clone","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","padOffset","isLE","pos","view","subarray","process","dataView","roundClean","digestInto","setBigUint64","_32n","_u32_max","wh","wl","l","setUint32","oview","outLen","destroy","Maj","c","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","getUint32","W15","W2","s0","s1","T1","T2","Chi","sha256","_0n","_3n","_4n","_5n","_8n","mod","pow","num","power","modulo","pow2","invert","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","HMAC","assertHash","iHash","oHash","buf","assertExists","assertBytes","getPrototypeOf","hmac","validateBasic","curve","ORDER","MASK","BYTES","BITS","Gx","Gy","freeze","p","b2n","h2b","ut","DER","Err","_parseInt","d","toSig","sBytes","s","rBytesLeft","hexFromSig","shl","rhl","rl","weierstrassPoints","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","pointPrecomputes","assertPrjPoint","other","Point","px","py","pz","fromAffine","is0","normalizeZ","points","toInv","invertBatch","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","_setWindowSize","windowSize","_WINDOW_SIZE","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","isCompressed","_bits","bits","condition","W","windows","elm","precomputeWindow","window","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","precompute","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","drbg","verify","publicKey","sg","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","bitLen","redef","sqrtP","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","lst","nums","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","Field","secp256k1","defHash","createCurve","a1","a2","POW_2_128","c2","verifyHash","callRequest","signatureHex","yParity","yParity_","serializeSignature","a_","b_","bytesRegex","integerRegex","getTypesForEIP712Domain","domain","version","verifyingContract","salt","hashTypedData","primaryType","EIP712Domain","validateData","struct","integerMatch","_type","size_","bytesMatch","validateTypedData","hashStruct","hashDomain","encodeData","encodedTypes","encodedValues","hashType","encodeField","encodedHashType","unsortedDeps","findTypeDependencies","deps","t","encodeType","primaryType_","results","Set","has","lastIndexOf","parsedType","typeValuePairs","_ref9","listenersCache","cleanupCache","callbackCount","observe","observerId","callbacks","callbackId","getListeners","unwatch","cleanup","unsubscribe","listeners","cb","fns","emit","listener","poll","emitOnBegin","initialWaitTime","interval","unpoll","initialWait","watch","watchBlockNumber","emitMissed","onBlockNumber","onError","poll_","pollingInterval","prevBlockNumber","transports","unsubscribe_","subscribe","onData","prefixRegex","suffixRegex","verifySiweMessage","scheme","parsed","statement","expirationTime","issuedAt","notBefore","requestId","suffix","resources","parseSiweMessage","validateSiweMessage","publicActions","createBlockFilter","estimateContractGas","getBalance","getBlobBaseFee","baseFee","getBlockTransactionCount","getBytecode","getEnsAddress","coinType","functionData","getEnsAvatar","assetGatewayUrls","getEnsName","reverseNode","resolvedAddress","getEnsResolver","resolverAddress","getFilterLogs","estimateMaxPriorityFeePerGas","getStorageAt","getTransactionConfirmations","transactionBlockNumber","multicall","allowFailure","batchSize_","multicallAddress","multicallAddress_","chunkedCalls","currentChunk","currentChunkSize","callData","aggregate3Results","allSettled","calls","aggregate3Result","returnData","success","sendRawTransaction","serializedTransaction","simulateContract","dataSuffix","verifyMessage","verifyTypedData","waitForTransactionReceipt","confirmations","onReplaced","replacedTransaction","retrying","WaitForTransactionReceiptTimeoutError","_unobserve","_unwatch","blockNumber_","done","replacementTransaction","transactions","watchBlocks","onBlock","enablePolling","prevBlock","subscribeBlocks","watchContractEvent","onLogs","pollContractEvent","previousBlockNumber","initialized","subscribeContractEvent","watchEvent","subscribeEvent","watchPendingTransactions","onTransactions","hashes","subscribePendingTransactions","createPublicClient","ccipRead","assign","extend","extendFn","extended","combined","createClient","extractChain","chains","aggregate3Signature","request_","shouldPerformMulticall","ClientChainNotConfiguredError","scheduleMulticall","getRevertErrorData","offchainLookup","offchainLookupSignature","getCallError"],"sourceRoot":""}